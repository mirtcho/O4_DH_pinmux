
O4_DH_pinmux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba30  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800bc08  0800bc08  0001bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc78  0800bc78  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc80  0800bc80  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc80  0800bc80  0001bc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc84  0800bc84  0001bc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800bc88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d70  20000180  0800be08  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ef0  0800be08  00021ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002539b  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004333  00000000  00000000  0004554b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001da8  00000000  00000000  00049880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bb0  00000000  00000000  0004b628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025e6a  00000000  00000000  0004d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ac0b  00000000  00000000  00073042  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000efdce  00000000  00000000  0008dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017da1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f5c  00000000  00000000  0017da98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000180 	.word	0x20000180
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bbf0 	.word	0x0800bbf0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000184 	.word	0x20000184
 8000214:	0800bbf0 	.word	0x0800bbf0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f001 f8a8 	bl	8001672 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(300); //delay after enable Vref
 8000522:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000526:	f001 f915 	bl	8001754 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f883 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 fc65 	bl	8000dfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000532:	f000 fc21 	bl	8000d78 <MX_DMA_Init>
  MX_ADC1_Init();
 8000536:	f000 f8f1 	bl	800071c <MX_ADC1_Init>
  MX_ADC2_Init();
 800053a:	f000 f989 	bl	8000850 <MX_ADC2_Init>
  MX_ADC3_Init();
 800053e:	f000 f9ff 	bl	8000940 <MX_ADC3_Init>
  MX_DAC1_Init();
 8000542:	f000 fa99 	bl	8000a78 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 8000546:	f000 fad1 	bl	8000aec <MX_FDCAN1_Init>
  MX_TIM1_Init();
 800054a:	f000 fb17 	bl	8000b7c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800054e:	f000 fbc7 	bl	8000ce0 <MX_USART3_UART_Init>
  MX_USB_Device_Init();
 8000552:	f00a fe6f 	bl	800b234 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000556:	217f      	movs	r1, #127	; 0x7f
 8000558:	482c      	ldr	r0, [pc, #176]	; (800060c <main+0xf4>)
 800055a:	f002 fb7d 	bl	8002c58 <HAL_ADCEx_Calibration_Start>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <main+0x50>
  {
    Error_Handler();
 8000564:	f000 fcba 	bl	8000edc <Error_Handler>
  }
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8000568:	217f      	movs	r1, #127	; 0x7f
 800056a:	4829      	ldr	r0, [pc, #164]	; (8000610 <main+0xf8>)
 800056c:	f002 fb74 	bl	8002c58 <HAL_ADCEx_Calibration_Start>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <main+0x62>
  {
    Error_Handler();
 8000576:	f000 fcb1 	bl	8000edc <Error_Handler>
  }
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED) != HAL_OK)
 800057a:	217f      	movs	r1, #127	; 0x7f
 800057c:	4825      	ldr	r0, [pc, #148]	; (8000614 <main+0xfc>)
 800057e:	f002 fb6b 	bl	8002c58 <HAL_ADCEx_Calibration_Start>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <main+0x74>
  {
    Error_Handler();
 8000588:	f000 fca8 	bl	8000edc <Error_Handler>
  }
  static volatile uint32_t cal1,cal2,cal3;
  cal1=HAL_ADCEx_Calibration_GetValue(&hadc1, ADC_SINGLE_ENDED);
 800058c:	217f      	movs	r1, #127	; 0x7f
 800058e:	481f      	ldr	r0, [pc, #124]	; (800060c <main+0xf4>)
 8000590:	f002 fbc4 	bl	8002d1c <HAL_ADCEx_Calibration_GetValue>
 8000594:	4602      	mov	r2, r0
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <main+0x100>)
 8000598:	601a      	str	r2, [r3, #0]
  cal2=HAL_ADCEx_Calibration_GetValue(&hadc1, ADC_SINGLE_ENDED);
 800059a:	217f      	movs	r1, #127	; 0x7f
 800059c:	481b      	ldr	r0, [pc, #108]	; (800060c <main+0xf4>)
 800059e:	f002 fbbd 	bl	8002d1c <HAL_ADCEx_Calibration_GetValue>
 80005a2:	4602      	mov	r2, r0
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <main+0x104>)
 80005a6:	601a      	str	r2, [r3, #0]
  cal3=HAL_ADCEx_Calibration_GetValue(&hadc1, ADC_SINGLE_ENDED);
 80005a8:	217f      	movs	r1, #127	; 0x7f
 80005aa:	4818      	ldr	r0, [pc, #96]	; (800060c <main+0xf4>)
 80005ac:	f002 fbb6 	bl	8002d1c <HAL_ADCEx_Calibration_GetValue>
 80005b0:	4602      	mov	r2, r0
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <main+0x108>)
 80005b4:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f001 f8cc 	bl	8001754 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc1_data[0], 3 );
 80005bc:	2203      	movs	r2, #3
 80005be:	4919      	ldr	r1, [pc, #100]	; (8000624 <main+0x10c>)
 80005c0:	4812      	ldr	r0, [pc, #72]	; (800060c <main+0xf4>)
 80005c2:	f001 fd19 	bl	8001ff8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&adc2_data[0], 2 );
 80005c6:	2202      	movs	r2, #2
 80005c8:	4917      	ldr	r1, [pc, #92]	; (8000628 <main+0x110>)
 80005ca:	4811      	ldr	r0, [pc, #68]	; (8000610 <main+0xf8>)
 80005cc:	f001 fd14 	bl	8001ff8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&adc3_data[0], 3 );
 80005d0:	2203      	movs	r2, #3
 80005d2:	4916      	ldr	r1, [pc, #88]	; (800062c <main+0x114>)
 80005d4:	480f      	ldr	r0, [pc, #60]	; (8000614 <main+0xfc>)
 80005d6:	f001 fd0f 	bl	8001ff8 <HAL_ADC_Start_DMA>

  /*## Start PWM signals generation #######################################*/
    /* Start channel 1 */
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80005da:	2100      	movs	r1, #0
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <main+0x118>)
 80005de:	f005 fd4f 	bl	8006080 <HAL_TIM_PWM_Start>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <main+0xd4>
    {
      /* PWM Generation Error */
      Error_Handler();
 80005e8:	f000 fc78 	bl	8000edc <Error_Handler>
    }
    htim1.Instance->CCR1=7353/2;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <main+0x118>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f640 625c 	movw	r2, #3676	; 0xe5c
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint32_t i,s=0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  i++;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3301      	adds	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
	  s+=i;
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	603b      	str	r3, [r7, #0]
	  i++;
 8000608:	e7f7      	b.n	80005fa <main+0xe2>
 800060a:	bf00      	nop
 800060c:	20000554 	.word	0x20000554
 8000610:	2000047c 	.word	0x2000047c
 8000614:	200005c0 	.word	0x200005c0
 8000618:	2000019c 	.word	0x2000019c
 800061c:	200001a0 	.word	0x200001a0
 8000620:	200001a4 	.word	0x200001a4
 8000624:	2000062c 	.word	0x2000062c
 8000628:	200004e8 	.word	0x200004e8
 800062c:	200003d0 	.word	0x200003d0
 8000630:	200006fc 	.word	0x200006fc

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0a8      	sub	sp, #160	; 0xa0
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800063e:	2238      	movs	r2, #56	; 0x38
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f00b facc 	bl	800bbe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2250      	movs	r2, #80	; 0x50
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f00b fabe 	bl	800bbe0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000668:	f004 fca2 	bl	8004fb0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000674:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067c:	2303      	movs	r3, #3
 800067e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000682:	2301      	movs	r3, #1
 8000684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000688:	2318      	movs	r3, #24
 800068a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800068e:	2308      	movs	r3, #8
 8000690:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000694:	2304      	movs	r3, #4
 8000696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 fd27 	bl	80050f8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006b0:	f000 fc14 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2303      	movs	r3, #3
 80006ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006cc:	2104      	movs	r1, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 f82a 	bl	8005728 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006da:	f000 fbff 	bl	8000edc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <SystemClock_Config+0xe4>)
 80006e0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC345
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80006e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80006ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006f0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80006f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80006f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4618      	mov	r0, r3
 8000702:	f005 fa2d 	bl	8005b60 <HAL_RCCEx_PeriphCLKConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800070c:	f000 fbe6 	bl	8000edc <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	37a0      	adds	r7, #160	; 0xa0
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	0001b004 	.word	0x0001b004

0800071c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2220      	movs	r2, #32
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f00b fa53 	bl	800bbe0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800073a:	4b41      	ldr	r3, [pc, #260]	; (8000840 <MX_ADC1_Init+0x124>)
 800073c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000740:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000742:	4b3f      	ldr	r3, [pc, #252]	; (8000840 <MX_ADC1_Init+0x124>)
 8000744:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000748:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_ADC1_Init+0x124>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <MX_ADC1_Init+0x124>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000756:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <MX_ADC1_Init+0x124>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800075c:	4b38      	ldr	r3, [pc, #224]	; (8000840 <MX_ADC1_Init+0x124>)
 800075e:	2201      	movs	r2, #1
 8000760:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <MX_ADC1_Init+0x124>)
 8000764:	2204      	movs	r2, #4
 8000766:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000768:	4b35      	ldr	r3, [pc, #212]	; (8000840 <MX_ADC1_Init+0x124>)
 800076a:	2200      	movs	r2, #0
 800076c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <MX_ADC1_Init+0x124>)
 8000770:	2200      	movs	r2, #0
 8000772:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000774:	4b32      	ldr	r3, [pc, #200]	; (8000840 <MX_ADC1_Init+0x124>)
 8000776:	2203      	movs	r2, #3
 8000778:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <MX_ADC1_Init+0x124>)
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_ADC1_Init+0x124>)
 8000784:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <MX_ADC1_Init+0x124>)
 800078c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_ADC1_Init+0x124>)
 8000794:	2201      	movs	r2, #1
 8000796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_ADC1_Init+0x124>)
 800079c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007a2:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_ADC1_Init+0x124>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	4825      	ldr	r0, [pc, #148]	; (8000840 <MX_ADC1_Init+0x124>)
 80007ac:	f001 fa72 	bl	8001c94 <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80007b6:	f000 fb91 	bl	8000edc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	481e      	ldr	r0, [pc, #120]	; (8000840 <MX_ADC1_Init+0x124>)
 80007c6:	f002 fab9 	bl	8002d3c <HAL_ADCEx_MultiModeConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80007d0:	f000 fb84 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ADC1_Init+0x128>)
 80007d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d8:	2306      	movs	r3, #6
 80007da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80007dc:	2305      	movs	r3, #5
 80007de:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e0:	237f      	movs	r3, #127	; 0x7f
 80007e2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e4:	2304      	movs	r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4813      	ldr	r0, [pc, #76]	; (8000840 <MX_ADC1_Init+0x124>)
 80007f2:	f001 fce1 	bl	80021b8 <HAL_ADC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80007fc:	f000 fb6e 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ADC1_Init+0x12c>)
 8000802:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000804:	230c      	movs	r3, #12
 8000806:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_ADC1_Init+0x124>)
 800080e:	f001 fcd3 	bl	80021b8 <HAL_ADC_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000818:	f000 fb60 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_ADC1_Init+0x130>)
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000820:	2312      	movs	r3, #18
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_ADC1_Init+0x124>)
 800082a:	f001 fcc5 	bl	80021b8 <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000834:	f000 fb52 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3730      	adds	r7, #48	; 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000554 	.word	0x20000554
 8000844:	04300002 	.word	0x04300002
 8000848:	0c900008 	.word	0x0c900008
 800084c:	10c00010 	.word	0x10c00010

08000850 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2220      	movs	r2, #32
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f00b f9bf 	bl	800bbe0 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000862:	4b33      	ldr	r3, [pc, #204]	; (8000930 <MX_ADC2_Init+0xe0>)
 8000864:	4a33      	ldr	r2, [pc, #204]	; (8000934 <MX_ADC2_Init+0xe4>)
 8000866:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000868:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_ADC2_Init+0xe0>)
 800086a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800086e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_ADC2_Init+0xe0>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <MX_ADC2_Init+0xe0>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_ADC2_Init+0xe0>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_ADC2_Init+0xe0>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_ADC2_Init+0xe0>)
 800088a:	2204      	movs	r2, #4
 800088c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800088e:	4b28      	ldr	r3, [pc, #160]	; (8000930 <MX_ADC2_Init+0xe0>)
 8000890:	2200      	movs	r2, #0
 8000892:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_ADC2_Init+0xe0>)
 8000896:	2200      	movs	r2, #0
 8000898:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_ADC2_Init+0xe0>)
 800089c:	2202      	movs	r2, #2
 800089e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_ADC2_Init+0xe0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC2_Init+0xe0>)
 80008aa:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ADC2_Init+0xe0>)
 80008b2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ADC2_Init+0xe0>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_ADC2_Init+0xe0>)
 80008c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC2_Init+0xe0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008d0:	4817      	ldr	r0, [pc, #92]	; (8000930 <MX_ADC2_Init+0xe0>)
 80008d2:	f001 f9df 	bl	8001c94 <HAL_ADC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80008dc:	f000 fafe 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_ADC2_Init+0xe8>)
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e4:	2306      	movs	r3, #6
 80008e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80008e8:	2305      	movs	r3, #5
 80008ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ec:	237f      	movs	r3, #127	; 0x7f
 80008ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f0:	2304      	movs	r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_ADC2_Init+0xe0>)
 80008fe:	f001 fc5b 	bl	80021b8 <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000908:	f000 fae8 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_ADC2_Init+0xec>)
 800090e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000910:	230c      	movs	r3, #12
 8000912:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC2_Init+0xe0>)
 800091a:	f001 fc4d 	bl	80021b8 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 8000924:	f000 fada 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000047c 	.word	0x2000047c
 8000934:	50000100 	.word	0x50000100
 8000938:	08600004 	.word	0x08600004
 800093c:	32601000 	.word	0x32601000

08000940 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2220      	movs	r2, #32
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f00b f941 	bl	800bbe0 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800095e:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000960:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <MX_ADC3_Init+0x128>)
 8000962:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000964:	4b3f      	ldr	r3, [pc, #252]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000966:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800096a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800096c:	4b3d      	ldr	r3, [pc, #244]	; (8000a64 <MX_ADC3_Init+0x124>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000972:	4b3c      	ldr	r3, [pc, #240]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000978:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <MX_ADC3_Init+0x124>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800097e:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000980:	2201      	movs	r2, #1
 8000982:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000984:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000986:	2204      	movs	r2, #4
 8000988:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800098a:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <MX_ADC3_Init+0x124>)
 800098c:	2200      	movs	r2, #0
 800098e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000990:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000992:	2200      	movs	r2, #0
 8000994:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 3;
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000998:	2203      	movs	r2, #3
 800099a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800099c:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <MX_ADC3_Init+0x124>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80009a4:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <MX_ADC3_Init+0x124>)
 80009a6:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80009ac:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_ADC3_Init+0x124>)
 80009ae:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_ADC3_Init+0x124>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_ADC3_Init+0x124>)
 80009be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_ADC3_Init+0x124>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009cc:	4825      	ldr	r0, [pc, #148]	; (8000a64 <MX_ADC3_Init+0x124>)
 80009ce:	f001 f961 	bl	8001c94 <HAL_ADC_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 80009d8:	f000 fa80 	bl	8000edc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	481f      	ldr	r0, [pc, #124]	; (8000a64 <MX_ADC3_Init+0x124>)
 80009e8:	f002 f9a8 	bl	8002d3c <HAL_ADCEx_MultiModeConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 80009f2:	f000 fa73 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_ADC3_Init+0x12c>)
 80009f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fa:	2306      	movs	r3, #6
 80009fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80009fe:	2305      	movs	r3, #5
 8000a00:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a02:	237f      	movs	r3, #127	; 0x7f
 8000a04:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a06:	2304      	movs	r3, #4
 8000a08:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000a14:	f001 fbd0 	bl	80021b8 <HAL_ADC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8000a1e:	f000 fa5d 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_ADC3_Init+0x130>)
 8000a24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a26:	230c      	movs	r3, #12
 8000a28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000a30:	f001 fbc2 	bl	80021b8 <HAL_ADC_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8000a3a:	f000 fa4f 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_ADC3_Init+0x134>)
 8000a40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a42:	2312      	movs	r3, #18
 8000a44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <MX_ADC3_Init+0x124>)
 8000a4c:	f001 fbb4 	bl	80021b8 <HAL_ADC_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8000a56:	f000 fa41 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200005c0 	.word	0x200005c0
 8000a68:	50000400 	.word	0x50000400
 8000a6c:	32601000 	.word	0x32601000
 8000a70:	c7520000 	.word	0xc7520000
 8000a74:	cb840000 	.word	0xcb840000

08000a78 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2230      	movs	r2, #48	; 0x30
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00b f8ab 	bl	800bbe0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_DAC1_Init+0x6c>)
 8000a8c:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <MX_DAC1_Init+0x70>)
 8000a8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a90:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_DAC1_Init+0x6c>)
 8000a92:	f002 fb46 	bl	8003122 <HAL_DAC_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a9c:	f000 fa1e 	bl	8000edc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000abc:	2306      	movs	r3, #6
 8000abe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_DAC1_Init+0x6c>)
 8000acc:	f002 fb4c 	bl	8003168 <HAL_DAC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000ad6:	f000 fa01 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3730      	adds	r7, #48	; 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200003dc 	.word	0x200003dc
 8000ae8:	50000800 	.word	0x50000800

08000aec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000af2:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <MX_FDCAN1_Init+0x8c>)
 8000af4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b02:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_FDCAN1_Init+0x88>)
 8000b60:	f002 ffb0 	bl	8003ac4 <HAL_FDCAN_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000b6a:	f000 f9b7 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000698 	.word	0x20000698
 8000b78:	40006400 	.word	0x40006400

08000b7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09c      	sub	sp, #112	; 0x70
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2234      	movs	r2, #52	; 0x34
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f00b f812 	bl	800bbe0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bbc:	4b46      	ldr	r3, [pc, #280]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bbe:	4a47      	ldr	r2, [pc, #284]	; (8000cdc <MX_TIM1_Init+0x160>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000bc2:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bc4:	2240      	movs	r2, #64	; 0x40
 8000bc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000bc8:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bca:	2220      	movs	r2, #32
 8000bcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7353;
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bd0:	f641 42b9 	movw	r2, #7353	; 0x1cb9
 8000bd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bdc:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be2:	4b3d      	ldr	r3, [pc, #244]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000be8:	483b      	ldr	r0, [pc, #236]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000bea:	f005 f9e9 	bl	8005fc0 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000bf4:	f000 f972 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bfe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c02:	4619      	mov	r1, r3
 8000c04:	4834      	ldr	r0, [pc, #208]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000c06:	f005 fbab 	bl	8006360 <HAL_TIM_ConfigClockSource>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c10:	f000 f964 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c14:	4830      	ldr	r0, [pc, #192]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000c16:	f005 f9fe 	bl	8006016 <HAL_TIM_PWM_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c20:	f000 f95c 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c24:	2320      	movs	r3, #32
 8000c26:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000c28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c2c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c36:	4619      	mov	r1, r3
 8000c38:	4827      	ldr	r0, [pc, #156]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000c3a:	f006 f8c9 	bl	8006dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000c44:	f000 f94a 	bl	8000edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c48:	2360      	movs	r3, #96	; 0x60
 8000c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 234;
 8000c4c:	23ea      	movs	r3, #234	; 0xea
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c50:	2300      	movs	r3, #0
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c54:	2300      	movs	r3, #0
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481a      	ldr	r0, [pc, #104]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000c6e:	f005 fa5f 	bl	8006130 <HAL_TIM_PWM_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000c78:	f000 f930 	bl	8000edc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000cba:	f006 f8e7 	bl	8006e8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000cc4:	f000 f90a 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <MX_TIM1_Init+0x15c>)
 8000cca:	f000 fb71 	bl	80013b0 <HAL_TIM_MspPostInit>

}
 8000cce:	bf00      	nop
 8000cd0:	3770      	adds	r7, #112	; 0x70
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200006fc 	.word	0x200006fc
 8000cdc:	40012c00 	.word	0x40012c00

08000ce0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000ce6:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <MX_USART3_UART_Init+0x94>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d2a:	f006 f94f 	bl	8006fcc <HAL_UART_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d34:	f000 f8d2 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d3c:	f007 fcf3 	bl	8008726 <HAL_UARTEx_SetTxFifoThreshold>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d46:	f000 f8c9 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4808      	ldr	r0, [pc, #32]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d4e:	f007 fd28 	bl	80087a2 <HAL_UARTEx_SetRxFifoThreshold>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d58:	f000 f8c0 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_USART3_UART_Init+0x90>)
 8000d5e:	f007 fca9 	bl	80086b4 <HAL_UARTEx_DisableFifoMode>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d68:	f000 f8b8 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200003f0 	.word	0x200003f0
 8000d74:	40004800 	.word	0x40004800

08000d78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_DMA_Init+0x80>)
 8000d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d82:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <MX_DMA_Init+0x80>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6493      	str	r3, [r2, #72]	; 0x48
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_DMA_Init+0x80>)
 8000d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_DMA_Init+0x80>)
 8000d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9a:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <MX_DMA_Init+0x80>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6493      	str	r3, [r2, #72]	; 0x48
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_DMA_Init+0x80>)
 8000da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	200b      	movs	r0, #11
 8000db4:	f002 f981 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000db8:	200b      	movs	r0, #11
 8000dba:	f002 f998 	bl	80030ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	200c      	movs	r0, #12
 8000dc4:	f002 f979 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000dc8:	200c      	movs	r0, #12
 8000dca:	f002 f990 	bl	80030ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	200d      	movs	r0, #13
 8000dd4:	f002 f971 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000dd8:	200d      	movs	r0, #13
 8000dda:	f002 f988 	bl	80030ee <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	205e      	movs	r0, #94	; 0x5e
 8000de4:	f002 f969 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000de8:	205e      	movs	r0, #94	; 0x5e
 8000dea:	f002 f980 	bl	80030ee <HAL_NVIC_EnableIRQ>

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	4a2e      	ldr	r2, [pc, #184]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e2a:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a28      	ldr	r2, [pc, #160]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	4a22      	ldr	r2, [pc, #136]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_DISPLAY_ON_GPIO_Port, GPIO_DISPLAY_ON_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e78:	4816      	ldr	r0, [pc, #88]	; (8000ed4 <MX_GPIO_Init+0xd8>)
 8000e7a:	f003 f95f 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_USB_Enable_GPIO_Port, GPIO_USB_Enable_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <MX_GPIO_Init+0xdc>)
 8000e86:	f003 f959 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_DISPLAY_ON_Pin */
  GPIO_InitStruct.Pin = GPIO_DISPLAY_ON_Pin;
 8000e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_DISPLAY_ON_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_GPIO_Init+0xd8>)
 8000ea4:	f002 ffc8 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_USB_Enable_Pin */
  GPIO_InitStruct.Pin = GPIO_USB_Enable_Pin;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_USB_Enable_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_GPIO_Init+0xdc>)
 8000ec2:	f002 ffb9 	bl	8003e38 <HAL_GPIO_Init>

}
 8000ec6:	bf00      	nop
 8000ec8:	3728      	adds	r7, #40	; 0x28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	48000400 	.word	0x48000400

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000efa:	6093      	str	r3, [r2, #8]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40007000 	.word	0x40007000

08000f0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_MspInit+0x54>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <HAL_MspInit+0x54>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_MspInit+0x54>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_MspInit+0x54>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <HAL_MspInit+0x54>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	6593      	str	r3, [r2, #88]	; 0x58
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_MspInit+0x54>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale 
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8000f42:	2010      	movs	r0, #16
 8000f44:	f000 fc28 	bl	8001798 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer 
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000f48:	f000 fc4e 	bl	80017e8 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode 
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 fc37 	bl	80017c0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000f52:	f7ff ffcb 	bl	8000eec <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b092      	sub	sp, #72	; 0x48
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(hadc->Instance==ADC1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f84:	d170      	bne.n	8001068 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f86:	4b80      	ldr	r3, [pc, #512]	; (8001188 <HAL_ADC_MspInit+0x224>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a7e      	ldr	r2, [pc, #504]	; (8001188 <HAL_ADC_MspInit+0x224>)
 8000f8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f90:	4b7d      	ldr	r3, [pc, #500]	; (8001188 <HAL_ADC_MspInit+0x224>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d10b      	bne.n	8000fb0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f98:	4b7c      	ldr	r3, [pc, #496]	; (800118c <HAL_ADC_MspInit+0x228>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a7b      	ldr	r2, [pc, #492]	; (800118c <HAL_ADC_MspInit+0x228>)
 8000f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b79      	ldr	r3, [pc, #484]	; (800118c <HAL_ADC_MspInit+0x228>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fac:	623b      	str	r3, [r7, #32]
 8000fae:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b76      	ldr	r3, [pc, #472]	; (800118c <HAL_ADC_MspInit+0x228>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb4:	4a75      	ldr	r2, [pc, #468]	; (800118c <HAL_ADC_MspInit+0x228>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbc:	4b73      	ldr	r3, [pc, #460]	; (800118c <HAL_ADC_MspInit+0x228>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ADC1_V12V_Pin|ADC1_12V_DISPLAY_Pin|ADC1_3V3HALF_Pin;
 8000fc8:	230d      	movs	r3, #13
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f002 ff2b 	bl	8003e38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fe2:	4b6b      	ldr	r3, [pc, #428]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 8000fe4:	4a6b      	ldr	r2, [pc, #428]	; (8001194 <HAL_ADC_MspInit+0x230>)
 8000fe6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fe8:	4b69      	ldr	r3, [pc, #420]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 8000fea:	2205      	movs	r2, #5
 8000fec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fee:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff4:	4b66      	ldr	r3, [pc, #408]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ffa:	4b65      	ldr	r3, [pc, #404]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001000:	4b63      	ldr	r3, [pc, #396]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 8001002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001008:	4b61      	ldr	r3, [pc, #388]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 800100a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001010:	4b5f      	ldr	r3, [pc, #380]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 8001012:	2220      	movs	r2, #32
 8001014:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001016:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800101c:	485c      	ldr	r0, [pc, #368]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 800101e:	f002 fa4f 	bl	80034c0 <HAL_DMA_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001028:	f7ff ff58 	bl	8000edc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
    pSyncConfig.SyncEnable = DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    pSyncConfig.EventEnable = ENABLE;
 800103a:	2301      	movs	r3, #1
 800103c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    pSyncConfig.RequestNumber = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	4851      	ldr	r0, [pc, #324]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 800104c:	f002 fcaa 	bl	80039a4 <HAL_DMAEx_ConfigMuxSync>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001056:	f7ff ff41 	bl	8000edc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4c      	ldr	r2, [pc, #304]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 800105e:	655a      	str	r2, [r3, #84]	; 0x54
 8001060:	4a4b      	ldr	r2, [pc, #300]	; (8001190 <HAL_ADC_MspInit+0x22c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001066:	e0f3      	b.n	8001250 <HAL_ADC_MspInit+0x2ec>
  else if(hadc->Instance==ADC2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <HAL_ADC_MspInit+0x234>)
 800106e:	4293      	cmp	r3, r2
 8001070:	f040 809a 	bne.w	80011a8 <HAL_ADC_MspInit+0x244>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001074:	4b44      	ldr	r3, [pc, #272]	; (8001188 <HAL_ADC_MspInit+0x224>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	4a43      	ldr	r2, [pc, #268]	; (8001188 <HAL_ADC_MspInit+0x224>)
 800107c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800107e:	4b42      	ldr	r3, [pc, #264]	; (8001188 <HAL_ADC_MspInit+0x224>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d10b      	bne.n	800109e <HAL_ADC_MspInit+0x13a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001086:	4b41      	ldr	r3, [pc, #260]	; (800118c <HAL_ADC_MspInit+0x228>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a40      	ldr	r2, [pc, #256]	; (800118c <HAL_ADC_MspInit+0x228>)
 800108c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b3e      	ldr	r3, [pc, #248]	; (800118c <HAL_ADC_MspInit+0x228>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <HAL_ADC_MspInit+0x228>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a3a      	ldr	r2, [pc, #232]	; (800118c <HAL_ADC_MspInit+0x228>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <HAL_ADC_MspInit+0x228>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_ADC_MspInit+0x228>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <HAL_ADC_MspInit+0x228>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_ADC_MspInit+0x228>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ADC2_V5V_Pin;
 80010ce:	2302      	movs	r3, #2
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d2:	2303      	movs	r3, #3
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC2_V5V_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f002 fea8 	bl	8003e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_BTN_Pin;
 80010e8:	2304      	movs	r3, #4
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	2303      	movs	r3, #3
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC2_BTN_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010f8:	4619      	mov	r1, r3
 80010fa:	4828      	ldr	r0, [pc, #160]	; (800119c <HAL_ADC_MspInit+0x238>)
 80010fc:	f002 fe9c 	bl	8003e38 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 8001102:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <HAL_ADC_MspInit+0x240>)
 8001104:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 8001108:	2224      	movs	r2, #36	; 0x24
 800110a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 8001128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 8001130:	2220      	movs	r2, #32
 8001132:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800113a:	4819      	ldr	r0, [pc, #100]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 800113c:	f002 f9c0 	bl	80034c0 <HAL_DMA_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 8001146:	f7ff fec9 	bl	8000edc <Error_Handler>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    pSyncConfig.SyncEnable = DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    pSyncConfig.EventEnable = ENABLE;
 8001158:	2301      	movs	r3, #1
 800115a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    pSyncConfig.RequestNumber = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc2, &pSyncConfig) != HAL_OK)
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 800116a:	f002 fc1b 	bl	80039a4 <HAL_DMAEx_ConfigMuxSync>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_ADC_MspInit+0x214>
      Error_Handler();
 8001174:	f7ff feb2 	bl	8000edc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_ADC_MspInit+0x23c>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001184:	e064      	b.n	8001250 <HAL_ADC_MspInit+0x2ec>
 8001186:	bf00      	nop
 8001188:	200001a8 	.word	0x200001a8
 800118c:	40021000 	.word	0x40021000
 8001190:	20000638 	.word	0x20000638
 8001194:	40020008 	.word	0x40020008
 8001198:	50000100 	.word	0x50000100
 800119c:	48000400 	.word	0x48000400
 80011a0:	2000073c 	.word	0x2000073c
 80011a4:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC3)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a2a      	ldr	r2, [pc, #168]	; (8001258 <HAL_ADC_MspInit+0x2f4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d14e      	bne.n	8001250 <HAL_ADC_MspInit+0x2ec>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HAL_ADC_MspInit+0x2f8>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a29      	ldr	r2, [pc, #164]	; (800125c <HAL_ADC_MspInit+0x2f8>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_ADC_MspInit+0x2f8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_ADC_MspInit+0x2f8>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_ADC_MspInit+0x2f8>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_ADC_MspInit+0x2f8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC3_I12V_Pin;
 80011e2:	2301      	movs	r3, #1
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC3_I12V_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011f2:	4619      	mov	r1, r3
 80011f4:	481a      	ldr	r0, [pc, #104]	; (8001260 <HAL_ADC_MspInit+0x2fc>)
 80011f6:	f002 fe1f 	bl	8003e38 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_ADC_MspInit+0x300>)
 80011fc:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <HAL_ADC_MspInit+0x304>)
 80011fe:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_ADC_MspInit+0x300>)
 8001202:	2225      	movs	r2, #37	; 0x25
 8001204:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_ADC_MspInit+0x300>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_ADC_MspInit+0x300>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_ADC_MspInit+0x300>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_ADC_MspInit+0x300>)
 800121a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_ADC_MspInit+0x300>)
 8001222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001226:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_ADC_MspInit+0x300>)
 800122a:	2220      	movs	r2, #32
 800122c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_ADC_MspInit+0x300>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_ADC_MspInit+0x300>)
 8001236:	f002 f943 	bl	80034c0 <HAL_DMA_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_ADC_MspInit+0x2e0>
      Error_Handler();
 8001240:	f7ff fe4c 	bl	8000edc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_ADC_MspInit+0x300>)
 8001248:	655a      	str	r2, [r3, #84]	; 0x54
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_ADC_MspInit+0x300>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001250:	bf00      	nop
 8001252:	3748      	adds	r7, #72	; 0x48
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	50000400 	.word	0x50000400
 800125c:	40021000 	.word	0x40021000
 8001260:	48000400 	.word	0x48000400
 8001264:	200004f4 	.word	0x200004f4
 8001268:	40020030 	.word	0x40020030

0800126c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <HAL_DAC_MspInit+0x74>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d124      	bne.n	80012d8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_DAC_MspInit+0x78>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_DAC_MspInit+0x78>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_DAC_MspInit+0x78>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_DAC_MspInit+0x78>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_DAC_MspInit+0x78>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_DAC_MspInit+0x78>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = DAC1_Out1_LED_Pin;
 80012be:	2310      	movs	r3, #16
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	2303      	movs	r3, #3
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_Out1_LED_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f002 fdb0 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	50000800 	.word	0x50000800
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_FDCAN_MspInit+0x7c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d128      	bne.n	800135c <HAL_FDCAN_MspInit+0x74>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_FDCAN_MspInit+0x80>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	4a16      	ldr	r2, [pc, #88]	; (8001368 <HAL_FDCAN_MspInit+0x80>)
 8001310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001314:	6593      	str	r3, [r2, #88]	; 0x58
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_FDCAN_MspInit+0x80>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_FDCAN_MspInit+0x80>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_FDCAN_MspInit+0x80>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_FDCAN_MspInit+0x80>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800133a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800134c:	2309      	movs	r3, #9
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_FDCAN_MspInit+0x84>)
 8001358:	f002 fd6e 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40006400 	.word	0x40006400
 8001368:	40021000 	.word	0x40021000
 800136c:	48000400 	.word	0x48000400

08001370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_TIM_Base_MspInit+0x38>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10b      	bne.n	800139a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_TIM_Base_MspInit+0x3c>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_TIM_Base_MspInit+0x3c>)
 8001388:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800138c:	6613      	str	r3, [r2, #96]	; 0x60
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_TIM_Base_MspInit+0x3c>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40012c00 	.word	0x40012c00
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_TIM_MspPostInit+0x68>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d11d      	bne.n	800140e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_TIM_MspPostInit+0x6c>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_TIM_MspPostInit+0x6c>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_TIM_MspPostInit+0x6c>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80013ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013fc:	2306      	movs	r3, #6
 80013fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140a:	f002 fd15 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40012c00 	.word	0x40012c00
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_UART_MspInit+0x7c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d128      	bne.n	8001494 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_UART_MspInit+0x80>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <HAL_UART_MspInit+0x80>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144c:	6593      	str	r3, [r2, #88]	; 0x58
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_UART_MspInit+0x80>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_UART_MspInit+0x80>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_UART_MspInit+0x80>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_UART_MspInit+0x80>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001472:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001484:	2307      	movs	r3, #7
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_UART_MspInit+0x84>)
 8001490:	f002 fcd2 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40004800 	.word	0x40004800
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000400 	.word	0x48000400

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 f90c 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8001508:	4806      	ldr	r0, [pc, #24]	; (8001524 <DMA1_Channel1_IRQHandler+0x20>)
 800150a:	f002 f8fc 	bl	8003706 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  adc1_ready=1;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <DMA1_Channel1_IRQHandler+0x24>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
  i1++;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <DMA1_Channel1_IRQHandler+0x28>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <DMA1_Channel1_IRQHandler+0x28>)
 800151c:	6013      	str	r3, [r2, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000638 	.word	0x20000638
 8001528:	200007a8 	.word	0x200007a8
 800152c:	200007ac 	.word	0x200007ac

08001530 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001534:	4810      	ldr	r0, [pc, #64]	; (8001578 <DMA1_Channel2_IRQHandler+0x48>)
 8001536:	f002 f8e6 	bl	8003706 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
  adc2_ready=1;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <DMA1_Channel2_IRQHandler+0x4c>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
  i2++;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <DMA1_Channel2_IRQHandler+0x50>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <DMA1_Channel2_IRQHandler+0x50>)
 8001548:	6013      	str	r3, [r2, #0]
  if (adc1_ready && adc2_ready)
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <DMA1_Channel2_IRQHandler+0x54>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00f      	beq.n	8001572 <DMA1_Channel2_IRQHandler+0x42>
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <DMA1_Channel2_IRQHandler+0x4c>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <DMA1_Channel2_IRQHandler+0x42>
  {
	  adc1_ready=0;
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <DMA1_Channel2_IRQHandler+0x54>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
	  adc2_ready=0;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <DMA1_Channel2_IRQHandler+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
	  HAL_DMA_IRQHandler(&hdma_adc1);
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <DMA1_Channel2_IRQHandler+0x58>)
 8001568:	f002 f8cd 	bl	8003706 <HAL_DMA_IRQHandler>
	  HAL_DMA_IRQHandler(&hdma_adc2);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <DMA1_Channel2_IRQHandler+0x48>)
 800156e:	f002 f8ca 	bl	8003706 <HAL_DMA_IRQHandler>
  }
  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000073c 	.word	0x2000073c
 800157c:	200007b0 	.word	0x200007b0
 8001580:	200007a4 	.word	0x200007a4
 8001584:	200007a8 	.word	0x200007a8
 8001588:	20000638 	.word	0x20000638

0800158c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <DMA1_Channel3_IRQHandler+0x2c>)
 8001592:	f002 f8b8 	bl	8003706 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  adc3_ready=1;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <DMA1_Channel3_IRQHandler+0x30>)
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
  i3++;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <DMA1_Channel3_IRQHandler+0x34>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <DMA1_Channel3_IRQHandler+0x34>)
 80015a4:	6013      	str	r3, [r2, #0]
  {
	  adc3_ready=0;
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <DMA1_Channel3_IRQHandler+0x30>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
	  HAL_DMA_IRQHandler(&hdma_adc3);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <DMA1_Channel3_IRQHandler+0x2c>)
 80015ae:	f002 f8aa 	bl	8003706 <HAL_DMA_IRQHandler>
  }
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200004f4 	.word	0x200004f4
 80015bc:	200007a0 	.word	0x200007a0
 80015c0:	2000079c 	.word	0x2000079c

080015c4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <USB_LP_IRQHandler+0x10>)
 80015ca:	f002 feac 	bl	8004326 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20001c7c 	.word	0x20001c7c

080015d8 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <DMAMUX_OVR_IRQHandler+0x14>)
 80015de:	f002 fa1f 	bl	8003a20 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc2);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <DMAMUX_OVR_IRQHandler+0x18>)
 80015e4:	f002 fa1c 	bl	8003a20 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000638 	.word	0x20000638
 80015f0:	2000073c 	.word	0x2000073c

080015f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <SystemInit+0x28>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a07      	ldr	r2, [pc, #28]	; (800161c <SystemInit+0x28>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <SystemInit+0x28>)
 800160a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160e:	609a      	str	r2, [r3, #8]
#endif
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001622:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <LoopForever+0x6>)
  ldr r1, =_edata
 8001626:	490e      	ldr	r1, [pc, #56]	; (8001660 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <LoopForever+0xe>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <LoopForever+0x12>)
  ldr r4, =_ebss
 800163c:	4c0b      	ldr	r4, [pc, #44]	; (800166c <LoopForever+0x16>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800164a:	f7ff ffd3 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164e:	f00a faa3 	bl	800bb98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001652:	f7fe ff61 	bl	8000518 <main>

08001656 <LoopForever>:

LoopForever:
    b LoopForever
 8001656:	e7fe      	b.n	8001656 <LoopForever>
  ldr   r0, =_estack
 8001658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001664:	0800bc88 	.word	0x0800bc88
  ldr r2, =_sbss
 8001668:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800166c:	20001ef0 	.word	0x20001ef0

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>

08001672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f001 fd11 	bl	80030a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f80e 	bl	80016a4 <HAL_InitTick>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	e001      	b.n	8001698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001694:	f7ff fc3a 	bl	8000f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001698:	79fb      	ldrb	r3, [r7, #7]

}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_InitTick+0x68>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d022      	beq.n	80016fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_InitTick+0x6c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_InitTick+0x68>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fd1c 	bl	800310a <HAL_SYSTICK_Config>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10f      	bne.n	80016f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	d809      	bhi.n	80016f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016de:	2200      	movs	r2, #0
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295
 80016e6:	f001 fce8 	bl	80030ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_InitTick+0x70>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e007      	b.n	8001702 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e004      	b.n	8001702 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000008 	.word	0x20000008
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_IncTick+0x1c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_IncTick+0x20>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4413      	add	r3, r2
 8001726:	4a03      	ldr	r2, [pc, #12]	; (8001734 <HAL_IncTick+0x1c>)
 8001728:	6013      	str	r3, [r2, #0]
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	200007b4 	.word	0x200007b4
 8001738:	20000008 	.word	0x20000008

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200007b4 	.word	0x200007b4

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d004      	beq.n	8001778 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_Delay+0x40>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001778:	bf00      	nop
 800177a:	f7ff ffdf 	bl	800173c <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	429a      	cmp	r2, r3
 8001788:	d8f7      	bhi.n	800177a <HAL_Delay+0x26>
  {
  }
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80017a8:	4904      	ldr	r1, [pc, #16]	; (80017bc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40010030 	.word	0x40010030

080017c0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 0202 	bic.w	r2, r3, #2
 80017d0:	4904      	ldr	r1, [pc, #16]	; (80017e4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40010030 	.word	0x40010030

080017e8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80017fa:	f7ff ff9f 	bl	800173c <HAL_GetTick>
 80017fe:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001800:	e008      	b.n	8001814 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001802:	f7ff ff9b 	bl	800173c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b0a      	cmp	r3, #10
 800180e:	d901      	bls.n	8001814 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e006      	b.n	8001822 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40010030 	.word	0x40010030

08001830 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001898:	b490      	push	{r4, r7}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3360      	adds	r3, #96	; 0x60
 80018aa:	461a      	mov	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <LL_ADC_SetOffset+0x40>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	4313      	orrs	r3, r2
 80018c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018ca:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc90      	pop	{r4, r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	03fff000 	.word	0x03fff000

080018dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018dc:	b490      	push	{r4, r7}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3360      	adds	r3, #96	; 0x60
 80018ea:	461a      	mov	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc90      	pop	{r4, r7}
 8001902:	4770      	bx	lr

08001904 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001904:	b490      	push	{r4, r7}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3360      	adds	r3, #96	; 0x60
 8001914:	461a      	mov	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4313      	orrs	r3, r2
 8001928:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bc90      	pop	{r4, r7}
 8001932:	4770      	bx	lr

08001934 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001934:	b490      	push	{r4, r7}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3360      	adds	r3, #96	; 0x60
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4313      	orrs	r3, r2
 8001958:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bc90      	pop	{r4, r7}
 8001962:	4770      	bx	lr

08001964 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001964:	b490      	push	{r4, r7}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3360      	adds	r3, #96	; 0x60
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4313      	orrs	r3, r2
 8001988:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bc90      	pop	{r4, r7}
 8001992:	4770      	bx	lr

08001994 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	615a      	str	r2, [r3, #20]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019e0:	b490      	push	{r4, r7}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3330      	adds	r3, #48	; 0x30
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	4413      	add	r3, r2
 80019fe:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	211f      	movs	r1, #31
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	401a      	ands	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0e9b      	lsrs	r3, r3, #26
 8001a16:	f003 011f 	and.w	r1, r3, #31
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc90      	pop	{r4, r7}
 8001a30:	4770      	bx	lr

08001a32 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a32:	b490      	push	{r4, r7}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3314      	adds	r3, #20
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	0e5b      	lsrs	r3, r3, #25
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001a52:	6822      	ldr	r2, [r4, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	0d1b      	lsrs	r3, r3, #20
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	2107      	movs	r1, #7
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	401a      	ands	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	0d1b      	lsrs	r3, r3, #20
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc90      	pop	{r4, r7}
 8001a80:	4770      	bx	lr
	...

08001a84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0318 	and.w	r3, r3, #24
 8001aa6:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aa8:	40d9      	lsrs	r1, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	400b      	ands	r3, r1
 8001aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	0007ffff 	.word	0x0007ffff

08001acc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6093      	str	r3, [r2, #8]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b20:	d101      	bne.n	8001b26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b70:	d101      	bne.n	8001b76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bc0:	f043 0202 	orr.w	r2, r3, #2
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <LL_ADC_IsEnabled+0x18>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <LL_ADC_IsEnabled+0x1a>
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d101      	bne.n	8001c12 <LL_ADC_IsDisableOngoing+0x18>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_ADC_IsDisableOngoing+0x1a>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d101      	bne.n	8001c60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d101      	bne.n	8001c86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e19f      	b.n	8001fee <HAL_ADC_Init+0x35a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff f951 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff19 	bl	8001b0c <LL_ADC_IsDeepPowerDownEnabled>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff feff 	bl	8001ae8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff34 	bl	8001b5c <LL_ADC_IsInternalRegulatorEnabled>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d113      	bne.n	8001d22 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff18 	bl	8001b34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d04:	4b99      	ldr	r3, [pc, #612]	; (8001f6c <HAL_ADC_Init+0x2d8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	4a99      	ldr	r2, [pc, #612]	; (8001f70 <HAL_ADC_Init+0x2dc>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff18 	bl	8001b5c <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	f043 0210 	orr.w	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff78 	bl	8001c48 <LL_ADC_REG_IsConversionOngoing>
 8001d58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 813a 	bne.w	8001fdc <HAL_ADC_Init+0x348>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 8136 	bne.w	8001fdc <HAL_ADC_Init+0x348>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d78:	f043 0202 	orr.w	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff25 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d137      	bne.n	8001e00 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_Init+0x110>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a75      	ldr	r2, [pc, #468]	; (8001f74 <HAL_ADC_Init+0x2e0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10f      	bne.n	8001dc4 <HAL_ADC_Init+0x130>
 8001da4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001da8:	f7ff ff14 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001dac:	4604      	mov	r4, r0
 8001dae:	4871      	ldr	r0, [pc, #452]	; (8001f74 <HAL_ADC_Init+0x2e0>)
 8001db0:	f7ff ff10 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4323      	orrs	r3, r4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e008      	b.n	8001dd6 <HAL_ADC_Init+0x142>
 8001dc4:	486c      	ldr	r0, [pc, #432]	; (8001f78 <HAL_ADC_Init+0x2e4>)
 8001dc6:	f7ff ff05 	bl	8001bd4 <LL_ADC_IsEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de2:	d004      	beq.n	8001dee <HAL_ADC_Init+0x15a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a62      	ldr	r2, [pc, #392]	; (8001f74 <HAL_ADC_Init+0x2e0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_Init+0x15e>
 8001dee:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_ADC_Init+0x2e8>)
 8001df0:	e000      	b.n	8001df4 <HAL_ADC_Init+0x160>
 8001df2:	4a63      	ldr	r2, [pc, #396]	; (8001f80 <HAL_ADC_Init+0x2ec>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f7ff fd18 	bl	8001830 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7f5b      	ldrb	r3, [r3, #29]
 8001e04:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e0a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e10:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e16:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d106      	bne.n	8001e3c <HAL_ADC_Init+0x1a8>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	3b01      	subs	r3, #1
 8001e34:	045b      	lsls	r3, r3, #17
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <HAL_ADC_Init+0x1c4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_ADC_Init+0x2f0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fede 	bl	8001c48 <LL_ADC_REG_IsConversionOngoing>
 8001e8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff feeb 	bl	8001c6e <LL_ADC_INJ_IsConversionOngoing>
 8001e98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d17b      	bne.n	8001f98 <HAL_ADC_Init+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d178      	bne.n	8001f98 <HAL_ADC_Init+0x304>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eaa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eb2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ec2:	f023 0302 	bic.w	r3, r3, #2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	69b9      	ldr	r1, [r7, #24]
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d017      	beq.n	8001f08 <HAL_ADC_Init+0x274>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ee6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ef0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6911      	ldr	r1, [r2, #16]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f06:	e013      	b.n	8001f30 <HAL_ADC_Init+0x29c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f2c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d126      	bne.n	8001f88 <HAL_ADC_Init+0x2f4>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f50:	4311      	orrs	r1, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	611a      	str	r2, [r3, #16]
 8001f6a:	e015      	b.n	8001f98 <HAL_ADC_Init+0x304>
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	053e2d63 	.word	0x053e2d63
 8001f74:	50000100 	.word	0x50000100
 8001f78:	50000400 	.word	0x50000400
 8001f7c:	50000300 	.word	0x50000300
 8001f80:	50000700 	.word	0x50000700
 8001f84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10c      	bne.n	8001fba <HAL_ADC_Init+0x326>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f023 010f 	bic.w	r1, r3, #15
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb8:	e007      	b.n	8001fca <HAL_ADC_Init+0x336>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 020f 	bic.w	r2, r2, #15
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fda:	e007      	b.n	8001fec <HAL_ADC_Init+0x358>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	f043 0210 	orr.w	r2, r3, #16
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}
 8001ff6:	bf00      	nop

08001ff8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800200c:	d004      	beq.n	8002018 <HAL_ADC_Start_DMA+0x20>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a54      	ldr	r2, [pc, #336]	; (8002164 <HAL_ADC_Start_DMA+0x16c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_ADC_Start_DMA+0x24>
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_ADC_Start_DMA+0x170>)
 800201a:	e000      	b.n	800201e <HAL_ADC_Start_DMA+0x26>
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_ADC_Start_DMA+0x174>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fd54 	bl	8001acc <LL_ADC_GetMultimode>
 8002024:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fe0c 	bl	8001c48 <LL_ADC_REG_IsConversionOngoing>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 808f 	bne.w	8002156 <HAL_ADC_Start_DMA+0x15e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Start_DMA+0x4e>
 8002042:	2302      	movs	r3, #2
 8002044:	e08a      	b.n	800215c <HAL_ADC_Start_DMA+0x164>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b05      	cmp	r3, #5
 8002058:	d002      	beq.n	8002060 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b09      	cmp	r3, #9
 800205e:	d173      	bne.n	8002148 <HAL_ADC_Start_DMA+0x150>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fc47 	bl	80028f4 <ADC_Enable>
 8002066:	4603      	mov	r3, r0
 8002068:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800206a:	7dfb      	ldrb	r3, [r7, #23]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d166      	bne.n	800213e <HAL_ADC_Start_DMA+0x146>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a36      	ldr	r2, [pc, #216]	; (8002164 <HAL_ADC_Start_DMA+0x16c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d002      	beq.n	8002094 <HAL_ADC_Start_DMA+0x9c>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e001      	b.n	8002098 <HAL_ADC_Start_DMA+0xa0>
 8002094:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4293      	cmp	r3, r2
 800209e:	d002      	beq.n	80020a6 <HAL_ADC_Start_DMA+0xae>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <HAL_ADC_Start_DMA+0xba>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <HAL_ADC_Start_DMA+0xd4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	f023 0206 	bic.w	r2, r3, #6
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	661a      	str	r2, [r3, #96]	; 0x60
 80020ca:	e002      	b.n	80020d2 <HAL_ADC_Start_DMA+0xda>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_ADC_Start_DMA+0x178>)
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_ADC_Start_DMA+0x17c>)
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	4a24      	ldr	r2, [pc, #144]	; (8002178 <HAL_ADC_Start_DMA+0x180>)
 80020e8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	221c      	movs	r2, #28
 80020f0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0210 	orr.w	r2, r2, #16
 8002108:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3340      	adds	r3, #64	; 0x40
 8002124:	4619      	mov	r1, r3
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f001 fa71 	bl	8003610 <HAL_DMA_Start_IT>
 800212e:	4603      	mov	r3, r0
 8002130:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd72 	bl	8001c20 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800213c:	e00d      	b.n	800215a <HAL_ADC_Start_DMA+0x162>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002146:	e008      	b.n	800215a <HAL_ADC_Start_DMA+0x162>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002154:	e001      	b.n	800215a <HAL_ADC_Start_DMA+0x162>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800215a:	7dfb      	ldrb	r3, [r7, #23]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	50000100 	.word	0x50000100
 8002168:	50000300 	.word	0x50000300
 800216c:	50000700 	.word	0x50000700
 8002170:	08002a59 	.word	0x08002a59
 8002174:	08002b31 	.word	0x08002b31
 8002178:	08002b4d 	.word	0x08002b4d

0800217c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0a6      	sub	sp, #152	; 0x98
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x22>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e37d      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x71e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fd2e 	bl	8001c48 <LL_ADC_REG_IsConversionOngoing>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 8362 	bne.w	80028b8 <HAL_ADC_ConfigChannel+0x700>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	f7ff fbed 	bl	80019e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fd1c 	bl	8001c48 <LL_ADC_REG_IsConversionOngoing>
 8002210:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fd28 	bl	8001c6e <LL_ADC_INJ_IsConversionOngoing>
 800221e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 817b 	bne.w	8002522 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800222c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 8176 	bne.w	8002522 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800223e:	d10f      	bne.n	8002260 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	4619      	mov	r1, r3
 800224c:	f7ff fbf1 	bl	8001a32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fb9b 	bl	8001994 <LL_ADC_SetSamplingTimeCommonConfig>
 800225e:	e00e      	b.n	800227e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	461a      	mov	r2, r3
 800226e:	f7ff fbe0 	bl	8001a32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fb8b 	bl	8001994 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	08db      	lsrs	r3, r3, #3
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d022      	beq.n	80022e6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6919      	ldr	r1, [r3, #16]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022b0:	f7ff faf2 	bl	8001898 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6919      	ldr	r1, [r3, #16]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	461a      	mov	r2, r3
 80022c2:	f7ff fb37 	bl	8001934 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	7f1b      	ldrb	r3, [r3, #28]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x124>
 80022d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022da:	e000      	b.n	80022de <HAL_ADC_ConfigChannel+0x126>
 80022dc:	2300      	movs	r3, #0
 80022de:	461a      	mov	r2, r3
 80022e0:	f7ff fb40 	bl	8001964 <LL_ADC_SetOffsetSaturation>
 80022e4:	e11d      	b.n	8002522 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff faf5 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x15a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff faea 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	0e9b      	lsrs	r3, r3, #26
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	e012      	b.n	8002338 <HAL_ADC_ConfigChannel+0x180>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fadf 	bl	80018dc <LL_ADC_GetOffsetChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800232e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x198>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	e00a      	b.n	8002366 <HAL_ADC_ConfigChannel+0x1ae>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800235e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	429a      	cmp	r2, r3
 8002368:	d106      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fac6 	bl	8001904 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff faac 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002384:	4603      	mov	r3, r0
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x1ec>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2101      	movs	r1, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff faa1 	bl	80018dc <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	f003 021f 	and.w	r2, r3, #31
 80023a2:	e010      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x20e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2101      	movs	r1, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fa96 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <HAL_ADC_ConfigChannel+0x226>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0e9b      	lsrs	r3, r3, #26
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	e00a      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x23c>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80023ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2101      	movs	r1, #1
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fa7f 	bl	8001904 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2102      	movs	r1, #2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fa65 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x27a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fa5a 	bl	80018dc <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	e010      	b.n	8002454 <HAL_ADC_ConfigChannel+0x29c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2102      	movs	r1, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fa4f 	bl	80018dc <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800244a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_ADC_ConfigChannel+0x2b4>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	e00a      	b.n	8002482 <HAL_ADC_ConfigChannel+0x2ca>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800247a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	429a      	cmp	r2, r3
 8002484:	d106      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	2102      	movs	r1, #2
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fa38 	bl	8001904 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2103      	movs	r1, #3
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fa1e 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x308>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2103      	movs	r1, #3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fa13 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	f003 021f 	and.w	r2, r3, #31
 80024be:	e010      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x32a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2103      	movs	r1, #3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fa08 	bl	80018dc <LL_ADC_GetOffsetChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x342>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0e9b      	lsrs	r3, r3, #26
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	e00a      	b.n	8002510 <HAL_ADC_ConfigChannel+0x358>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	429a      	cmp	r2, r3
 8002512:	d106      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	2103      	movs	r1, #3
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff f9f1 	bl	8001904 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fb54 	bl	8001bd4 <LL_ADC_IsEnabled>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 810c 	bne.w	800274c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	461a      	mov	r2, r3
 8002542:	f7ff fa9f 	bl	8001a84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	4aac      	ldr	r2, [pc, #688]	; (80027fc <HAL_ADC_ConfigChannel+0x644>)
 800254c:	4293      	cmp	r3, r2
 800254e:	f040 80fd 	bne.w	800274c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10b      	bne.n	800257a <HAL_ADC_ConfigChannel+0x3c2>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0e9b      	lsrs	r3, r3, #26
 8002568:	3301      	adds	r3, #1
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2b09      	cmp	r3, #9
 8002570:	bf94      	ite	ls
 8002572:	2301      	movls	r3, #1
 8002574:	2300      	movhi	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e012      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x3e8>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	2b09      	cmp	r3, #9
 8002598:	bf94      	ite	ls
 800259a:	2301      	movls	r3, #1
 800259c:	2300      	movhi	r3, #0
 800259e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d064      	beq.n	800266e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x408>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	3301      	adds	r3, #1
 80025b8:	069b      	lsls	r3, r3, #26
 80025ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025be:	e00e      	b.n	80025de <HAL_ADC_ConfigChannel+0x426>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	069b      	lsls	r3, r3, #26
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x446>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	3301      	adds	r3, #1
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	e010      	b.n	8002620 <HAL_ADC_ConfigChannel+0x468>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	ea42 0103 	orr.w	r1, r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x48e>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	3301      	adds	r3, #1
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	051b      	lsls	r3, r3, #20
 8002644:	e011      	b.n	800266a <HAL_ADC_ConfigChannel+0x4b2>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	f003 021f 	and.w	r2, r3, #31
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266a:	430b      	orrs	r3, r1
 800266c:	e069      	b.n	8002742 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002676:	2b00      	cmp	r3, #0
 8002678:	d107      	bne.n	800268a <HAL_ADC_ConfigChannel+0x4d2>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	0e9b      	lsrs	r3, r3, #26
 8002680:	3301      	adds	r3, #1
 8002682:	069b      	lsls	r3, r3, #26
 8002684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002688:	e00e      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x4f0>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	61fb      	str	r3, [r7, #28]
  return result;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	069b      	lsls	r3, r3, #26
 80026a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x510>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	3301      	adds	r3, #1
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	e010      	b.n	80026ea <HAL_ADC_ConfigChannel+0x532>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	617b      	str	r3, [r7, #20]
  return result;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	ea42 0103 	orr.w	r1, r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10d      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x55e>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	0e9b      	lsrs	r3, r3, #26
 8002700:	3301      	adds	r3, #1
 8002702:	f003 021f 	and.w	r2, r3, #31
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	3b1e      	subs	r3, #30
 800270e:	051b      	lsls	r3, r3, #20
 8002710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002714:	e014      	b.n	8002740 <HAL_ADC_ConfigChannel+0x588>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	60fb      	str	r3, [r7, #12]
  return result;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f003 021f 	and.w	r2, r3, #31
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	3b1e      	subs	r3, #30
 800273a:	051b      	lsls	r3, r3, #20
 800273c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002740:	430b      	orrs	r3, r1
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	6892      	ldr	r2, [r2, #8]
 8002746:	4619      	mov	r1, r3
 8002748:	f7ff f973 	bl	8001a32 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_ADC_ConfigChannel+0x648>)
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80b8 	beq.w	80028ca <HAL_ADC_ConfigChannel+0x712>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002762:	d004      	beq.n	800276e <HAL_ADC_ConfigChannel+0x5b6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a26      	ldr	r2, [pc, #152]	; (8002804 <HAL_ADC_ConfigChannel+0x64c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x5ba>
 800276e:	4b26      	ldr	r3, [pc, #152]	; (8002808 <HAL_ADC_ConfigChannel+0x650>)
 8002770:	e000      	b.n	8002774 <HAL_ADC_ConfigChannel+0x5bc>
 8002772:	4b26      	ldr	r3, [pc, #152]	; (800280c <HAL_ADC_ConfigChannel+0x654>)
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff f881 	bl	800187c <LL_ADC_GetCommonPathInternalCh>
 800277a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a23      	ldr	r2, [pc, #140]	; (8002810 <HAL_ADC_ConfigChannel+0x658>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_ADC_ConfigChannel+0x5da>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a21      	ldr	r2, [pc, #132]	; (8002814 <HAL_ADC_ConfigChannel+0x65c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d146      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x668>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d140      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x668>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a6:	f040 8090 	bne.w	80028ca <HAL_ADC_ConfigChannel+0x712>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b2:	d004      	beq.n	80027be <HAL_ADC_ConfigChannel+0x606>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_ADC_ConfigChannel+0x64c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x60a>
 80027be:	4a12      	ldr	r2, [pc, #72]	; (8002808 <HAL_ADC_ConfigChannel+0x650>)
 80027c0:	e000      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x60c>
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <HAL_ADC_ConfigChannel+0x654>)
 80027c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f7ff f841 	bl	8001856 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_ADC_ConfigChannel+0x660>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_ADC_ConfigChannel+0x664>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	099a      	lsrs	r2, r3, #6
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027ec:	e002      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x63c>
          {
            wait_loop_index--;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f9      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x636>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027fa:	e066      	b.n	80028ca <HAL_ADC_ConfigChannel+0x712>
 80027fc:	407f0000 	.word	0x407f0000
 8002800:	80080000 	.word	0x80080000
 8002804:	50000100 	.word	0x50000100
 8002808:	50000300 	.word	0x50000300
 800280c:	50000700 	.word	0x50000700
 8002810:	c3210000 	.word	0xc3210000
 8002814:	90c00010 	.word	0x90c00010
 8002818:	20000000 	.word	0x20000000
 800281c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2e      	ldr	r2, [pc, #184]	; (80028e0 <HAL_ADC_ConfigChannel+0x728>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d120      	bne.n	800286c <HAL_ADC_ConfigChannel+0x6b4>
 800282a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d11a      	bne.n	800286c <HAL_ADC_ConfigChannel+0x6b4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_ADC_ConfigChannel+0x72c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d044      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x712>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002848:	d004      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x69c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <HAL_ADC_ConfigChannel+0x72c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x6a0>
 8002854:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <HAL_ADC_ConfigChannel+0x730>)
 8002856:	e000      	b.n	800285a <HAL_ADC_ConfigChannel+0x6a2>
 8002858:	4a24      	ldr	r2, [pc, #144]	; (80028ec <HAL_ADC_ConfigChannel+0x734>)
 800285a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f7fe fff6 	bl	8001856 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800286a:	e02e      	b.n	80028ca <HAL_ADC_ConfigChannel+0x712>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <HAL_ADC_ConfigChannel+0x738>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d129      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x712>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d123      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_ADC_ConfigChannel+0x72c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d01e      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x712>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002894:	d004      	beq.n	80028a0 <HAL_ADC_ConfigChannel+0x6e8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <HAL_ADC_ConfigChannel+0x72c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x6ec>
 80028a0:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_ADC_ConfigChannel+0x730>)
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x6ee>
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_ADC_ConfigChannel+0x734>)
 80028a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f7fe ffd0 	bl	8001856 <LL_ADC_SetCommonPathInternalCh>
 80028b6:	e008      	b.n	80028ca <HAL_ADC_ConfigChannel+0x712>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3798      	adds	r7, #152	; 0x98
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	c7520000 	.word	0xc7520000
 80028e4:	50000100 	.word	0x50000100
 80028e8:	50000300 	.word	0x50000300
 80028ec:	50000700 	.word	0x50000700
 80028f0:	cb840000 	.word	0xcb840000

080028f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff f967 	bl	8001bd4 <LL_ADC_IsEnabled>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d146      	bne.n	800299a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <ADC_Enable+0xb0>)
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e032      	b.n	800299c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f922 	bl	8001b84 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002940:	f7fe fefc 	bl	800173c <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002946:	e021      	b.n	800298c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f941 	bl	8001bd4 <LL_ADC_IsEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f911 	bl	8001b84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002962:	f7fe feeb 	bl	800173c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d90d      	bls.n	800298c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	f043 0210 	orr.w	r2, r3, #16
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002980:	f043 0201 	orr.w	r2, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e007      	b.n	800299c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d1d6      	bne.n	8002948 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	8000003f 	.word	0x8000003f

080029a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f920 	bl	8001bfa <LL_ADC_IsDisableOngoing>
 80029ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f907 	bl	8001bd4 <LL_ADC_IsEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d040      	beq.n	8002a4e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d13d      	bne.n	8002a4e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 030d 	and.w	r3, r3, #13
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10c      	bne.n	80029fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f8e1 	bl	8001bac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2203      	movs	r2, #3
 80029f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029f2:	f7fe fea3 	bl	800173c <HAL_GetTick>
 80029f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029f8:	e022      	b.n	8002a40 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	f043 0210 	orr.w	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01c      	b.n	8002a50 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a16:	f7fe fe91 	bl	800173c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d90d      	bls.n	8002a40 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1e3      	bne.n	8002a16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d14b      	bne.n	8002b0a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d021      	beq.n	8002ad0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe ff92 	bl	80019ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d032      	beq.n	8002b02 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d12b      	bne.n	8002b02 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11f      	bne.n	8002b02 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ace:	e018      	b.n	8002b02 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d111      	bne.n	8002b02 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff fb3a 	bl	800217c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b08:	e00e      	b.n	8002b28 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff fb44 	bl	80021a4 <HAL_ADC_ErrorCallback>
}
 8002b1c:	e004      	b.n	8002b28 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4798      	blx	r3
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f7ff fb26 	bl	8002190 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff fb16 	bl	80021a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <LL_ADC_GetCalibrationFactor>:
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4013      	ands	r3, r2
 8002b94:	f003 127f 	and.w	r2, r3, #8323199	; 0x7f007f
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	0b1b      	lsrs	r3, r3, #12
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_IsEnabled>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <LL_ADC_IsEnabled+0x18>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_ADC_IsEnabled+0x1a>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_ADC_StartCalibration>:
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_IsCalibrationOnGoing>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c1c:	d101      	bne.n	8002c22 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d101      	bne.n	8002c48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_ADCEx_Calibration_Start+0x1c>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e04d      	b.n	8002d10 <HAL_ADCEx_Calibration_Start+0xb8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fe93 	bl	80029a8 <ADC_Disable>
 8002c82:	4603      	mov	r3, r0
 8002c84:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d136      	bne.n	8002cfa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c94:	f023 0302 	bic.w	r3, r3, #2
 8002c98:	f043 0202 	orr.w	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ff95 	bl	8002bd6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002cac:	e014      	b.n	8002cd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d90d      	bls.n	8002cd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	f023 0312 	bic.w	r3, r3, #18
 8002cc4:	f043 0210 	orr.w	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e01b      	b.n	8002d10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff93 	bl	8002c08 <LL_ADC_IsCalibrationOnGoing>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e2      	bne.n	8002cae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	f023 0303 	bic.w	r3, r3, #3
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cf8:	e005      	b.n	8002d06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	f043 0210 	orr.w	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	0004de01 	.word	0x0004de01

08002d1c <HAL_ADCEx_Calibration_GetValue>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval Calibration value.
  */
uint32_t HAL_ADCEx_Calibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Return the selected ADC calibration value */
  return LL_ADC_GetCalibrationFactor(hadc->Instance, SingleDiff);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6839      	ldr	r1, [r7, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff27 	bl	8002b80 <LL_ADC_GetCalibrationFactor>
 8002d32:	4603      	mov	r3, r0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b0a1      	sub	sp, #132	; 0x84
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0c7      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002d6c:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	e001      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0aa      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ff4a 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 8002d9c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff44 	bl	8002c30 <LL_ADC_REG_IsConversionOngoing>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 808c 	bne.w	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x18c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f040 8088 	bne.w	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x18c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc0:	d004      	beq.n	8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a4b      	ldr	r2, [pc, #300]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002dcc:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002dce:	e000      	b.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8002dd0:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002dd2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d041      	beq.n	8002e60 <HAL_ADCEx_MultiModeConfigChannel+0x124>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dee:	035b      	lsls	r3, r3, #13
 8002df0:	430b      	orrs	r3, r1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e00:	d004      	beq.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d10f      	bne.n	8002e2c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 8002e0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e10:	f7ff fece 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002e14:	4604      	mov	r4, r0
 8002e16:	4837      	ldr	r0, [pc, #220]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e18:	f7ff feca 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4323      	orrs	r3, r4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e008      	b.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0x102>
 8002e2c:	4834      	ldr	r0, [pc, #208]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8002e2e:	f7ff febf 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d04c      	beq.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e4a:	f023 030f 	bic.w	r3, r3, #15
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	6811      	ldr	r1, [r2, #0]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	6892      	ldr	r2, [r2, #8]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5e:	e03d      	b.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e74:	d004      	beq.n	8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x144>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d10f      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8002e80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e84:	f7ff fe94 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	481a      	ldr	r0, [pc, #104]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e8c:	f7ff fe90 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4323      	orrs	r3, r4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e008      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002ea0:	4817      	ldr	r0, [pc, #92]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8002ea2:	f7ff fe85 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d012      	beq.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ebe:	f023 030f 	bic.w	r3, r3, #15
 8002ec2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ec4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec6:	e009      	b.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002eda:	e000      	b.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002edc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ee6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3784      	adds	r7, #132	; 0x84
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd90      	pop	{r4, r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	50000100 	.word	0x50000100
 8002ef8:	50000300 	.word	0x50000300
 8002efc:	50000700 	.word	0x50000700
 8002f00:	50000400 	.word	0x50000400

08002f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <__NVIC_GetPriorityGrouping+0x18>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0307 	and.w	r3, r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db0b      	blt.n	8002f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	4907      	ldr	r1, [pc, #28]	; (8002fa0 <__NVIC_EnableIRQ+0x38>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100

08002fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db0a      	blt.n	8002fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <__NVIC_SetPriority+0x4c>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4908      	ldr	r1, [pc, #32]	; (8002ff4 <__NVIC_SetPriority+0x50>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3b04      	subs	r3, #4
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	761a      	strb	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f1c3 0307 	rsb	r3, r3, #7
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf28      	it	cs
 8003016:	2304      	movcs	r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3304      	adds	r3, #4
 800301e:	2b06      	cmp	r3, #6
 8003020:	d902      	bls.n	8003028 <NVIC_EncodePriority+0x30>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3b03      	subs	r3, #3
 8003026:	e000      	b.n	800302a <NVIC_EncodePriority+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	401a      	ands	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43d9      	mvns	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	4313      	orrs	r3, r2
         );
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003070:	d301      	bcc.n	8003076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003072:	2301      	movs	r3, #1
 8003074:	e00f      	b.n	8003096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <SysTick_Config+0x40>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307e:	210f      	movs	r1, #15
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f7ff ff8e 	bl	8002fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <SysTick_Config+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <SysTick_Config+0x40>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000e010 	.word	0xe000e010

080030a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff29 	bl	8002f04 <__NVIC_SetPriorityGrouping>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030c8:	f7ff ff40 	bl	8002f4c <__NVIC_GetPriorityGrouping>
 80030cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	6978      	ldr	r0, [r7, #20]
 80030d4:	f7ff ff90 	bl	8002ff8 <NVIC_EncodePriority>
 80030d8:	4602      	mov	r2, r0
 80030da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff5f 	bl	8002fa4 <__NVIC_SetPriority>
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff33 	bl	8002f68 <__NVIC_EnableIRQ>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff ffa4 	bl	8003060 <SysTick_Config>
 8003118:	4603      	mov	r3, r0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e014      	b.n	800315e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	791b      	ldrb	r3, [r3, #4]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fe f891 	bl	800126c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	795b      	ldrb	r3, [r3, #5]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_DAC_ConfigChannel+0x1c>
 8003180:	2302      	movs	r3, #2
 8003182:	e194      	b.n	80034ae <HAL_DAC_ConfigChannel+0x346>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2202      	movs	r2, #2
 800318e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b04      	cmp	r3, #4
 8003196:	d174      	bne.n	8003282 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d137      	bne.n	800320e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800319e:	f7fe facd 	bl	800173c <HAL_GetTick>
 80031a2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031a4:	e011      	b.n	80031ca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031a6:	f7fe fac9 	bl	800173c <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d90a      	bls.n	80031ca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f043 0208 	orr.w	r2, r3, #8
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2203      	movs	r2, #3
 80031c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e171      	b.n	80034ae <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e6      	bne.n	80031a6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80031d8:	2001      	movs	r0, #1
 80031da:	f7fe fabb 	bl	8001754 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
 80031e8:	e01e      	b.n	8003228 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031ea:	f7fe faa7 	bl	800173c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d90a      	bls.n	800320e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f043 0208 	orr.w	r2, r3, #8
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2203      	movs	r2, #3
 8003208:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e14f      	b.n	80034ae <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	2b00      	cmp	r3, #0
 8003216:	dbe8      	blt.n	80031ea <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003218:	2001      	movs	r0, #1
 800321a:	f7fe fa9b 	bl	8001754 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003226:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	ea02 0103 	and.w	r1, r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	409a      	lsls	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	21ff      	movs	r1, #255	; 0xff
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	ea02 0103 	and.w	r1, r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	409a      	lsls	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d11d      	bne.n	80032c6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	221f      	movs	r2, #31
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	4013      	ands	r3, r2
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	4313      	orrs	r3, r2
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2207      	movs	r2, #7
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	4013      	ands	r3, r2
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	e011      	b.n	8003318 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003300:	2301      	movs	r3, #1
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	e008      	b.n	8003318 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800330e:	2301      	movs	r3, #1
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	e001      	b.n	8003318 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003314:	2300      	movs	r3, #0
 8003316:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	6a3a      	ldr	r2, [r7, #32]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	4013      	ands	r3, r2
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	791b      	ldrb	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_DAC_ConfigChannel+0x1e4>
 8003346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800334a:	e000      	b.n	800334e <HAL_DAC_ConfigChannel+0x1e6>
 800334c:	2300      	movs	r3, #0
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	4013      	ands	r3, r2
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	795b      	ldrb	r3, [r3, #5]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d102      	bne.n	8003378 <HAL_DAC_ConfigChannel+0x210>
 8003372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003376:	e000      	b.n	800337a <HAL_DAC_ConfigChannel+0x212>
 8003378:	2300      	movs	r3, #0
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d114      	bne.n	80033ba <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003390:	f002 fb68 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8003394:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	4a47      	ldr	r2, [pc, #284]	; (80034b8 <HAL_DAC_ConfigChannel+0x350>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d904      	bls.n	80033a8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	e00d      	b.n	80033c4 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	4a44      	ldr	r2, [pc, #272]	; (80034bc <HAL_DAC_ConfigChannel+0x354>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d909      	bls.n	80033c4 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	e004      	b.n	80033c4 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	4313      	orrs	r3, r2
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	4313      	orrs	r3, r2
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	400a      	ands	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	4013      	ands	r3, r2
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342e:	4313      	orrs	r3, r2
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003438:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	22c0      	movs	r2, #192	; 0xc0
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43da      	mvns	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	400a      	ands	r2, r1
 8003454:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003484:	fa01 f303 	lsl.w	r3, r1, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	ea02 0103 	and.w	r1, r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	409a      	lsls	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3728      	adds	r7, #40	; 0x28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	09896800 	.word	0x09896800
 80034bc:	04c4b400 	.word	0x04c4b400

080034c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e08d      	b.n	80035ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_DMA_Init+0x138>)
 80034da:	429a      	cmp	r2, r3
 80034dc:	d80f      	bhi.n	80034fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b45      	ldr	r3, [pc, #276]	; (80035fc <HAL_DMA_Init+0x13c>)
 80034e6:	4413      	add	r3, r2
 80034e8:	4a45      	ldr	r2, [pc, #276]	; (8003600 <HAL_DMA_Init+0x140>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	009a      	lsls	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a42      	ldr	r2, [pc, #264]	; (8003604 <HAL_DMA_Init+0x144>)
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
 80034fc:	e00e      	b.n	800351c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	4b40      	ldr	r3, [pc, #256]	; (8003608 <HAL_DMA_Init+0x148>)
 8003506:	4413      	add	r3, r2
 8003508:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <HAL_DMA_Init+0x140>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	009a      	lsls	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a3c      	ldr	r2, [pc, #240]	; (800360c <HAL_DMA_Init+0x14c>)
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f9b6 	bl	80038e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800357c:	d102      	bne.n	8003584 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003598:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_DMA_Init+0x104>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d80c      	bhi.n	80035c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9d6 	bl	800395c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	e008      	b.n	80035d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40020407 	.word	0x40020407
 80035fc:	bffdfff8 	.word	0xbffdfff8
 8003600:	cccccccd 	.word	0xcccccccd
 8003604:	40020000 	.word	0x40020000
 8003608:	bffdfbf8 	.word	0xbffdfbf8
 800360c:	40020400 	.word	0x40020400

08003610 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_DMA_Start_IT+0x20>
 800362c:	2302      	movs	r3, #2
 800362e:	e066      	b.n	80036fe <HAL_DMA_Start_IT+0xee>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d155      	bne.n	80036f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f8fb 	bl	8003864 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 020e 	orr.w	r2, r2, #14
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	e00f      	b.n	80036a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 020a 	orr.w	r2, r2, #10
 80036a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e005      	b.n	80036fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
 80036fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2204      	movs	r2, #4
 8003728:	409a      	lsls	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d026      	beq.n	8003780 <HAL_DMA_IRQHandler+0x7a>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d021      	beq.n	8003780 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d107      	bne.n	800375a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0204 	bic.w	r2, r2, #4
 8003758:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f003 021f 	and.w	r2, r3, #31
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2104      	movs	r1, #4
 8003768:	fa01 f202 	lsl.w	r2, r1, r2
 800376c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d071      	beq.n	800385a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800377e:	e06c      	b.n	800385a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	2202      	movs	r2, #2
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02e      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d029      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 020a 	bic.w	r2, r2, #10
 80037ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	2102      	movs	r1, #2
 80037d2:	fa01 f202 	lsl.w	r2, r1, r2
 80037d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d038      	beq.n	800385a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037f0:	e033      	b.n	800385a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f003 031f 	and.w	r3, r3, #31
 80037fa:	2208      	movs	r2, #8
 80037fc:	409a      	lsls	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02a      	beq.n	800385c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d025      	beq.n	800385c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 020e 	bic.w	r2, r2, #14
 800381e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f003 021f 	and.w	r2, r3, #31
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800385a:	bf00      	nop
 800385c:	bf00      	nop
}
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800387a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800388c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f003 021f 	and.w	r2, r3, #31
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2101      	movs	r1, #1
 800389c:	fa01 f202 	lsl.w	r2, r1, r2
 80038a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d108      	bne.n	80038c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038c2:	e007      	b.n	80038d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d802      	bhi.n	80038fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e001      	b.n	80038fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3b08      	subs	r3, #8
 800390a:	4a12      	ldr	r2, [pc, #72]	; (8003954 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800392a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2201      	movs	r2, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	651a      	str	r2, [r3, #80]	; 0x50
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40020407 	.word	0x40020407
 800394c:	40020800 	.word	0x40020800
 8003950:	40020820 	.word	0x40020820
 8003954:	cccccccd 	.word	0xcccccccd
 8003958:	40020880 	.word	0x40020880

0800395c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800397e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3b01      	subs	r3, #1
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2201      	movs	r2, #1
 800398a:	409a      	lsls	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	1000823f 	.word	0x1000823f
 80039a0:	40020940 	.word	0x40020940

080039a4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d12b      	bne.n	8003a12 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_DMAEx_ConfigMuxSync+0x24>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e025      	b.n	8003a14 <HAL_DMAEx_ConfigMuxSync+0x70>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b2d9      	uxtb	r1, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	061a      	lsls	r2, r3, #24
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	04db      	lsls	r3, r3, #19
 80039e6:	431a      	orrs	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	7a1b      	ldrb	r3, [r3, #8]
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	431a      	orrs	r2, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	7a5b      	ldrb	r3, [r3, #9]
 80039fa:	025b      	lsls	r3, r3, #9
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
  }
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01a      	beq.n	8003a6e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d022      	beq.n	8003abc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01a      	beq.n	8003abc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
      }
    }
  }
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e147      	b.n	8003d66 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fbfc 	bl	80012e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0210 	bic.w	r2, r2, #16
 8003afe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b00:	f7fd fe1c 	bl	800173c <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b06:	e012      	b.n	8003b2e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b08:	f7fd fe18 	bl	800173c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b0a      	cmp	r3, #10
 8003b14:	d90b      	bls.n	8003b2e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2203      	movs	r2, #3
 8003b26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e11b      	b.n	8003d66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d0e5      	beq.n	8003b08 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b4c:	f7fd fdf6 	bl	800173c <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b52:	e012      	b.n	8003b7a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b54:	f7fd fdf2 	bl	800173c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b0a      	cmp	r3, #10
 8003b60:	d90b      	bls.n	8003b7a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2203      	movs	r2, #3
 8003b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0f5      	b.n	8003d66 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0e5      	beq.n	8003b54 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0202 	orr.w	r2, r2, #2
 8003b96:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a74      	ldr	r2, [pc, #464]	; (8003d70 <HAL_FDCAN_Init+0x2ac>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d103      	bne.n	8003baa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003ba2:	4a74      	ldr	r2, [pc, #464]	; (8003d74 <HAL_FDCAN_Init+0x2b0>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7c1b      	ldrb	r3, [r3, #16]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d108      	bne.n	8003bc4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc0:	619a      	str	r2, [r3, #24]
 8003bc2:	e007      	b.n	8003bd4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	7c5b      	ldrb	r3, [r3, #17]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d108      	bne.n	8003bee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bea:	619a      	str	r2, [r3, #24]
 8003bec:	e007      	b.n	8003bfe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bfc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7c9b      	ldrb	r3, [r3, #18]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d108      	bne.n	8003c18 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699a      	ldr	r2, [r3, #24]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c14:	619a      	str	r2, [r3, #24]
 8003c16:	e007      	b.n	8003c28 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c26:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003c4c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0210 	bic.w	r2, r2, #16
 8003c5c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d108      	bne.n	8003c78 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0204 	orr.w	r2, r2, #4
 8003c74:	619a      	str	r2, [r3, #24]
 8003c76:	e02c      	b.n	8003cd2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d028      	beq.n	8003cd2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d01c      	beq.n	8003cc2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c96:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0210 	orr.w	r2, r2, #16
 8003ca6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d110      	bne.n	8003cd2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0220 	orr.w	r2, r2, #32
 8003cbe:	619a      	str	r2, [r3, #24]
 8003cc0:	e007      	b.n	8003cd2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699a      	ldr	r2, [r3, #24]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ce2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003cea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003cfa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003cfc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d06:	d115      	bne.n	8003d34 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	3b01      	subs	r3, #1
 8003d14:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d16:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d20:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d30:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d32:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f814 	bl	8003d78 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40006400 	.word	0x40006400
 8003d74:	40006500 	.word	0x40006500

08003d78 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <FDCAN_CalcultateRamBlockAddresses+0xb8>)
 8003d82:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d103      	bne.n	8003d96 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003d94:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da4:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	041a      	lsls	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dca:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	061a      	lsls	r2, r3, #24
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e005      	b.n	8003e18 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3304      	adds	r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3f3      	bcc.n	8003e0c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003e24:	bf00      	nop
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	4000a400 	.word	0x4000a400
 8003e34:	40006800 	.word	0x40006800

08003e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e46:	e15a      	b.n	80040fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	4013      	ands	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 814c 	beq.w	80040f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x38>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b12      	cmp	r3, #18
 8003e6e:	d123      	bne.n	8003eb8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	08da      	lsrs	r2, r3, #3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3208      	adds	r2, #8
 8003e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	220f      	movs	r2, #15
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	08da      	lsrs	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3208      	adds	r2, #8
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0203 	and.w	r2, r3, #3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d00b      	beq.n	8003f0c <HAL_GPIO_Init+0xd4>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d007      	beq.n	8003f0c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f00:	2b11      	cmp	r3, #17
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b12      	cmp	r3, #18
 8003f0a:	d130      	bne.n	8003f6e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f42:	2201      	movs	r2, #1
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	f003 0201 	and.w	r2, r3, #1
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80a6 	beq.w	80040f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fac:	4b5b      	ldr	r3, [pc, #364]	; (800411c <HAL_GPIO_Init+0x2e4>)
 8003fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb0:	4a5a      	ldr	r2, [pc, #360]	; (800411c <HAL_GPIO_Init+0x2e4>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6613      	str	r3, [r2, #96]	; 0x60
 8003fb8:	4b58      	ldr	r3, [pc, #352]	; (800411c <HAL_GPIO_Init+0x2e4>)
 8003fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fc4:	4a56      	ldr	r2, [pc, #344]	; (8004120 <HAL_GPIO_Init+0x2e8>)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	3302      	adds	r3, #2
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	220f      	movs	r2, #15
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fee:	d01f      	beq.n	8004030 <HAL_GPIO_Init+0x1f8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a4c      	ldr	r2, [pc, #304]	; (8004124 <HAL_GPIO_Init+0x2ec>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d019      	beq.n	800402c <HAL_GPIO_Init+0x1f4>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a4b      	ldr	r2, [pc, #300]	; (8004128 <HAL_GPIO_Init+0x2f0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <HAL_GPIO_Init+0x1f0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a4a      	ldr	r2, [pc, #296]	; (800412c <HAL_GPIO_Init+0x2f4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00d      	beq.n	8004024 <HAL_GPIO_Init+0x1ec>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a49      	ldr	r2, [pc, #292]	; (8004130 <HAL_GPIO_Init+0x2f8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <HAL_GPIO_Init+0x1e8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a48      	ldr	r2, [pc, #288]	; (8004134 <HAL_GPIO_Init+0x2fc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d101      	bne.n	800401c <HAL_GPIO_Init+0x1e4>
 8004018:	2305      	movs	r3, #5
 800401a:	e00a      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 800401c:	2306      	movs	r3, #6
 800401e:	e008      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 8004020:	2304      	movs	r3, #4
 8004022:	e006      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 8004024:	2303      	movs	r3, #3
 8004026:	e004      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 8004028:	2302      	movs	r3, #2
 800402a:	e002      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <HAL_GPIO_Init+0x1fa>
 8004030:	2300      	movs	r3, #0
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	f002 0203 	and.w	r2, r2, #3
 8004038:	0092      	lsls	r2, r2, #2
 800403a:	4093      	lsls	r3, r2
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004042:	4937      	ldr	r1, [pc, #220]	; (8004120 <HAL_GPIO_Init+0x2e8>)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <HAL_GPIO_Init+0x300>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	43db      	mvns	r3, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004074:	4a30      	ldr	r2, [pc, #192]	; (8004138 <HAL_GPIO_Init+0x300>)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800407a:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <HAL_GPIO_Init+0x300>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800409e:	4a26      	ldr	r2, [pc, #152]	; (8004138 <HAL_GPIO_Init+0x300>)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_GPIO_Init+0x300>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040c8:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_GPIO_Init+0x300>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <HAL_GPIO_Init+0x300>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040f2:	4a11      	ldr	r2, [pc, #68]	; (8004138 <HAL_GPIO_Init+0x300>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3301      	adds	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f ae9d 	bne.w	8003e48 <HAL_GPIO_Init+0x10>
  }
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	40010000 	.word	0x40010000
 8004124:	48000400 	.word	0x48000400
 8004128:	48000800 	.word	0x48000800
 800412c:	48000c00 	.word	0x48000c00
 8004130:	48001000 	.word	0x48001000
 8004134:	48001400 	.word	0x48001400
 8004138:	40010400 	.word	0x40010400

0800413c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
 8004148:	4613      	mov	r3, r2
 800414a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800414c:	787b      	ldrb	r3, [r7, #1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004158:	e002      	b.n	8004160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800416c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416e:	b08b      	sub	sp, #44	; 0x2c
 8004170:	af06      	add	r7, sp, #24
 8004172:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0ad      	b.n	80042da <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f007 fa1a 	bl	800b5cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2203      	movs	r2, #3
 800419c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f004 fbbb 	bl	8008920 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	e035      	b.n	800421c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	015b      	lsls	r3, r3, #5
 80041b6:	4413      	add	r3, r2
 80041b8:	3329      	adds	r3, #41	; 0x29
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	015b      	lsls	r3, r3, #5
 80041c4:	4413      	add	r3, r2
 80041c6:	3328      	adds	r3, #40	; 0x28
 80041c8:	7bfa      	ldrb	r2, [r7, #15]
 80041ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	7bfa      	ldrb	r2, [r7, #15]
 80041d0:	b291      	uxth	r1, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	015b      	lsls	r3, r3, #5
 80041d6:	4413      	add	r3, r2
 80041d8:	3336      	adds	r3, #54	; 0x36
 80041da:	460a      	mov	r2, r1
 80041dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	015b      	lsls	r3, r3, #5
 80041e4:	4413      	add	r3, r2
 80041e6:	332b      	adds	r3, #43	; 0x2b
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	015b      	lsls	r3, r3, #5
 80041f2:	4413      	add	r3, r2
 80041f4:	3338      	adds	r3, #56	; 0x38
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	015b      	lsls	r3, r3, #5
 8004200:	4413      	add	r3, r2
 8004202:	333c      	adds	r3, #60	; 0x3c
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	3302      	adds	r3, #2
 800420e:	015b      	lsls	r3, r3, #5
 8004210:	4413      	add	r3, r2
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	3301      	adds	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d3c4      	bcc.n	80041b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	e031      	b.n	8004290 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	015b      	lsls	r3, r3, #5
 8004232:	4413      	add	r3, r2
 8004234:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	015b      	lsls	r3, r3, #5
 8004242:	4413      	add	r3, r2
 8004244:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	015b      	lsls	r3, r3, #5
 8004252:	4413      	add	r3, r2
 8004254:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	015b      	lsls	r3, r3, #5
 8004262:	4413      	add	r3, r2
 8004264:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	015b      	lsls	r3, r3, #5
 8004272:	4413      	add	r3, r2
 8004274:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	330a      	adds	r3, #10
 8004282:	015b      	lsls	r3, r3, #5
 8004284:	4413      	add	r3, r2
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	3301      	adds	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	d3c8      	bcc.n	800422c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	687e      	ldr	r6, [r7, #4]
 80042a2:	466d      	mov	r5, sp
 80042a4:	f106 0410 	add.w	r4, r6, #16
 80042a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	602b      	str	r3, [r5, #0]
 80042b0:	1d33      	adds	r3, r6, #4
 80042b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042b4:	6838      	ldr	r0, [r7, #0]
 80042b6:	f004 fb50 	bl	800895a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fe41 	bl	8004f5a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_PCD_Start+0x16>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e012      	b.n	800431e <HAL_PCD_Start+0x3c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f005 fb75 	bl	80099f4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f004 faee 	bl	80088f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f005 fb75 	bl	8009a22 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004342:	d102      	bne.n	800434a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb3f 	bl	80049c8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f005 fb67 	bl	8009a22 <USB_ReadInterrupts>
 8004354:	4603      	mov	r3, r0
 8004356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	d112      	bne.n	8004386 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004368:	b29a      	uxth	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004372:	b292      	uxth	r2, r2
 8004374:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f007 f99c 	bl	800b6b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800437e:	2100      	movs	r1, #0
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f929 	bl	80045d8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f005 fb49 	bl	8009a22 <USB_ReadInterrupts>
 8004390:	4603      	mov	r3, r0
 8004392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800439a:	d10b      	bne.n	80043b4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043ae:	b292      	uxth	r2, r2
 80043b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f005 fb32 	bl	8009a22 <USB_ReadInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c8:	d10b      	bne.n	80043e2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043dc:	b292      	uxth	r2, r2
 80043de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f005 fb1b 	bl	8009a22 <USB_ReadInterrupts>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d133      	bne.n	8004460 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004400:	b29a      	uxth	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0204 	bic.w	r2, r2, #4
 800440a:	b292      	uxth	r2, r2
 800440c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004418:	b29a      	uxth	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0208 	bic.w	r2, r2, #8
 8004422:	b292      	uxth	r2, r2
 8004424:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800442e:	2b01      	cmp	r3, #1
 8004430:	d107      	bne.n	8004442 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800443a:	2100      	movs	r1, #0
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f007 fb2b 	bl	800ba98 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f007 f970 	bl	800b728 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800445a:	b292      	uxth	r2, r2
 800445c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f005 fadc 	bl	8009a22 <USB_ReadInterrupts>
 800446a:	4603      	mov	r3, r0
 800446c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d131      	bne.n	80044da <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0208 	orr.w	r2, r2, #8
 8004488:	b292      	uxth	r2, r2
 800448a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a0:	b292      	uxth	r2, r2
 80044a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0204 	orr.w	r2, r2, #4
 80044b8:	b292      	uxth	r2, r2
 80044ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f005 faad 	bl	8009a22 <USB_ReadInterrupts>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d2:	d002      	beq.n	80044da <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f007 f90d 	bl	800b6f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f005 fa9f 	bl	8009a22 <USB_ReadInterrupts>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d13f      	bne.n	800456e <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004500:	b292      	uxth	r2, r2
 8004502:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800450c:	2b00      	cmp	r3, #0
 800450e:	d12b      	bne.n	8004568 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0204 	orr.w	r2, r2, #4
 8004522:	b292      	uxth	r2, r2
 8004524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0208 	orr.w	r2, r2, #8
 800453a:	b292      	uxth	r2, r2
 800453c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004550:	b29b      	uxth	r3, r3
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800455e:	2101      	movs	r1, #1
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f007 fa99 	bl	800ba98 <HAL_PCDEx_LPM_Callback>
 8004566:	e002      	b.n	800456e <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f007 f8c3 	bl	800b6f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f005 fa55 	bl	8009a22 <USB_ReadInterrupts>
 8004578:	4603      	mov	r3, r0
 800457a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004582:	d10e      	bne.n	80045a2 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004596:	b292      	uxth	r2, r2
 8004598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f007 f87c 	bl	800b69a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f005 fa3b 	bl	8009a22 <USB_ReadInterrupts>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d10b      	bne.n	80045d0 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ca:	b292      	uxth	r2, r2
 80045cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_PCD_SetAddress+0x1a>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e013      	b.n	800461a <HAL_PCD_SetAddress+0x42>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f005 f9de 	bl	80099cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	4608      	mov	r0, r1
 800462c:	4611      	mov	r1, r2
 800462e:	461a      	mov	r2, r3
 8004630:	4603      	mov	r3, r0
 8004632:	70fb      	strb	r3, [r7, #3]
 8004634:	460b      	mov	r3, r1
 8004636:	803b      	strh	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004644:	2b00      	cmp	r3, #0
 8004646:	da0b      	bge.n	8004660 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	015b      	lsls	r3, r3, #5
 8004650:	3328      	adds	r3, #40	; 0x28
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	705a      	strb	r2, [r3, #1]
 800465e:	e00b      	b.n	8004678 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	015b      	lsls	r3, r3, #5
 8004668:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4413      	add	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	b2da      	uxtb	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004684:	883a      	ldrh	r2, [r7, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	78ba      	ldrb	r2, [r7, #2]
 800468e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046a2:	78bb      	ldrb	r3, [r7, #2]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d102      	bne.n	80046ae <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_PCD_EP_Open+0x9a>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e00e      	b.n	80046da <HAL_PCD_EP_Open+0xb8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 f96a 	bl	80089a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80046d8:	7afb      	ldrb	r3, [r7, #11]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da0b      	bge.n	800470e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	015b      	lsls	r3, r3, #5
 80046fe:	3328      	adds	r3, #40	; 0x28
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	705a      	strb	r2, [r3, #1]
 800470c:	e00b      	b.n	8004726 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	015b      	lsls	r3, r3, #5
 8004716:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	b2da      	uxtb	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_PCD_EP_Close+0x5e>
 800473c:	2302      	movs	r3, #2
 800473e:	e00e      	b.n	800475e <HAL_PCD_EP_Close+0x7c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	4618      	mov	r0, r3
 8004750:	f004 fc18 	bl	8008f84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b086      	sub	sp, #24
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	460b      	mov	r3, r1
 8004774:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004776:	7afb      	ldrb	r3, [r7, #11]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	015b      	lsls	r3, r3, #5
 800477e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2200      	movs	r2, #0
 8004798:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a0:	7afb      	ldrb	r3, [r7, #11]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047ac:	7afb      	ldrb	r3, [r7, #11]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	4618      	mov	r0, r3
 80047be:	f004 fd77 	bl	80092b0 <USB_EPStartXfer>
 80047c2:	e005      	b.n	80047d0 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f004 fd70 	bl	80092b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	330a      	adds	r3, #10
 80047f0:	015b      	lsls	r3, r3, #5
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	681b      	ldr	r3, [r3, #0]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	460b      	mov	r3, r1
 8004812:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004814:	7afb      	ldrb	r3, [r7, #11]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	015b      	lsls	r3, r3, #5
 800481c:	3328      	adds	r3, #40	; 0x28
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2200      	movs	r2, #0
 8004834:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2201      	movs	r2, #1
 800483a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800483c:	7afb      	ldrb	r3, [r7, #11]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	b2da      	uxtb	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004848:	7afb      	ldrb	r3, [r7, #11]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6979      	ldr	r1, [r7, #20]
 8004858:	4618      	mov	r0, r3
 800485a:	f004 fd29 	bl	80092b0 <USB_EPStartXfer>
 800485e:	e005      	b.n	800486c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6979      	ldr	r1, [r7, #20]
 8004866:	4618      	mov	r0, r3
 8004868:	f004 fd22 	bl	80092b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	460b      	mov	r3, r1
 8004880:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	f003 0207 	and.w	r2, r3, #7
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d901      	bls.n	8004894 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e046      	b.n	8004922 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004898:	2b00      	cmp	r3, #0
 800489a:	da0b      	bge.n	80048b4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	015b      	lsls	r3, r3, #5
 80048a4:	3328      	adds	r3, #40	; 0x28
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	4413      	add	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	705a      	strb	r2, [r3, #1]
 80048b2:	e009      	b.n	80048c8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	015b      	lsls	r3, r3, #5
 80048b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4413      	add	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_PCD_EP_SetStall+0x72>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e01c      	b.n	8004922 <HAL_PCD_EP_SetStall+0xac>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f004 ff92 	bl	8009820 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	2b00      	cmp	r3, #0
 8004904:	d108      	bne.n	8004918 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f005 f895 	bl	8009a42 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d901      	bls.n	8004948 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e03a      	b.n	80049be <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800494c:	2b00      	cmp	r3, #0
 800494e:	da0b      	bge.n	8004968 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	015b      	lsls	r3, r3, #5
 8004958:	3328      	adds	r3, #40	; 0x28
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	705a      	strb	r2, [r3, #1]
 8004966:	e00b      	b.n	8004980 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	015b      	lsls	r3, r3, #5
 8004970:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_PCD_EP_ClrStall+0x76>
 800499c:	2302      	movs	r3, #2
 800499e:	e00e      	b.n	80049be <HAL_PCD_EP_ClrStall+0x94>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f004 ff78 	bl	80098a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b089      	sub	sp, #36	; 0x24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049d0:	e274      	b.n	8004ebc <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049da:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049dc:	8afb      	ldrh	r3, [r7, #22]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80049e6:	7d7b      	ldrb	r3, [r7, #21]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 813c 	bne.w	8004c66 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80049ee:	8afb      	ldrh	r3, [r7, #22]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d14f      	bne.n	8004a98 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a08:	b29c      	uxth	r4, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3328      	adds	r3, #40	; 0x28
 8004a1e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	441a      	add	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a56:	2100      	movs	r1, #0
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f006 fe07 	bl	800b66c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8228 	beq.w	8004ebc <PCD_EP_ISR_Handler+0x4f4>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f040 8223 	bne.w	8004ebc <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	b292      	uxth	r2, r2
 8004a8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a96:	e211      	b.n	8004ebc <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a9e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004aa8:	8a7b      	ldrh	r3, [r7, #18]
 8004aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d031      	beq.n	8004b16 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	4413      	add	r3, r2
 8004acc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f004 fff5 	bl	8009adc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004afe:	4013      	ands	r3, r2
 8004b00:	b29c      	uxth	r4, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f006 fd82 	bl	800b618 <HAL_PCD_SetupStageCallback>
 8004b14:	e1d2      	b.n	8004ebc <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f280 81ce 	bge.w	8004ebc <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	b29c      	uxth	r4, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	4413      	add	r3, r2
 8004b56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d019      	beq.n	8004ba0 <PCD_EP_ISR_Handler+0x1d8>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6959      	ldr	r1, [r3, #20]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f004 ffa9 	bl	8009adc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	441a      	add	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b98:	2100      	movs	r1, #0
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f006 fd4e 	bl	800b63c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461c      	mov	r4, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	441c      	add	r4, r3
 8004bb2:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8004bb6:	461c      	mov	r4, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10e      	bne.n	8004bde <PCD_EP_ISR_Handler+0x216>
 8004bc0:	8823      	ldrh	r3, [r4, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8023      	strh	r3, [r4, #0]
 8004bcc:	8823      	ldrh	r3, [r4, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8023      	strh	r3, [r4, #0]
 8004bdc:	e02d      	b.n	8004c3a <PCD_EP_ISR_Handler+0x272>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b3e      	cmp	r3, #62	; 0x3e
 8004be4:	d812      	bhi.n	8004c0c <PCD_EP_ISR_Handler+0x244>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <PCD_EP_ISR_Handler+0x238>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	029b      	lsls	r3, r3, #10
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8023      	strh	r3, [r4, #0]
 8004c0a:	e016      	b.n	8004c3a <PCD_EP_ISR_Handler+0x272>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	61bb      	str	r3, [r7, #24]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <PCD_EP_ISR_Handler+0x25e>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	029b      	lsls	r3, r3, #10
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	b29c      	uxth	r4, r3
 8004c4c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c50:	b29c      	uxth	r4, r3
 8004c52:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004c56:	b29c      	uxth	r4, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b9e      	ldr	r3, [pc, #632]	; (8004ed8 <PCD_EP_ISR_Handler+0x510>)
 8004c5e:	4323      	orrs	r3, r4
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	8013      	strh	r3, [r2, #0]
 8004c64:	e12a      	b.n	8004ebc <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	7d7b      	ldrb	r3, [r7, #21]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f280 80cb 	bge.w	8004e16 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	7d7b      	ldrb	r3, [r7, #21]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c94:	4013      	ands	r3, r2
 8004c96:	b29c      	uxth	r4, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	7d7b      	ldrb	r3, [r7, #21]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004ca8:	b292      	uxth	r2, r2
 8004caa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004cac:	7d7b      	ldrb	r3, [r7, #21]
 8004cae:	015b      	lsls	r3, r3, #5
 8004cb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	7b1b      	ldrb	r3, [r3, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d11f      	bne.n	8004d02 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ce6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004ce8:	8bfb      	ldrh	r3, [r7, #30]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d06e      	beq.n	8004dcc <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6959      	ldr	r1, [r3, #20]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	88da      	ldrh	r2, [r3, #6]
 8004cfa:	8bfb      	ldrh	r3, [r7, #30]
 8004cfc:	f004 feee 	bl	8009adc <USB_ReadPMA>
 8004d00:	e064      	b.n	8004dcc <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01f      	beq.n	8004d5c <PCD_EP_ISR_Handler+0x394>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4413      	add	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	4413      	add	r3, r2
 8004d36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d40:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004d42:	8bfb      	ldrh	r3, [r7, #30]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d028      	beq.n	8004d9a <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6959      	ldr	r1, [r3, #20]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	891a      	ldrh	r2, [r3, #8]
 8004d54:	8bfb      	ldrh	r3, [r7, #30]
 8004d56:	f004 fec1 	bl	8009adc <USB_ReadPMA>
 8004d5a:	e01e      	b.n	8004d9a <PCD_EP_ISR_Handler+0x3d2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4413      	add	r3, r2
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	4413      	add	r3, r2
 8004d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d80:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004d82:	8bfb      	ldrh	r3, [r7, #30]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6959      	ldr	r1, [r3, #20]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	895a      	ldrh	r2, [r3, #10]
 8004d94:	8bfb      	ldrh	r3, [r7, #30]
 8004d96:	f004 fea1 	bl	8009adc <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db4:	b29c      	uxth	r4, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	441a      	add	r2, r3
 8004dc4:	4b45      	ldr	r3, [pc, #276]	; (8004edc <PCD_EP_ISR_Handler+0x514>)
 8004dc6:	4323      	orrs	r3, r4
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	8bfb      	ldrh	r3, [r7, #30]
 8004dd2:	441a      	add	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	8bfb      	ldrh	r3, [r7, #30]
 8004dde:	441a      	add	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <PCD_EP_ISR_Handler+0x42e>
 8004dec:	8bfa      	ldrh	r2, [r7, #30]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d206      	bcs.n	8004e04 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f006 fc1d 	bl	800b63c <HAL_PCD_DataOutStageCallback>
 8004e02:	e008      	b.n	8004e16 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	7819      	ldrb	r1, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fca8 	bl	8004766 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e16:	8a7b      	ldrh	r3, [r7, #18]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d04d      	beq.n	8004ebc <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e20:	7d7b      	ldrb	r3, [r7, #21]
 8004e22:	015b      	lsls	r3, r3, #5
 8004e24:	3328      	adds	r3, #40	; 0x28
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	4413      	add	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	7d7b      	ldrb	r3, [r7, #21]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e44:	b29c      	uxth	r4, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	7d7b      	ldrb	r3, [r7, #21]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	441a      	add	r2, r3
 8004e52:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	4413      	add	r3, r2
 8004e78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	441a      	add	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d106      	bne.n	8004eaa <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f006 fbe2 	bl	800b66c <HAL_PCD_DataInStageCallback>
 8004ea8:	e008      	b.n	8004ebc <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	7819      	ldrb	r1, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff fca4 	bl	8004804 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	b21b      	sxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f6ff ad82 	blt.w	80049d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3724      	adds	r7, #36	; 0x24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd90      	pop	{r4, r7, pc}
 8004ed8:	ffff8080 	.word	0xffff8080
 8004edc:	ffff80c0 	.word	0xffff80c0

08004ee0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	817b      	strh	r3, [r7, #10]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004ef2:	897b      	ldrh	r3, [r7, #10]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	015b      	lsls	r3, r3, #5
 8004f06:	3328      	adds	r3, #40	; 0x28
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e006      	b.n	8004f1e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f10:	897b      	ldrh	r3, [r7, #10]
 8004f12:	015b      	lsls	r3, r3, #5
 8004f14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f1e:	893b      	ldrh	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2200      	movs	r2, #0
 8004f28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	80da      	strh	r2, [r3, #6]
 8004f32:	e00b      	b.n	8004f4c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2201      	movs	r2, #1
 8004f38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f043 0302 	orr.w	r3, r3, #2
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d141      	bne.n	8005042 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fbe:	4b4b      	ldr	r3, [pc, #300]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fca:	d131      	bne.n	8005030 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fcc:	4b47      	ldr	r3, [pc, #284]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd2:	4a46      	ldr	r2, [pc, #280]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fdc:	4b43      	ldr	r3, [pc, #268]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fe4:	4a41      	ldr	r2, [pc, #260]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fec:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2232      	movs	r2, #50	; 0x32
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	4a3f      	ldr	r2, [pc, #252]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	0c9b      	lsrs	r3, r3, #18
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005002:	e002      	b.n	800500a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3b01      	subs	r3, #1
 8005008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800500a:	4b38      	ldr	r3, [pc, #224]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d102      	bne.n	800501e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f2      	bne.n	8005004 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800501e:	4b33      	ldr	r3, [pc, #204]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502a:	d158      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e057      	b.n	80050e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005030:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005036:	4a2d      	ldr	r2, [pc, #180]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800503c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005040:	e04d      	b.n	80050de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005048:	d141      	bne.n	80050ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800504a:	4b28      	ldr	r3, [pc, #160]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005056:	d131      	bne.n	80050bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005058:	4b24      	ldr	r3, [pc, #144]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800505e:	4a23      	ldr	r2, [pc, #140]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005068:	4b20      	ldr	r3, [pc, #128]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005070:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2232      	movs	r2, #50	; 0x32
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	0c9b      	lsrs	r3, r3, #18
 800508a:	3301      	adds	r3, #1
 800508c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800508e:	e002      	b.n	8005096 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3b01      	subs	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005096:	4b15      	ldr	r3, [pc, #84]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a2:	d102      	bne.n	80050aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f2      	bne.n	8005090 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b6:	d112      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e011      	b.n	80050e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c2:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050cc:	e007      	b.n	80050de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050ce:	4b07      	ldr	r3, [pc, #28]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050d6:	4a05      	ldr	r2, [pc, #20]	; (80050ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40007000 	.word	0x40007000
 80050f0:	20000000 	.word	0x20000000
 80050f4:	431bde83 	.word	0x431bde83

080050f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e308      	b.n	800571c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d075      	beq.n	8005202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005116:	4ba3      	ldr	r3, [pc, #652]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005120:	4ba0      	ldr	r3, [pc, #640]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b0c      	cmp	r3, #12
 800512e:	d102      	bne.n	8005136 <HAL_RCC_OscConfig+0x3e>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d002      	beq.n	800513c <HAL_RCC_OscConfig+0x44>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d10b      	bne.n	8005154 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513c:	4b99      	ldr	r3, [pc, #612]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d05b      	beq.n	8005200 <HAL_RCC_OscConfig+0x108>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d157      	bne.n	8005200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e2e3      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515c:	d106      	bne.n	800516c <HAL_RCC_OscConfig+0x74>
 800515e:	4b91      	ldr	r3, [pc, #580]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a90      	ldr	r2, [pc, #576]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e01d      	b.n	80051a8 <HAL_RCC_OscConfig+0xb0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x98>
 8005176:	4b8b      	ldr	r3, [pc, #556]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a8a      	ldr	r2, [pc, #552]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800517c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a87      	ldr	r2, [pc, #540]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e00b      	b.n	80051a8 <HAL_RCC_OscConfig+0xb0>
 8005190:	4b84      	ldr	r3, [pc, #528]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a83      	ldr	r2, [pc, #524]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	4b81      	ldr	r3, [pc, #516]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a80      	ldr	r2, [pc, #512]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80051a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d013      	beq.n	80051d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b0:	f7fc fac4 	bl	800173c <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b8:	f7fc fac0 	bl	800173c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b64      	cmp	r3, #100	; 0x64
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e2a8      	b.n	800571c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ca:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0xc0>
 80051d6:	e014      	b.n	8005202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fc fab0 	bl	800173c <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e0:	f7fc faac 	bl	800173c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e294      	b.n	800571c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051f2:	4b6c      	ldr	r3, [pc, #432]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0xe8>
 80051fe:	e000      	b.n	8005202 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d075      	beq.n	80052fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800520e:	4b65      	ldr	r3, [pc, #404]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005218:	4b62      	ldr	r3, [pc, #392]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	2b0c      	cmp	r3, #12
 8005226:	d102      	bne.n	800522e <HAL_RCC_OscConfig+0x136>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d002      	beq.n	8005234 <HAL_RCC_OscConfig+0x13c>
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b04      	cmp	r3, #4
 8005232:	d11f      	bne.n	8005274 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005234:	4b5b      	ldr	r3, [pc, #364]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <HAL_RCC_OscConfig+0x154>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e267      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	4952      	ldr	r1, [pc, #328]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800525c:	4313      	orrs	r3, r2
 800525e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005260:	4b51      	ldr	r3, [pc, #324]	; (80053a8 <HAL_RCC_OscConfig+0x2b0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f7fc fa1d 	bl	80016a4 <HAL_InitTick>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d043      	beq.n	80052f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e253      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d023      	beq.n	80052c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800527c:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a48      	ldr	r2, [pc, #288]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fc fa58 	bl	800173c <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005290:	f7fc fa54 	bl	800173c <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e23c      	b.n	800571c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052a2:	4b40      	ldr	r3, [pc, #256]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ae:	4b3d      	ldr	r3, [pc, #244]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	4939      	ldr	r1, [pc, #228]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	604b      	str	r3, [r1, #4]
 80052c2:	e01a      	b.n	80052fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c4:	4b37      	ldr	r3, [pc, #220]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a36      	ldr	r2, [pc, #216]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fc fa34 	bl	800173c <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d8:	f7fc fa30 	bl	800173c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e218      	b.n	800571c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052ea:	4b2e      	ldr	r3, [pc, #184]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0x1e0>
 80052f6:	e000      	b.n	80052fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d03c      	beq.n	8005380 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01c      	beq.n	8005348 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800530e:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005314:	4a23      	ldr	r2, [pc, #140]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531e:	f7fc fa0d 	bl	800173c <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005326:	f7fc fa09 	bl	800173c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e1f1      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800533a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0ef      	beq.n	8005326 <HAL_RCC_OscConfig+0x22e>
 8005346:	e01b      	b.n	8005380 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005348:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800534a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800534e:	4a15      	ldr	r2, [pc, #84]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005358:	f7fc f9f0 	bl	800173c <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005360:	f7fc f9ec 	bl	800173c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e1d4      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ef      	bne.n	8005360 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80ab 	beq.w	80054e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800538e:	2300      	movs	r3, #0
 8005390:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005392:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_RCC_OscConfig+0x2b4>
 800539e:	2301      	movs	r3, #1
 80053a0:	e005      	b.n	80053ae <HAL_RCC_OscConfig+0x2b6>
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	20000004 	.word	0x20000004
 80053ac:	2300      	movs	r3, #0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053b2:	4baf      	ldr	r3, [pc, #700]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	4aae      	ldr	r2, [pc, #696]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80053b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053bc:	6593      	str	r3, [r2, #88]	; 0x58
 80053be:	4bac      	ldr	r3, [pc, #688]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80053c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053ca:	2301      	movs	r3, #1
 80053cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ce:	4ba9      	ldr	r3, [pc, #676]	; (8005674 <HAL_RCC_OscConfig+0x57c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d118      	bne.n	800540c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053da:	4ba6      	ldr	r3, [pc, #664]	; (8005674 <HAL_RCC_OscConfig+0x57c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4aa5      	ldr	r2, [pc, #660]	; (8005674 <HAL_RCC_OscConfig+0x57c>)
 80053e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053e6:	f7fc f9a9 	bl	800173c <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ee:	f7fc f9a5 	bl	800173c <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e18d      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005400:	4b9c      	ldr	r3, [pc, #624]	; (8005674 <HAL_RCC_OscConfig+0x57c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d108      	bne.n	8005426 <HAL_RCC_OscConfig+0x32e>
 8005414:	4b96      	ldr	r3, [pc, #600]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	4a95      	ldr	r2, [pc, #596]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005424:	e024      	b.n	8005470 <HAL_RCC_OscConfig+0x378>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b05      	cmp	r3, #5
 800542c:	d110      	bne.n	8005450 <HAL_RCC_OscConfig+0x358>
 800542e:	4b90      	ldr	r3, [pc, #576]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005434:	4a8e      	ldr	r2, [pc, #568]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005436:	f043 0304 	orr.w	r3, r3, #4
 800543a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800543e:	4b8c      	ldr	r3, [pc, #560]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	4a8a      	ldr	r2, [pc, #552]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800544e:	e00f      	b.n	8005470 <HAL_RCC_OscConfig+0x378>
 8005450:	4b87      	ldr	r3, [pc, #540]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	4a86      	ldr	r2, [pc, #536]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005460:	4b83      	ldr	r3, [pc, #524]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	4a82      	ldr	r2, [pc, #520]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005468:	f023 0304 	bic.w	r3, r3, #4
 800546c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d016      	beq.n	80054a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005478:	f7fc f960 	bl	800173c <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800547e:	e00a      	b.n	8005496 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005480:	f7fc f95c 	bl	800173c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f241 3288 	movw	r2, #5000	; 0x1388
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e142      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005496:	4b76      	ldr	r3, [pc, #472]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ed      	beq.n	8005480 <HAL_RCC_OscConfig+0x388>
 80054a4:	e015      	b.n	80054d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a6:	f7fc f949 	bl	800173c <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fc f945 	bl	800173c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054bc:	4293      	cmp	r3, r2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e12b      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054c4:	4b6a      	ldr	r3, [pc, #424]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1ed      	bne.n	80054ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054d2:	7ffb      	ldrb	r3, [r7, #31]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d105      	bne.n	80054e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d8:	4b65      	ldr	r3, [pc, #404]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80054da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054dc:	4a64      	ldr	r2, [pc, #400]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80054de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d03c      	beq.n	800556a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01c      	beq.n	8005532 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054f8:	4b5d      	ldr	r3, [pc, #372]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80054fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054fe:	4a5c      	ldr	r2, [pc, #368]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fc f918 	bl	800173c <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005510:	f7fc f914 	bl	800173c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e0fc      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005522:	4b53      	ldr	r3, [pc, #332]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ef      	beq.n	8005510 <HAL_RCC_OscConfig+0x418>
 8005530:	e01b      	b.n	800556a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005532:	4b4f      	ldr	r3, [pc, #316]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005538:	4a4d      	ldr	r2, [pc, #308]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fc f8fb 	bl	800173c <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800554a:	f7fc f8f7 	bl	800173c <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e0df      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800555c:	4b44      	ldr	r3, [pc, #272]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 800555e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1ef      	bne.n	800554a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80d3 	beq.w	800571a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005574:	4b3e      	ldr	r3, [pc, #248]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 030c 	and.w	r3, r3, #12
 800557c:	2b0c      	cmp	r3, #12
 800557e:	f000 808d 	beq.w	800569c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d15a      	bne.n	8005640 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558a:	4b39      	ldr	r3, [pc, #228]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a38      	ldr	r2, [pc, #224]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005596:	f7fc f8d1 	bl	800173c <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800559c:	e008      	b.n	80055b0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559e:	f7fc f8cd 	bl	800173c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e0b5      	b.n	800571c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b0:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055bc:	4b2c      	ldr	r3, [pc, #176]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	4b2d      	ldr	r3, [pc, #180]	; (8005678 <HAL_RCC_OscConfig+0x580>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6a11      	ldr	r1, [r2, #32]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055cc:	3a01      	subs	r2, #1
 80055ce:	0112      	lsls	r2, r2, #4
 80055d0:	4311      	orrs	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055d6:	0212      	lsls	r2, r2, #8
 80055d8:	4311      	orrs	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055de:	0852      	lsrs	r2, r2, #1
 80055e0:	3a01      	subs	r2, #1
 80055e2:	0552      	lsls	r2, r2, #21
 80055e4:	4311      	orrs	r1, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055ea:	0852      	lsrs	r2, r2, #1
 80055ec:	3a01      	subs	r2, #1
 80055ee:	0652      	lsls	r2, r2, #25
 80055f0:	4311      	orrs	r1, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055f6:	06d2      	lsls	r2, r2, #27
 80055f8:	430a      	orrs	r2, r1
 80055fa:	491d      	ldr	r1, [pc, #116]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005600:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1a      	ldr	r2, [pc, #104]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800560a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800560c:	4b18      	ldr	r3, [pc, #96]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a17      	ldr	r2, [pc, #92]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005616:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005618:	f7fc f890 	bl	800173c <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005620:	f7fc f88c 	bl	800173c <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e074      	b.n	800571c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005632:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0x528>
 800563e:	e06c      	b.n	800571a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800564a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800564c:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a07      	ldr	r2, [pc, #28]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a04      	ldr	r2, [pc, #16]	; (8005670 <HAL_RCC_OscConfig+0x578>)
 800565e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc f868 	bl	800173c <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800566e:	e00e      	b.n	800568e <HAL_RCC_OscConfig+0x596>
 8005670:	40021000 	.word	0x40021000
 8005674:	40007000 	.word	0x40007000
 8005678:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567c:	f7fc f85e 	bl	800173c <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e046      	b.n	800571c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800568e:	4b25      	ldr	r3, [pc, #148]	; (8005724 <HAL_RCC_OscConfig+0x62c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x584>
 800569a:	e03e      	b.n	800571a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e039      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056a8:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <HAL_RCC_OscConfig+0x62c>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 0203 	and.w	r2, r3, #3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d12c      	bne.n	8005716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	3b01      	subs	r3, #1
 80056c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d123      	bne.n	8005716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d11b      	bne.n	8005716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d113      	bne.n	8005716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	3b01      	subs	r3, #1
 80056fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d109      	bne.n	8005716 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	3b01      	subs	r3, #1
 8005710:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d001      	beq.n	800571a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40021000 	.word	0x40021000

08005728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e11e      	b.n	800597e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005740:	4b91      	ldr	r3, [pc, #580]	; (8005988 <HAL_RCC_ClockConfig+0x260>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d910      	bls.n	8005770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574e:	4b8e      	ldr	r3, [pc, #568]	; (8005988 <HAL_RCC_ClockConfig+0x260>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 020f 	bic.w	r2, r3, #15
 8005756:	498c      	ldr	r1, [pc, #560]	; (8005988 <HAL_RCC_ClockConfig+0x260>)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	4313      	orrs	r3, r2
 800575c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800575e:	4b8a      	ldr	r3, [pc, #552]	; (8005988 <HAL_RCC_ClockConfig+0x260>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e106      	b.n	800597e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d073      	beq.n	8005864 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b03      	cmp	r3, #3
 8005782:	d129      	bne.n	80057d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005784:	4b81      	ldr	r3, [pc, #516]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0f4      	b.n	800597e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005794:	f000 f99e 	bl	8005ad4 <RCC_GetSysClockFreqFromPLLSource>
 8005798:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4a7c      	ldr	r2, [pc, #496]	; (8005990 <HAL_RCC_ClockConfig+0x268>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d93f      	bls.n	8005822 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057a2:	4b7a      	ldr	r3, [pc, #488]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d033      	beq.n	8005822 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d12f      	bne.n	8005822 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057c2:	4b72      	ldr	r3, [pc, #456]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ca:	4a70      	ldr	r2, [pc, #448]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 80057cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e024      	b.n	8005822 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d107      	bne.n	80057f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057e0:	4b6a      	ldr	r3, [pc, #424]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0c6      	b.n	800597e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057f0:	4b66      	ldr	r3, [pc, #408]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0be      	b.n	800597e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005800:	f000 f8ce 	bl	80059a0 <HAL_RCC_GetSysClockFreq>
 8005804:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4a61      	ldr	r2, [pc, #388]	; (8005990 <HAL_RCC_ClockConfig+0x268>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d909      	bls.n	8005822 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800580e:	4b5f      	ldr	r3, [pc, #380]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005816:	4a5d      	ldr	r2, [pc, #372]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800581c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005822:	4b5a      	ldr	r3, [pc, #360]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f023 0203 	bic.w	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4957      	ldr	r1, [pc, #348]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005830:	4313      	orrs	r3, r2
 8005832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005834:	f7fb ff82 	bl	800173c <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583a:	e00a      	b.n	8005852 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800583c:	f7fb ff7e 	bl	800173c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f241 3288 	movw	r2, #5000	; 0x1388
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e095      	b.n	800597e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	4b4e      	ldr	r3, [pc, #312]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 020c 	and.w	r2, r3, #12
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	429a      	cmp	r2, r3
 8005862:	d1eb      	bne.n	800583c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d023      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800587c:	4b43      	ldr	r3, [pc, #268]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4a42      	ldr	r2, [pc, #264]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005886:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d007      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005894:	4b3d      	ldr	r3, [pc, #244]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800589c:	4a3b      	ldr	r2, [pc, #236]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 800589e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a4:	4b39      	ldr	r3, [pc, #228]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4936      	ldr	r1, [pc, #216]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	608b      	str	r3, [r1, #8]
 80058b6:	e008      	b.n	80058ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2b80      	cmp	r3, #128	; 0x80
 80058bc:	d105      	bne.n	80058ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058be:	4b33      	ldr	r3, [pc, #204]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	4a32      	ldr	r2, [pc, #200]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 80058c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058ca:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <HAL_RCC_ClockConfig+0x260>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d21d      	bcs.n	8005914 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d8:	4b2b      	ldr	r3, [pc, #172]	; (8005988 <HAL_RCC_ClockConfig+0x260>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f023 020f 	bic.w	r2, r3, #15
 80058e0:	4929      	ldr	r1, [pc, #164]	; (8005988 <HAL_RCC_ClockConfig+0x260>)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058e8:	f7fb ff28 	bl	800173c <HAL_GetTick>
 80058ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ee:	e00a      	b.n	8005906 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f0:	f7fb ff24 	bl	800173c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e03b      	b.n	800597e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <HAL_RCC_ClockConfig+0x260>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d1ed      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005920:	4b1a      	ldr	r3, [pc, #104]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4917      	ldr	r1, [pc, #92]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800593e:	4b13      	ldr	r3, [pc, #76]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	490f      	ldr	r1, [pc, #60]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 800594e:	4313      	orrs	r3, r2
 8005950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005952:	f000 f825 	bl	80059a0 <HAL_RCC_GetSysClockFreq>
 8005956:	4601      	mov	r1, r0
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <HAL_RCC_ClockConfig+0x264>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <HAL_RCC_ClockConfig+0x26c>)
 8005964:	5cd3      	ldrb	r3, [r2, r3]
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	fa21 f303 	lsr.w	r3, r1, r3
 800596e:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <HAL_RCC_ClockConfig+0x270>)
 8005970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005972:	4b0a      	ldr	r3, [pc, #40]	; (800599c <HAL_RCC_ClockConfig+0x274>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fb fe94 	bl	80016a4 <HAL_InitTick>
 800597c:	4603      	mov	r3, r0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40022000 	.word	0x40022000
 800598c:	40021000 	.word	0x40021000
 8005990:	04c4b400 	.word	0x04c4b400
 8005994:	0800bc60 	.word	0x0800bc60
 8005998:	20000000 	.word	0x20000000
 800599c:	20000004 	.word	0x20000004

080059a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059a6:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d102      	bne.n	80059b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059b2:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xbc>)
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	e047      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059b8:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 030c 	and.w	r3, r3, #12
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d102      	bne.n	80059ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059c4:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	e03e      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059ca:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
 80059d2:	2b0c      	cmp	r3, #12
 80059d4:	d136      	bne.n	8005a44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059d6:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	3301      	adds	r3, #1
 80059ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d10c      	bne.n	8005a0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059f4:	4a1a      	ldr	r2, [pc, #104]	; (8005a60 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059fe:	68d2      	ldr	r2, [r2, #12]
 8005a00:	0a12      	lsrs	r2, r2, #8
 8005a02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	617b      	str	r3, [r7, #20]
      break;
 8005a0c:	e00c      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a0e:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a18:	68d2      	ldr	r2, [r2, #12]
 8005a1a:	0a12      	lsrs	r2, r2, #8
 8005a1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
      break;
 8005a26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	0e5b      	lsrs	r3, r3, #25
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e001      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a48:	693b      	ldr	r3, [r7, #16]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	00f42400 	.word	0x00f42400
 8005a60:	007a1200 	.word	0x007a1200

08005a64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000000 	.word	0x20000000

08005a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a80:	f7ff fff0 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005a84:	4601      	mov	r1, r0
 8005a86:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4a04      	ldr	r2, [pc, #16]	; (8005aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a92:	5cd3      	ldrb	r3, [r2, r3]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	0800bc70 	.word	0x0800bc70

08005aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005aac:	f7ff ffda 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005ab0:	4601      	mov	r1, r0
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	0adb      	lsrs	r3, r3, #11
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	4a04      	ldr	r2, [pc, #16]	; (8005ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005abe:	5cd3      	ldrb	r3, [r2, r3]
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40021000 	.word	0x40021000
 8005ad0:	0800bc70 	.word	0x0800bc70

08005ad4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ada:	4b1e      	ldr	r3, [pc, #120]	; (8005b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ae4:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	091b      	lsrs	r3, r3, #4
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	3301      	adds	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d10c      	bne.n	8005b12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005af8:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	4a14      	ldr	r2, [pc, #80]	; (8005b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b02:	68d2      	ldr	r2, [r2, #12]
 8005b04:	0a12      	lsrs	r2, r2, #8
 8005b06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
 8005b0e:	617b      	str	r3, [r7, #20]
    break;
 8005b10:	e00c      	b.n	8005b2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b12:	4a12      	ldr	r2, [pc, #72]	; (8005b5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1a:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b1c:	68d2      	ldr	r2, [r2, #12]
 8005b1e:	0a12      	lsrs	r2, r2, #8
 8005b20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b24:	fb02 f303 	mul.w	r3, r2, r3
 8005b28:	617b      	str	r3, [r7, #20]
    break;
 8005b2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	0e5b      	lsrs	r3, r3, #25
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	3301      	adds	r3, #1
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b46:	687b      	ldr	r3, [r7, #4]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	40021000 	.word	0x40021000
 8005b58:	007a1200 	.word	0x007a1200
 8005b5c:	00f42400 	.word	0x00f42400

08005b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b68:	2300      	movs	r3, #0
 8005b6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8098 	beq.w	8005cae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b82:	4b43      	ldr	r3, [pc, #268]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10d      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b8e:	4b40      	ldr	r3, [pc, #256]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	4a3f      	ldr	r2, [pc, #252]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6593      	str	r3, [r2, #88]	; 0x58
 8005b9a:	4b3d      	ldr	r3, [pc, #244]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005baa:	4b3a      	ldr	r3, [pc, #232]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a39      	ldr	r2, [pc, #228]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bb6:	f7fb fdc1 	bl	800173c <HAL_GetTick>
 8005bba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bbc:	e009      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbe:	f7fb fdbd 	bl	800173c <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d902      	bls.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	74fb      	strb	r3, [r7, #19]
        break;
 8005bd0:	e005      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bd2:	4b30      	ldr	r3, [pc, #192]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0ef      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005bde:	7cfb      	ldrb	r3, [r7, #19]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d159      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005be4:	4b2a      	ldr	r3, [pc, #168]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01e      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d019      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c00:	4b23      	ldr	r3, [pc, #140]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c0c:	4b20      	ldr	r3, [pc, #128]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c1c:	4b1c      	ldr	r3, [pc, #112]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	4a1b      	ldr	r2, [pc, #108]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c2c:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3e:	f7fb fd7d 	bl	800173c <HAL_GetTick>
 8005c42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c44:	e00b      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c46:	f7fb fd79 	bl	800173c <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d902      	bls.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	74fb      	strb	r3, [r7, #19]
            break;
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ec      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c6c:	7cfb      	ldrb	r3, [r7, #19]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10b      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c72:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c80:	4903      	ldr	r1, [pc, #12]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c88:	e008      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c8a:	7cfb      	ldrb	r3, [r7, #19]
 8005c8c:	74bb      	strb	r3, [r7, #18]
 8005c8e:	e005      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c90:	40021000 	.word	0x40021000
 8005c94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c9c:	7c7b      	ldrb	r3, [r7, #17]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d105      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca2:	4baf      	ldr	r3, [pc, #700]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	4aae      	ldr	r2, [pc, #696]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cba:	4ba9      	ldr	r3, [pc, #676]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc0:	f023 0203 	bic.w	r2, r3, #3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	49a5      	ldr	r1, [pc, #660]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cdc:	4ba0      	ldr	r3, [pc, #640]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce2:	f023 020c 	bic.w	r2, r3, #12
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	499d      	ldr	r1, [pc, #628]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cfe:	4b98      	ldr	r3, [pc, #608]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4994      	ldr	r1, [pc, #592]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d20:	4b8f      	ldr	r3, [pc, #572]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	498c      	ldr	r1, [pc, #560]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0310 	and.w	r3, r3, #16
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d42:	4b87      	ldr	r3, [pc, #540]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	4983      	ldr	r1, [pc, #524]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d64:	4b7e      	ldr	r3, [pc, #504]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	497b      	ldr	r1, [pc, #492]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d86:	4b76      	ldr	r3, [pc, #472]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	4972      	ldr	r1, [pc, #456]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005da8:	4b6d      	ldr	r3, [pc, #436]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	496a      	ldr	r1, [pc, #424]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dca:	4b65      	ldr	r3, [pc, #404]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	4961      	ldr	r1, [pc, #388]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dec:	4b5c      	ldr	r3, [pc, #368]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005df2:	f023 0203 	bic.w	r2, r3, #3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	4959      	ldr	r1, [pc, #356]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e0e:	4b54      	ldr	r3, [pc, #336]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	4950      	ldr	r1, [pc, #320]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d015      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e30:	4b4b      	ldr	r3, [pc, #300]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	4948      	ldr	r1, [pc, #288]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4e:	d105      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e50:	4b43      	ldr	r3, [pc, #268]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	4a42      	ldr	r2, [pc, #264]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d015      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e68:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e76:	493a      	ldr	r1, [pc, #232]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e86:	d105      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e88:	4b35      	ldr	r3, [pc, #212]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4a34      	ldr	r2, [pc, #208]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e92:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ea0:	4b2f      	ldr	r3, [pc, #188]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	492c      	ldr	r1, [pc, #176]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ebe:	d105      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec0:	4b27      	ldr	r3, [pc, #156]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a26      	ldr	r2, [pc, #152]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d015      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ed8:	4b21      	ldr	r3, [pc, #132]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee6:	491e      	ldr	r1, [pc, #120]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ef6:	d105      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ef8:	4b19      	ldr	r3, [pc, #100]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d015      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f10:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	4910      	ldr	r1, [pc, #64]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f2e:	d105      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4a0a      	ldr	r2, [pc, #40]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d018      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	4902      	ldr	r1, [pc, #8]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f5e:	e001      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005f60:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f6c:	d105      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f6e:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f78:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d015      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f86:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f94:	4909      	ldr	r1, [pc, #36]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa4:	d105      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	4a04      	ldr	r2, [pc, #16]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005fb2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40021000 	.word	0x40021000

08005fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e01d      	b.n	800600e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fb f9c2 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4610      	mov	r0, r2
 8006000:	f000 fa94 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e01d      	b.n	8006064 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d106      	bne.n	8006042 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f815 	bl	800606c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2202      	movs	r2, #2
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f000 fa69 	bl	800652c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2201      	movs	r2, #1
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fe76 	bl	8006d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <HAL_TIM_PWM_Start+0x98>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_TIM_PWM_Start+0x4a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1d      	ldr	r2, [pc, #116]	; (800611c <HAL_TIM_PWM_Start+0x9c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_TIM_PWM_Start+0x4a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <HAL_TIM_PWM_Start+0xa0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_TIM_PWM_Start+0x4a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <HAL_TIM_PWM_Start+0xa4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_TIM_PWM_Start+0x4a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a18      	ldr	r2, [pc, #96]	; (8006128 <HAL_TIM_PWM_Start+0xa8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d101      	bne.n	80060ce <HAL_TIM_PWM_Start+0x4e>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <HAL_TIM_PWM_Start+0x50>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <HAL_TIM_PWM_Start+0xac>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d00b      	beq.n	800610e <HAL_TIM_PWM_Start+0x8e>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fc:	d007      	beq.n	800610e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40013400 	.word	0x40013400
 8006120:	40014000 	.word	0x40014000
 8006124:	40014400 	.word	0x40014400
 8006128:	40014800 	.word	0x40014800
 800612c:	00010007 	.word	0x00010007

08006130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006146:	2302      	movs	r3, #2
 8006148:	e105      	b.n	8006356 <HAL_TIM_PWM_ConfigChannel+0x226>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2202      	movs	r2, #2
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b14      	cmp	r3, #20
 800615e:	f200 80f0 	bhi.w	8006342 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	080061bd 	.word	0x080061bd
 800616c:	08006343 	.word	0x08006343
 8006170:	08006343 	.word	0x08006343
 8006174:	08006343 	.word	0x08006343
 8006178:	080061fd 	.word	0x080061fd
 800617c:	08006343 	.word	0x08006343
 8006180:	08006343 	.word	0x08006343
 8006184:	08006343 	.word	0x08006343
 8006188:	0800623f 	.word	0x0800623f
 800618c:	08006343 	.word	0x08006343
 8006190:	08006343 	.word	0x08006343
 8006194:	08006343 	.word	0x08006343
 8006198:	0800627f 	.word	0x0800627f
 800619c:	08006343 	.word	0x08006343
 80061a0:	08006343 	.word	0x08006343
 80061a4:	08006343 	.word	0x08006343
 80061a8:	080062c1 	.word	0x080062c1
 80061ac:	08006343 	.word	0x08006343
 80061b0:	08006343 	.word	0x08006343
 80061b4:	08006343 	.word	0x08006343
 80061b8:	08006301 	.word	0x08006301
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fa4c 	bl	8006660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0208 	orr.w	r2, r2, #8
 80061d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0204 	bic.w	r2, r2, #4
 80061e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6999      	ldr	r1, [r3, #24]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	619a      	str	r2, [r3, #24]
      break;
 80061fa:	e0a3      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fabc 	bl	8006780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	619a      	str	r2, [r3, #24]
      break;
 800623c:	e082      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fb25 	bl	8006894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0208 	orr.w	r2, r2, #8
 8006258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0204 	bic.w	r2, r2, #4
 8006268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69d9      	ldr	r1, [r3, #28]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	61da      	str	r2, [r3, #28]
      break;
 800627c:	e062      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fb8d 	bl	80069a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69d9      	ldr	r1, [r3, #28]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	021a      	lsls	r2, r3, #8
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	61da      	str	r2, [r3, #28]
      break;
 80062be:	e041      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fbf6 	bl	8006ab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0208 	orr.w	r2, r2, #8
 80062da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0204 	bic.w	r2, r2, #4
 80062ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062fe:	e021      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fc3a 	bl	8006b80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	021a      	lsls	r2, r3, #8
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006340:	e000      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006342:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop

08006360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_TIM_ConfigClockSource+0x18>
 8006374:	2302      	movs	r3, #2
 8006376:	e0cb      	b.n	8006510 <HAL_TIM_ConfigClockSource+0x1b0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006396:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800639a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	f000 80a2 	beq.w	80064fc <HAL_TIM_ConfigClockSource+0x19c>
 80063b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063bc:	d81a      	bhi.n	80063f4 <HAL_TIM_ConfigClockSource+0x94>
 80063be:	2b30      	cmp	r3, #48	; 0x30
 80063c0:	f000 8093 	beq.w	80064ea <HAL_TIM_ConfigClockSource+0x18a>
 80063c4:	2b30      	cmp	r3, #48	; 0x30
 80063c6:	d809      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x7c>
 80063c8:	2b10      	cmp	r3, #16
 80063ca:	f000 808e 	beq.w	80064ea <HAL_TIM_ConfigClockSource+0x18a>
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	f000 808b 	beq.w	80064ea <HAL_TIM_ConfigClockSource+0x18a>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8088 	beq.w	80064ea <HAL_TIM_ConfigClockSource+0x18a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80063da:	e090      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 80063dc:	2b50      	cmp	r3, #80	; 0x50
 80063de:	d054      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x12a>
 80063e0:	2b50      	cmp	r3, #80	; 0x50
 80063e2:	d802      	bhi.n	80063ea <HAL_TIM_ConfigClockSource+0x8a>
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d070      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x16a>
      break;
 80063e8:	e089      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 80063ea:	2b60      	cmp	r3, #96	; 0x60
 80063ec:	d05d      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0x14a>
 80063ee:	2b70      	cmp	r3, #112	; 0x70
 80063f0:	d021      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0xd6>
      break;
 80063f2:	e084      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 80063f4:	4a48      	ldr	r2, [pc, #288]	; (8006518 <HAL_TIM_ConfigClockSource+0x1b8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d077      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x18a>
 80063fa:	4a47      	ldr	r2, [pc, #284]	; (8006518 <HAL_TIM_ConfigClockSource+0x1b8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d809      	bhi.n	8006414 <HAL_TIM_ConfigClockSource+0xb4>
 8006400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006404:	d071      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x18a>
 8006406:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800640a:	d06e      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x18a>
 800640c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006410:	d028      	beq.n	8006464 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006412:	e074      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 8006414:	4a41      	ldr	r2, [pc, #260]	; (800651c <HAL_TIM_ConfigClockSource+0x1bc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d067      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x18a>
 800641a:	4a40      	ldr	r2, [pc, #256]	; (800651c <HAL_TIM_ConfigClockSource+0x1bc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d803      	bhi.n	8006428 <HAL_TIM_ConfigClockSource+0xc8>
 8006420:	4a3f      	ldr	r2, [pc, #252]	; (8006520 <HAL_TIM_ConfigClockSource+0x1c0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d061      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x18a>
      break;
 8006426:	e06a      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 8006428:	4a3e      	ldr	r2, [pc, #248]	; (8006524 <HAL_TIM_ConfigClockSource+0x1c4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d05d      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x18a>
 800642e:	4a3e      	ldr	r2, [pc, #248]	; (8006528 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d05a      	beq.n	80064ea <HAL_TIM_ConfigClockSource+0x18a>
      break;
 8006434:	e063      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ETR_SetConfig(htim->Instance,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6899      	ldr	r1, [r3, #8]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f000 fc7d 	bl	8006d44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006458:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	609a      	str	r2, [r3, #8]
      break;
 8006462:	e04c      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ETR_SetConfig(htim->Instance,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	6899      	ldr	r1, [r3, #8]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f000 fc66 	bl	8006d44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006486:	609a      	str	r2, [r3, #8]
      break;
 8006488:	e039      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	6859      	ldr	r1, [r3, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	461a      	mov	r2, r3
 8006498:	f000 fbd8 	bl	8006c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2150      	movs	r1, #80	; 0x50
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fc31 	bl	8006d0a <TIM_ITRx_SetConfig>
      break;
 80064a8:	e029      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6859      	ldr	r1, [r3, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f000 fbf7 	bl	8006caa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2160      	movs	r1, #96	; 0x60
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fc21 	bl	8006d0a <TIM_ITRx_SetConfig>
      break;
 80064c8:	e019      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f000 fbb8 	bl	8006c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2140      	movs	r1, #64	; 0x40
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fc11 	bl	8006d0a <TIM_ITRx_SetConfig>
      break;
 80064e8:	e009      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4619      	mov	r1, r3
 80064f4:	4610      	mov	r0, r2
 80064f6:	f000 fc08 	bl	8006d0a <TIM_ITRx_SetConfig>
      break;
 80064fa:	e000      	b.n	80064fe <HAL_TIM_ConfigClockSource+0x19e>
      break;
 80064fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	00100020 	.word	0x00100020
 800651c:	00100040 	.word	0x00100040
 8006520:	00100030 	.word	0x00100030
 8006524:	00100060 	.word	0x00100060
 8006528:	00100070 	.word	0x00100070

0800652c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a40      	ldr	r2, [pc, #256]	; (8006640 <TIM_Base_SetConfig+0x114>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d013      	beq.n	800656c <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654a:	d00f      	beq.n	800656c <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a3d      	ldr	r2, [pc, #244]	; (8006644 <TIM_Base_SetConfig+0x118>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00b      	beq.n	800656c <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a3c      	ldr	r2, [pc, #240]	; (8006648 <TIM_Base_SetConfig+0x11c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d007      	beq.n	800656c <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a3b      	ldr	r2, [pc, #236]	; (800664c <TIM_Base_SetConfig+0x120>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a3a      	ldr	r2, [pc, #232]	; (8006650 <TIM_Base_SetConfig+0x124>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d108      	bne.n	800657e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2f      	ldr	r2, [pc, #188]	; (8006640 <TIM_Base_SetConfig+0x114>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01f      	beq.n	80065c6 <TIM_Base_SetConfig+0x9a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658c:	d01b      	beq.n	80065c6 <TIM_Base_SetConfig+0x9a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2c      	ldr	r2, [pc, #176]	; (8006644 <TIM_Base_SetConfig+0x118>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d017      	beq.n	80065c6 <TIM_Base_SetConfig+0x9a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2b      	ldr	r2, [pc, #172]	; (8006648 <TIM_Base_SetConfig+0x11c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <TIM_Base_SetConfig+0x9a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2a      	ldr	r2, [pc, #168]	; (800664c <TIM_Base_SetConfig+0x120>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00f      	beq.n	80065c6 <TIM_Base_SetConfig+0x9a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a29      	ldr	r2, [pc, #164]	; (8006650 <TIM_Base_SetConfig+0x124>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00b      	beq.n	80065c6 <TIM_Base_SetConfig+0x9a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a28      	ldr	r2, [pc, #160]	; (8006654 <TIM_Base_SetConfig+0x128>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d007      	beq.n	80065c6 <TIM_Base_SetConfig+0x9a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a27      	ldr	r2, [pc, #156]	; (8006658 <TIM_Base_SetConfig+0x12c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d003      	beq.n	80065c6 <TIM_Base_SetConfig+0x9a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a26      	ldr	r2, [pc, #152]	; (800665c <TIM_Base_SetConfig+0x130>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d108      	bne.n	80065d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a10      	ldr	r2, [pc, #64]	; (8006640 <TIM_Base_SetConfig+0x114>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00f      	beq.n	8006624 <TIM_Base_SetConfig+0xf8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a12      	ldr	r2, [pc, #72]	; (8006650 <TIM_Base_SetConfig+0x124>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00b      	beq.n	8006624 <TIM_Base_SetConfig+0xf8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a11      	ldr	r2, [pc, #68]	; (8006654 <TIM_Base_SetConfig+0x128>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d007      	beq.n	8006624 <TIM_Base_SetConfig+0xf8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a10      	ldr	r2, [pc, #64]	; (8006658 <TIM_Base_SetConfig+0x12c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_Base_SetConfig+0xf8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a0f      	ldr	r2, [pc, #60]	; (800665c <TIM_Base_SetConfig+0x130>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d103      	bne.n	800662c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	615a      	str	r2, [r3, #20]
}
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40013400 	.word	0x40013400
 8006654:	40014000 	.word	0x40014000
 8006658:	40014400 	.word	0x40014400
 800665c:	40014800 	.word	0x40014800

08006660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0201 	bic.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800668e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f023 0302 	bic.w	r3, r3, #2
 80066ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a2c      	ldr	r2, [pc, #176]	; (800676c <TIM_OC1_SetConfig+0x10c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00f      	beq.n	80066e0 <TIM_OC1_SetConfig+0x80>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a2b      	ldr	r2, [pc, #172]	; (8006770 <TIM_OC1_SetConfig+0x110>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00b      	beq.n	80066e0 <TIM_OC1_SetConfig+0x80>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a2a      	ldr	r2, [pc, #168]	; (8006774 <TIM_OC1_SetConfig+0x114>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <TIM_OC1_SetConfig+0x80>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a29      	ldr	r2, [pc, #164]	; (8006778 <TIM_OC1_SetConfig+0x118>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC1_SetConfig+0x80>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a28      	ldr	r2, [pc, #160]	; (800677c <TIM_OC1_SetConfig+0x11c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10c      	bne.n	80066fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0308 	bic.w	r3, r3, #8
 80066e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f023 0304 	bic.w	r3, r3, #4
 80066f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1b      	ldr	r2, [pc, #108]	; (800676c <TIM_OC1_SetConfig+0x10c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00f      	beq.n	8006722 <TIM_OC1_SetConfig+0xc2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1a      	ldr	r2, [pc, #104]	; (8006770 <TIM_OC1_SetConfig+0x110>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00b      	beq.n	8006722 <TIM_OC1_SetConfig+0xc2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a19      	ldr	r2, [pc, #100]	; (8006774 <TIM_OC1_SetConfig+0x114>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_OC1_SetConfig+0xc2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a18      	ldr	r2, [pc, #96]	; (8006778 <TIM_OC1_SetConfig+0x118>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_OC1_SetConfig+0xc2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a17      	ldr	r2, [pc, #92]	; (800677c <TIM_OC1_SetConfig+0x11c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d111      	bne.n	8006746 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f023 0210 	bic.w	r2, r3, #16
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0320 	bic.w	r3, r3, #32
 80067ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a28      	ldr	r2, [pc, #160]	; (8006880 <TIM_OC2_SetConfig+0x100>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC2_SetConfig+0x6c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a27      	ldr	r2, [pc, #156]	; (8006884 <TIM_OC2_SetConfig+0x104>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d10d      	bne.n	8006808 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <TIM_OC2_SetConfig+0x100>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00f      	beq.n	8006830 <TIM_OC2_SetConfig+0xb0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a1c      	ldr	r2, [pc, #112]	; (8006884 <TIM_OC2_SetConfig+0x104>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00b      	beq.n	8006830 <TIM_OC2_SetConfig+0xb0>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <TIM_OC2_SetConfig+0x108>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d007      	beq.n	8006830 <TIM_OC2_SetConfig+0xb0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a1a      	ldr	r2, [pc, #104]	; (800688c <TIM_OC2_SetConfig+0x10c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d003      	beq.n	8006830 <TIM_OC2_SetConfig+0xb0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a19      	ldr	r2, [pc, #100]	; (8006890 <TIM_OC2_SetConfig+0x110>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d113      	bne.n	8006858 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800683e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40013400 	.word	0x40013400
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800

08006894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0303 	bic.w	r3, r3, #3
 80068ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a27      	ldr	r2, [pc, #156]	; (8006990 <TIM_OC3_SetConfig+0xfc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d003      	beq.n	80068fe <TIM_OC3_SetConfig+0x6a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a26      	ldr	r2, [pc, #152]	; (8006994 <TIM_OC3_SetConfig+0x100>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d10d      	bne.n	800691a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <TIM_OC3_SetConfig+0xfc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00f      	beq.n	8006942 <TIM_OC3_SetConfig+0xae>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <TIM_OC3_SetConfig+0x100>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00b      	beq.n	8006942 <TIM_OC3_SetConfig+0xae>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a1a      	ldr	r2, [pc, #104]	; (8006998 <TIM_OC3_SetConfig+0x104>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d007      	beq.n	8006942 <TIM_OC3_SetConfig+0xae>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a19      	ldr	r2, [pc, #100]	; (800699c <TIM_OC3_SetConfig+0x108>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d003      	beq.n	8006942 <TIM_OC3_SetConfig+0xae>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a18      	ldr	r2, [pc, #96]	; (80069a0 <TIM_OC3_SetConfig+0x10c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d113      	bne.n	800696a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	621a      	str	r2, [r3, #32]
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40013400 	.word	0x40013400
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800

080069a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	021b      	lsls	r3, r3, #8
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	031b      	lsls	r3, r3, #12
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a28      	ldr	r2, [pc, #160]	; (8006aa4 <TIM_OC4_SetConfig+0x100>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC4_SetConfig+0x6c>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a27      	ldr	r2, [pc, #156]	; (8006aa8 <TIM_OC4_SetConfig+0x104>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10d      	bne.n	8006a2c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	031b      	lsls	r3, r3, #12
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <TIM_OC4_SetConfig+0x100>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00f      	beq.n	8006a54 <TIM_OC4_SetConfig+0xb0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1c      	ldr	r2, [pc, #112]	; (8006aa8 <TIM_OC4_SetConfig+0x104>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00b      	beq.n	8006a54 <TIM_OC4_SetConfig+0xb0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a1b      	ldr	r2, [pc, #108]	; (8006aac <TIM_OC4_SetConfig+0x108>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <TIM_OC4_SetConfig+0xb0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a1a      	ldr	r2, [pc, #104]	; (8006ab0 <TIM_OC4_SetConfig+0x10c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d003      	beq.n	8006a54 <TIM_OC4_SetConfig+0xb0>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <TIM_OC4_SetConfig+0x110>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d113      	bne.n	8006a7c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	019b      	lsls	r3, r3, #6
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	019b      	lsls	r3, r3, #6
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	40013400 	.word	0x40013400
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	40014400 	.word	0x40014400
 8006ab4:	40014800 	.word	0x40014800

08006ab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006afc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a17      	ldr	r2, [pc, #92]	; (8006b6c <TIM_OC5_SetConfig+0xb4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00f      	beq.n	8006b32 <TIM_OC5_SetConfig+0x7a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a16      	ldr	r2, [pc, #88]	; (8006b70 <TIM_OC5_SetConfig+0xb8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <TIM_OC5_SetConfig+0x7a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <TIM_OC5_SetConfig+0xbc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d007      	beq.n	8006b32 <TIM_OC5_SetConfig+0x7a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <TIM_OC5_SetConfig+0xc0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_OC5_SetConfig+0x7a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a13      	ldr	r2, [pc, #76]	; (8006b7c <TIM_OC5_SetConfig+0xc4>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d109      	bne.n	8006b46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40013400 	.word	0x40013400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40014800 	.word	0x40014800

08006b80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	051b      	lsls	r3, r3, #20
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <TIM_OC6_SetConfig+0xb8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00f      	beq.n	8006bfc <TIM_OC6_SetConfig+0x7c>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <TIM_OC6_SetConfig+0xbc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <TIM_OC6_SetConfig+0x7c>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a16      	ldr	r2, [pc, #88]	; (8006c40 <TIM_OC6_SetConfig+0xc0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d007      	beq.n	8006bfc <TIM_OC6_SetConfig+0x7c>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <TIM_OC6_SetConfig+0xc4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_OC6_SetConfig+0x7c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <TIM_OC6_SetConfig+0xc8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d109      	bne.n	8006c10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	029b      	lsls	r3, r3, #10
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f023 0201 	bic.w	r2, r3, #1
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f023 030a 	bic.w	r3, r3, #10
 8006c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b087      	sub	sp, #28
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f023 0210 	bic.w	r2, r3, #16
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	031b      	lsls	r3, r3, #12
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	621a      	str	r2, [r3, #32]
}
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f043 0307 	orr.w	r3, r3, #7
 8006d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	609a      	str	r2, [r3, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	021a      	lsls	r2, r3, #8
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	431a      	orrs	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	609a      	str	r2, [r3, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	2201      	movs	r2, #1
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	401a      	ands	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1a      	ldr	r2, [r3, #32]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
	...

08006dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e047      	b.n	8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1c      	ldr	r2, [pc, #112]	; (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d108      	bne.n	8006e2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e4a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40013400 	.word	0x40013400

08006e8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e087      	b.n	8006fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	041b      	lsls	r3, r3, #16
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a27      	ldr	r2, [pc, #156]	; (8006fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a25      	ldr	r2, [pc, #148]	; (8006fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d106      	bne.n	8006f44 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a1e      	ldr	r2, [pc, #120]	; (8006fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d126      	bne.n	8006fa6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	051b      	lsls	r3, r3, #20
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a0e      	ldr	r2, [pc, #56]	; (8006fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a0d      	ldr	r2, [pc, #52]	; (8006fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d106      	bne.n	8006fa6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	40012c00 	.word	0x40012c00
 8006fc8:	40013400 	.word	0x40013400

08006fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e042      	b.n	8007064 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d106      	bne.n	8006ff6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7fa fa15 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2224      	movs	r2, #36	; 0x24
 8006ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0201 	bic.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f82e 	bl	8007070 <UART_SetConfig>
 8007014:	4603      	mov	r3, r0
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e022      	b.n	8007064 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fa10 	bl	800844c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800703a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800704a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fa97 	bl	8008590 <UART_CheckIdleState>
 8007062:	4603      	mov	r3, r0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	0000      	movs	r0, r0
	...

08007070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007070:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007074:	b08a      	sub	sp, #40	; 0x28
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800707a:	2300      	movs	r3, #0
 800707c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689a      	ldr	r2, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	4313      	orrs	r3, r2
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a4:	4313      	orrs	r3, r2
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4baa      	ldr	r3, [pc, #680]	; (8007358 <UART_SetConfig+0x2e8>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070b8:	430b      	orrs	r3, r1
 80070ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a9f      	ldr	r2, [pc, #636]	; (800735c <UART_SetConfig+0x2ec>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d004      	beq.n	80070ec <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e8:	4313      	orrs	r3, r2
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80070f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007100:	430b      	orrs	r3, r1
 8007102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	f023 010f 	bic.w	r1, r3, #15
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a90      	ldr	r2, [pc, #576]	; (8007360 <UART_SetConfig+0x2f0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d126      	bne.n	8007172 <UART_SetConfig+0x102>
 8007124:	4b8f      	ldr	r3, [pc, #572]	; (8007364 <UART_SetConfig+0x2f4>)
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	2b03      	cmp	r3, #3
 8007130:	d81a      	bhi.n	8007168 <UART_SetConfig+0xf8>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <UART_SetConfig+0xc8>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007149 	.word	0x08007149
 800713c:	08007159 	.word	0x08007159
 8007140:	08007151 	.word	0x08007151
 8007144:	08007161 	.word	0x08007161
 8007148:	2301      	movs	r3, #1
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800714e:	e116      	b.n	800737e <UART_SetConfig+0x30e>
 8007150:	2302      	movs	r3, #2
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007156:	e112      	b.n	800737e <UART_SetConfig+0x30e>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800715e:	e10e      	b.n	800737e <UART_SetConfig+0x30e>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007166:	e10a      	b.n	800737e <UART_SetConfig+0x30e>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716e:	bf00      	nop
 8007170:	e105      	b.n	800737e <UART_SetConfig+0x30e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a7c      	ldr	r2, [pc, #496]	; (8007368 <UART_SetConfig+0x2f8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d138      	bne.n	80071ee <UART_SetConfig+0x17e>
 800717c:	4b79      	ldr	r3, [pc, #484]	; (8007364 <UART_SetConfig+0x2f4>)
 800717e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007182:	f003 030c 	and.w	r3, r3, #12
 8007186:	2b0c      	cmp	r3, #12
 8007188:	d82c      	bhi.n	80071e4 <UART_SetConfig+0x174>
 800718a:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <UART_SetConfig+0x120>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071c5 	.word	0x080071c5
 8007194:	080071e5 	.word	0x080071e5
 8007198:	080071e5 	.word	0x080071e5
 800719c:	080071e5 	.word	0x080071e5
 80071a0:	080071d5 	.word	0x080071d5
 80071a4:	080071e5 	.word	0x080071e5
 80071a8:	080071e5 	.word	0x080071e5
 80071ac:	080071e5 	.word	0x080071e5
 80071b0:	080071cd 	.word	0x080071cd
 80071b4:	080071e5 	.word	0x080071e5
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	080071e5 	.word	0x080071e5
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ca:	e0d8      	b.n	800737e <UART_SetConfig+0x30e>
 80071cc:	2302      	movs	r3, #2
 80071ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d2:	e0d4      	b.n	800737e <UART_SetConfig+0x30e>
 80071d4:	2304      	movs	r3, #4
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071da:	e0d0      	b.n	800737e <UART_SetConfig+0x30e>
 80071dc:	2308      	movs	r3, #8
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e2:	e0cc      	b.n	800737e <UART_SetConfig+0x30e>
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ea:	bf00      	nop
 80071ec:	e0c7      	b.n	800737e <UART_SetConfig+0x30e>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a5e      	ldr	r2, [pc, #376]	; (800736c <UART_SetConfig+0x2fc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d125      	bne.n	8007244 <UART_SetConfig+0x1d4>
 80071f8:	4b5a      	ldr	r3, [pc, #360]	; (8007364 <UART_SetConfig+0x2f4>)
 80071fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007202:	2b10      	cmp	r3, #16
 8007204:	d011      	beq.n	800722a <UART_SetConfig+0x1ba>
 8007206:	2b10      	cmp	r3, #16
 8007208:	d802      	bhi.n	8007210 <UART_SetConfig+0x1a0>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <UART_SetConfig+0x1aa>
 800720e:	e014      	b.n	800723a <UART_SetConfig+0x1ca>
 8007210:	2b20      	cmp	r3, #32
 8007212:	d006      	beq.n	8007222 <UART_SetConfig+0x1b2>
 8007214:	2b30      	cmp	r3, #48	; 0x30
 8007216:	d00c      	beq.n	8007232 <UART_SetConfig+0x1c2>
 8007218:	e00f      	b.n	800723a <UART_SetConfig+0x1ca>
 800721a:	2300      	movs	r3, #0
 800721c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007220:	e0ad      	b.n	800737e <UART_SetConfig+0x30e>
 8007222:	2302      	movs	r3, #2
 8007224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007228:	e0a9      	b.n	800737e <UART_SetConfig+0x30e>
 800722a:	2304      	movs	r3, #4
 800722c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007230:	e0a5      	b.n	800737e <UART_SetConfig+0x30e>
 8007232:	2308      	movs	r3, #8
 8007234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007238:	e0a1      	b.n	800737e <UART_SetConfig+0x30e>
 800723a:	2310      	movs	r3, #16
 800723c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007240:	bf00      	nop
 8007242:	e09c      	b.n	800737e <UART_SetConfig+0x30e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a49      	ldr	r2, [pc, #292]	; (8007370 <UART_SetConfig+0x300>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d125      	bne.n	800729a <UART_SetConfig+0x22a>
 800724e:	4b45      	ldr	r3, [pc, #276]	; (8007364 <UART_SetConfig+0x2f4>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007254:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d011      	beq.n	8007280 <UART_SetConfig+0x210>
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	d802      	bhi.n	8007266 <UART_SetConfig+0x1f6>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <UART_SetConfig+0x200>
 8007264:	e014      	b.n	8007290 <UART_SetConfig+0x220>
 8007266:	2b80      	cmp	r3, #128	; 0x80
 8007268:	d006      	beq.n	8007278 <UART_SetConfig+0x208>
 800726a:	2bc0      	cmp	r3, #192	; 0xc0
 800726c:	d00c      	beq.n	8007288 <UART_SetConfig+0x218>
 800726e:	e00f      	b.n	8007290 <UART_SetConfig+0x220>
 8007270:	2300      	movs	r3, #0
 8007272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007276:	e082      	b.n	800737e <UART_SetConfig+0x30e>
 8007278:	2302      	movs	r3, #2
 800727a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800727e:	e07e      	b.n	800737e <UART_SetConfig+0x30e>
 8007280:	2304      	movs	r3, #4
 8007282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007286:	e07a      	b.n	800737e <UART_SetConfig+0x30e>
 8007288:	2308      	movs	r3, #8
 800728a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800728e:	e076      	b.n	800737e <UART_SetConfig+0x30e>
 8007290:	2310      	movs	r3, #16
 8007292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007296:	bf00      	nop
 8007298:	e071      	b.n	800737e <UART_SetConfig+0x30e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a35      	ldr	r2, [pc, #212]	; (8007374 <UART_SetConfig+0x304>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d129      	bne.n	80072f8 <UART_SetConfig+0x288>
 80072a4:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <UART_SetConfig+0x2f4>)
 80072a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b2:	d014      	beq.n	80072de <UART_SetConfig+0x26e>
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b8:	d802      	bhi.n	80072c0 <UART_SetConfig+0x250>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <UART_SetConfig+0x25e>
 80072be:	e016      	b.n	80072ee <UART_SetConfig+0x27e>
 80072c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c4:	d007      	beq.n	80072d6 <UART_SetConfig+0x266>
 80072c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ca:	d00c      	beq.n	80072e6 <UART_SetConfig+0x276>
 80072cc:	e00f      	b.n	80072ee <UART_SetConfig+0x27e>
 80072ce:	2300      	movs	r3, #0
 80072d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d4:	e053      	b.n	800737e <UART_SetConfig+0x30e>
 80072d6:	2302      	movs	r3, #2
 80072d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072dc:	e04f      	b.n	800737e <UART_SetConfig+0x30e>
 80072de:	2304      	movs	r3, #4
 80072e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e4:	e04b      	b.n	800737e <UART_SetConfig+0x30e>
 80072e6:	2308      	movs	r3, #8
 80072e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ec:	e047      	b.n	800737e <UART_SetConfig+0x30e>
 80072ee:	2310      	movs	r3, #16
 80072f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f4:	bf00      	nop
 80072f6:	e042      	b.n	800737e <UART_SetConfig+0x30e>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a17      	ldr	r2, [pc, #92]	; (800735c <UART_SetConfig+0x2ec>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d13a      	bne.n	8007378 <UART_SetConfig+0x308>
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <UART_SetConfig+0x2f4>)
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800730c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007310:	d014      	beq.n	800733c <UART_SetConfig+0x2cc>
 8007312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007316:	d802      	bhi.n	800731e <UART_SetConfig+0x2ae>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <UART_SetConfig+0x2bc>
 800731c:	e016      	b.n	800734c <UART_SetConfig+0x2dc>
 800731e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007322:	d007      	beq.n	8007334 <UART_SetConfig+0x2c4>
 8007324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007328:	d00c      	beq.n	8007344 <UART_SetConfig+0x2d4>
 800732a:	e00f      	b.n	800734c <UART_SetConfig+0x2dc>
 800732c:	2300      	movs	r3, #0
 800732e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007332:	e024      	b.n	800737e <UART_SetConfig+0x30e>
 8007334:	2302      	movs	r3, #2
 8007336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733a:	e020      	b.n	800737e <UART_SetConfig+0x30e>
 800733c:	2304      	movs	r3, #4
 800733e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007342:	e01c      	b.n	800737e <UART_SetConfig+0x30e>
 8007344:	2308      	movs	r3, #8
 8007346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800734a:	e018      	b.n	800737e <UART_SetConfig+0x30e>
 800734c:	2310      	movs	r3, #16
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007352:	bf00      	nop
 8007354:	e013      	b.n	800737e <UART_SetConfig+0x30e>
 8007356:	bf00      	nop
 8007358:	cfff69f3 	.word	0xcfff69f3
 800735c:	40008000 	.word	0x40008000
 8007360:	40013800 	.word	0x40013800
 8007364:	40021000 	.word	0x40021000
 8007368:	40004400 	.word	0x40004400
 800736c:	40004800 	.word	0x40004800
 8007370:	40004c00 	.word	0x40004c00
 8007374:	40005000 	.word	0x40005000
 8007378:	2310      	movs	r3, #16
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a86      	ldr	r2, [pc, #536]	; (800759c <UART_SetConfig+0x52c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	f040 8422 	bne.w	8007bce <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800738a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800738e:	2b08      	cmp	r3, #8
 8007390:	f200 8173 	bhi.w	800767a <UART_SetConfig+0x60a>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <UART_SetConfig+0x32c>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	0800767b 	.word	0x0800767b
 80073a4:	08007463 	.word	0x08007463
 80073a8:	0800767b 	.word	0x0800767b
 80073ac:	080074fb 	.word	0x080074fb
 80073b0:	0800767b 	.word	0x0800767b
 80073b4:	0800767b 	.word	0x0800767b
 80073b8:	0800767b 	.word	0x0800767b
 80073bc:	080075cd 	.word	0x080075cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073c0:	f7fe fb5c 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80073c4:	4602      	mov	r2, r0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d044      	beq.n	8007458 <UART_SetConfig+0x3e8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d03e      	beq.n	8007454 <UART_SetConfig+0x3e4>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d038      	beq.n	8007450 <UART_SetConfig+0x3e0>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d032      	beq.n	800744c <UART_SetConfig+0x3dc>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d02c      	beq.n	8007448 <UART_SetConfig+0x3d8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	2b05      	cmp	r3, #5
 80073f4:	d026      	beq.n	8007444 <UART_SetConfig+0x3d4>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	2b06      	cmp	r3, #6
 80073fc:	d020      	beq.n	8007440 <UART_SetConfig+0x3d0>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	2b07      	cmp	r3, #7
 8007404:	d01a      	beq.n	800743c <UART_SetConfig+0x3cc>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b08      	cmp	r3, #8
 800740c:	d014      	beq.n	8007438 <UART_SetConfig+0x3c8>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	2b09      	cmp	r3, #9
 8007414:	d00e      	beq.n	8007434 <UART_SetConfig+0x3c4>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	2b0a      	cmp	r3, #10
 800741c:	d008      	beq.n	8007430 <UART_SetConfig+0x3c0>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	2b0b      	cmp	r3, #11
 8007424:	d102      	bne.n	800742c <UART_SetConfig+0x3bc>
 8007426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800742a:	e016      	b.n	800745a <UART_SetConfig+0x3ea>
 800742c:	2301      	movs	r3, #1
 800742e:	e014      	b.n	800745a <UART_SetConfig+0x3ea>
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	e012      	b.n	800745a <UART_SetConfig+0x3ea>
 8007434:	2340      	movs	r3, #64	; 0x40
 8007436:	e010      	b.n	800745a <UART_SetConfig+0x3ea>
 8007438:	2320      	movs	r3, #32
 800743a:	e00e      	b.n	800745a <UART_SetConfig+0x3ea>
 800743c:	2310      	movs	r3, #16
 800743e:	e00c      	b.n	800745a <UART_SetConfig+0x3ea>
 8007440:	230c      	movs	r3, #12
 8007442:	e00a      	b.n	800745a <UART_SetConfig+0x3ea>
 8007444:	230a      	movs	r3, #10
 8007446:	e008      	b.n	800745a <UART_SetConfig+0x3ea>
 8007448:	2308      	movs	r3, #8
 800744a:	e006      	b.n	800745a <UART_SetConfig+0x3ea>
 800744c:	2306      	movs	r3, #6
 800744e:	e004      	b.n	800745a <UART_SetConfig+0x3ea>
 8007450:	2304      	movs	r3, #4
 8007452:	e002      	b.n	800745a <UART_SetConfig+0x3ea>
 8007454:	2302      	movs	r3, #2
 8007456:	e000      	b.n	800745a <UART_SetConfig+0x3ea>
 8007458:	2301      	movs	r3, #1
 800745a:	fbb2 f3f3 	udiv	r3, r2, r3
 800745e:	617b      	str	r3, [r7, #20]
        break;
 8007460:	e10e      	b.n	8007680 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	d044      	beq.n	80074f4 <UART_SetConfig+0x484>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b01      	cmp	r3, #1
 8007470:	d03e      	beq.n	80074f0 <UART_SetConfig+0x480>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b02      	cmp	r3, #2
 8007478:	d038      	beq.n	80074ec <UART_SetConfig+0x47c>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b03      	cmp	r3, #3
 8007480:	d032      	beq.n	80074e8 <UART_SetConfig+0x478>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b04      	cmp	r3, #4
 8007488:	d02c      	beq.n	80074e4 <UART_SetConfig+0x474>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	2b05      	cmp	r3, #5
 8007490:	d026      	beq.n	80074e0 <UART_SetConfig+0x470>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b06      	cmp	r3, #6
 8007498:	d020      	beq.n	80074dc <UART_SetConfig+0x46c>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	2b07      	cmp	r3, #7
 80074a0:	d01a      	beq.n	80074d8 <UART_SetConfig+0x468>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b08      	cmp	r3, #8
 80074a8:	d014      	beq.n	80074d4 <UART_SetConfig+0x464>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d00e      	beq.n	80074d0 <UART_SetConfig+0x460>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b0a      	cmp	r3, #10
 80074b8:	d008      	beq.n	80074cc <UART_SetConfig+0x45c>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	2b0b      	cmp	r3, #11
 80074c0:	d102      	bne.n	80074c8 <UART_SetConfig+0x458>
 80074c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80074c6:	e016      	b.n	80074f6 <UART_SetConfig+0x486>
 80074c8:	4b35      	ldr	r3, [pc, #212]	; (80075a0 <UART_SetConfig+0x530>)
 80074ca:	e014      	b.n	80074f6 <UART_SetConfig+0x486>
 80074cc:	4b35      	ldr	r3, [pc, #212]	; (80075a4 <UART_SetConfig+0x534>)
 80074ce:	e012      	b.n	80074f6 <UART_SetConfig+0x486>
 80074d0:	4b35      	ldr	r3, [pc, #212]	; (80075a8 <UART_SetConfig+0x538>)
 80074d2:	e010      	b.n	80074f6 <UART_SetConfig+0x486>
 80074d4:	4b35      	ldr	r3, [pc, #212]	; (80075ac <UART_SetConfig+0x53c>)
 80074d6:	e00e      	b.n	80074f6 <UART_SetConfig+0x486>
 80074d8:	4b35      	ldr	r3, [pc, #212]	; (80075b0 <UART_SetConfig+0x540>)
 80074da:	e00c      	b.n	80074f6 <UART_SetConfig+0x486>
 80074dc:	4b35      	ldr	r3, [pc, #212]	; (80075b4 <UART_SetConfig+0x544>)
 80074de:	e00a      	b.n	80074f6 <UART_SetConfig+0x486>
 80074e0:	4b35      	ldr	r3, [pc, #212]	; (80075b8 <UART_SetConfig+0x548>)
 80074e2:	e008      	b.n	80074f6 <UART_SetConfig+0x486>
 80074e4:	4b35      	ldr	r3, [pc, #212]	; (80075bc <UART_SetConfig+0x54c>)
 80074e6:	e006      	b.n	80074f6 <UART_SetConfig+0x486>
 80074e8:	4b35      	ldr	r3, [pc, #212]	; (80075c0 <UART_SetConfig+0x550>)
 80074ea:	e004      	b.n	80074f6 <UART_SetConfig+0x486>
 80074ec:	4b35      	ldr	r3, [pc, #212]	; (80075c4 <UART_SetConfig+0x554>)
 80074ee:	e002      	b.n	80074f6 <UART_SetConfig+0x486>
 80074f0:	4b35      	ldr	r3, [pc, #212]	; (80075c8 <UART_SetConfig+0x558>)
 80074f2:	e000      	b.n	80074f6 <UART_SetConfig+0x486>
 80074f4:	4b2a      	ldr	r3, [pc, #168]	; (80075a0 <UART_SetConfig+0x530>)
 80074f6:	617b      	str	r3, [r7, #20]
        break;
 80074f8:	e0c2      	b.n	8007680 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074fa:	f7fe fa51 	bl	80059a0 <HAL_RCC_GetSysClockFreq>
 80074fe:	4602      	mov	r2, r0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b00      	cmp	r3, #0
 8007506:	d044      	beq.n	8007592 <UART_SetConfig+0x522>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b01      	cmp	r3, #1
 800750e:	d03e      	beq.n	800758e <UART_SetConfig+0x51e>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	2b02      	cmp	r3, #2
 8007516:	d038      	beq.n	800758a <UART_SetConfig+0x51a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b03      	cmp	r3, #3
 800751e:	d032      	beq.n	8007586 <UART_SetConfig+0x516>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	2b04      	cmp	r3, #4
 8007526:	d02c      	beq.n	8007582 <UART_SetConfig+0x512>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b05      	cmp	r3, #5
 800752e:	d026      	beq.n	800757e <UART_SetConfig+0x50e>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2b06      	cmp	r3, #6
 8007536:	d020      	beq.n	800757a <UART_SetConfig+0x50a>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b07      	cmp	r3, #7
 800753e:	d01a      	beq.n	8007576 <UART_SetConfig+0x506>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	2b08      	cmp	r3, #8
 8007546:	d014      	beq.n	8007572 <UART_SetConfig+0x502>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	2b09      	cmp	r3, #9
 800754e:	d00e      	beq.n	800756e <UART_SetConfig+0x4fe>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2b0a      	cmp	r3, #10
 8007556:	d008      	beq.n	800756a <UART_SetConfig+0x4fa>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	2b0b      	cmp	r3, #11
 800755e:	d102      	bne.n	8007566 <UART_SetConfig+0x4f6>
 8007560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007564:	e016      	b.n	8007594 <UART_SetConfig+0x524>
 8007566:	2301      	movs	r3, #1
 8007568:	e014      	b.n	8007594 <UART_SetConfig+0x524>
 800756a:	2380      	movs	r3, #128	; 0x80
 800756c:	e012      	b.n	8007594 <UART_SetConfig+0x524>
 800756e:	2340      	movs	r3, #64	; 0x40
 8007570:	e010      	b.n	8007594 <UART_SetConfig+0x524>
 8007572:	2320      	movs	r3, #32
 8007574:	e00e      	b.n	8007594 <UART_SetConfig+0x524>
 8007576:	2310      	movs	r3, #16
 8007578:	e00c      	b.n	8007594 <UART_SetConfig+0x524>
 800757a:	230c      	movs	r3, #12
 800757c:	e00a      	b.n	8007594 <UART_SetConfig+0x524>
 800757e:	230a      	movs	r3, #10
 8007580:	e008      	b.n	8007594 <UART_SetConfig+0x524>
 8007582:	2308      	movs	r3, #8
 8007584:	e006      	b.n	8007594 <UART_SetConfig+0x524>
 8007586:	2306      	movs	r3, #6
 8007588:	e004      	b.n	8007594 <UART_SetConfig+0x524>
 800758a:	2304      	movs	r3, #4
 800758c:	e002      	b.n	8007594 <UART_SetConfig+0x524>
 800758e:	2302      	movs	r3, #2
 8007590:	e000      	b.n	8007594 <UART_SetConfig+0x524>
 8007592:	2301      	movs	r3, #1
 8007594:	fbb2 f3f3 	udiv	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]
        break;
 800759a:	e071      	b.n	8007680 <UART_SetConfig+0x610>
 800759c:	40008000 	.word	0x40008000
 80075a0:	00f42400 	.word	0x00f42400
 80075a4:	0001e848 	.word	0x0001e848
 80075a8:	0003d090 	.word	0x0003d090
 80075ac:	0007a120 	.word	0x0007a120
 80075b0:	000f4240 	.word	0x000f4240
 80075b4:	00145855 	.word	0x00145855
 80075b8:	00186a00 	.word	0x00186a00
 80075bc:	001e8480 	.word	0x001e8480
 80075c0:	0028b0aa 	.word	0x0028b0aa
 80075c4:	003d0900 	.word	0x003d0900
 80075c8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d04e      	beq.n	8007672 <UART_SetConfig+0x602>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d047      	beq.n	800766c <UART_SetConfig+0x5fc>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d040      	beq.n	8007666 <UART_SetConfig+0x5f6>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d039      	beq.n	8007660 <UART_SetConfig+0x5f0>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d032      	beq.n	800765a <UART_SetConfig+0x5ea>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2b05      	cmp	r3, #5
 80075fa:	d02b      	beq.n	8007654 <UART_SetConfig+0x5e4>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	2b06      	cmp	r3, #6
 8007602:	d024      	beq.n	800764e <UART_SetConfig+0x5de>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	2b07      	cmp	r3, #7
 800760a:	d01d      	beq.n	8007648 <UART_SetConfig+0x5d8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	2b08      	cmp	r3, #8
 8007612:	d016      	beq.n	8007642 <UART_SetConfig+0x5d2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	2b09      	cmp	r3, #9
 800761a:	d00f      	beq.n	800763c <UART_SetConfig+0x5cc>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2b0a      	cmp	r3, #10
 8007622:	d008      	beq.n	8007636 <UART_SetConfig+0x5c6>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	2b0b      	cmp	r3, #11
 800762a:	d101      	bne.n	8007630 <UART_SetConfig+0x5c0>
 800762c:	2380      	movs	r3, #128	; 0x80
 800762e:	e022      	b.n	8007676 <UART_SetConfig+0x606>
 8007630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007634:	e01f      	b.n	8007676 <UART_SetConfig+0x606>
 8007636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800763a:	e01c      	b.n	8007676 <UART_SetConfig+0x606>
 800763c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007640:	e019      	b.n	8007676 <UART_SetConfig+0x606>
 8007642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007646:	e016      	b.n	8007676 <UART_SetConfig+0x606>
 8007648:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800764c:	e013      	b.n	8007676 <UART_SetConfig+0x606>
 800764e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007652:	e010      	b.n	8007676 <UART_SetConfig+0x606>
 8007654:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007658:	e00d      	b.n	8007676 <UART_SetConfig+0x606>
 800765a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800765e:	e00a      	b.n	8007676 <UART_SetConfig+0x606>
 8007660:	f241 5355 	movw	r3, #5461	; 0x1555
 8007664:	e007      	b.n	8007676 <UART_SetConfig+0x606>
 8007666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800766a:	e004      	b.n	8007676 <UART_SetConfig+0x606>
 800766c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007670:	e001      	b.n	8007676 <UART_SetConfig+0x606>
 8007672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007676:	617b      	str	r3, [r7, #20]
        break;
 8007678:	e002      	b.n	8007680 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	76fb      	strb	r3, [r7, #27]
        break;
 800767e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 86b7 	beq.w	80083f6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	4413      	add	r3, r2
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	429a      	cmp	r2, r3
 8007696:	d305      	bcc.n	80076a4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d903      	bls.n	80076ac <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	76fb      	strb	r3, [r7, #27]
 80076a8:	f000 bea5 	b.w	80083f6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80076ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	f200 8277 	bhi.w	8007ba4 <UART_SetConfig+0xb34>
 80076b6:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <UART_SetConfig+0x64c>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	08007ba5 	.word	0x08007ba5
 80076c4:	0800781f 	.word	0x0800781f
 80076c8:	08007ba5 	.word	0x08007ba5
 80076cc:	08007915 	.word	0x08007915
 80076d0:	08007ba5 	.word	0x08007ba5
 80076d4:	08007ba5 	.word	0x08007ba5
 80076d8:	08007ba5 	.word	0x08007ba5
 80076dc:	08007a53 	.word	0x08007a53
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80076e0:	f7fe f9cc 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80076e4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f04f 0100 	mov.w	r1, #0
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d067      	beq.n	80077c6 <UART_SetConfig+0x756>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d05e      	beq.n	80077bc <UART_SetConfig+0x74c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b02      	cmp	r3, #2
 8007704:	d055      	beq.n	80077b2 <UART_SetConfig+0x742>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	2b03      	cmp	r3, #3
 800770c:	d04c      	beq.n	80077a8 <UART_SetConfig+0x738>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	2b04      	cmp	r3, #4
 8007714:	d043      	beq.n	800779e <UART_SetConfig+0x72e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	2b05      	cmp	r3, #5
 800771c:	d03a      	beq.n	8007794 <UART_SetConfig+0x724>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	2b06      	cmp	r3, #6
 8007724:	d031      	beq.n	800778a <UART_SetConfig+0x71a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	2b07      	cmp	r3, #7
 800772c:	d028      	beq.n	8007780 <UART_SetConfig+0x710>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	2b08      	cmp	r3, #8
 8007734:	d01f      	beq.n	8007776 <UART_SetConfig+0x706>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	2b09      	cmp	r3, #9
 800773c:	d016      	beq.n	800776c <UART_SetConfig+0x6fc>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	2b0a      	cmp	r3, #10
 8007744:	d00d      	beq.n	8007762 <UART_SetConfig+0x6f2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	2b0b      	cmp	r3, #11
 800774c:	d104      	bne.n	8007758 <UART_SetConfig+0x6e8>
 800774e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007752:	f04f 0400 	mov.w	r4, #0
 8007756:	e03a      	b.n	80077ce <UART_SetConfig+0x75e>
 8007758:	f04f 0301 	mov.w	r3, #1
 800775c:	f04f 0400 	mov.w	r4, #0
 8007760:	e035      	b.n	80077ce <UART_SetConfig+0x75e>
 8007762:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007766:	f04f 0400 	mov.w	r4, #0
 800776a:	e030      	b.n	80077ce <UART_SetConfig+0x75e>
 800776c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007770:	f04f 0400 	mov.w	r4, #0
 8007774:	e02b      	b.n	80077ce <UART_SetConfig+0x75e>
 8007776:	f04f 0320 	mov.w	r3, #32
 800777a:	f04f 0400 	mov.w	r4, #0
 800777e:	e026      	b.n	80077ce <UART_SetConfig+0x75e>
 8007780:	f04f 0310 	mov.w	r3, #16
 8007784:	f04f 0400 	mov.w	r4, #0
 8007788:	e021      	b.n	80077ce <UART_SetConfig+0x75e>
 800778a:	f04f 030c 	mov.w	r3, #12
 800778e:	f04f 0400 	mov.w	r4, #0
 8007792:	e01c      	b.n	80077ce <UART_SetConfig+0x75e>
 8007794:	f04f 030a 	mov.w	r3, #10
 8007798:	f04f 0400 	mov.w	r4, #0
 800779c:	e017      	b.n	80077ce <UART_SetConfig+0x75e>
 800779e:	f04f 0308 	mov.w	r3, #8
 80077a2:	f04f 0400 	mov.w	r4, #0
 80077a6:	e012      	b.n	80077ce <UART_SetConfig+0x75e>
 80077a8:	f04f 0306 	mov.w	r3, #6
 80077ac:	f04f 0400 	mov.w	r4, #0
 80077b0:	e00d      	b.n	80077ce <UART_SetConfig+0x75e>
 80077b2:	f04f 0304 	mov.w	r3, #4
 80077b6:	f04f 0400 	mov.w	r4, #0
 80077ba:	e008      	b.n	80077ce <UART_SetConfig+0x75e>
 80077bc:	f04f 0302 	mov.w	r3, #2
 80077c0:	f04f 0400 	mov.w	r4, #0
 80077c4:	e003      	b.n	80077ce <UART_SetConfig+0x75e>
 80077c6:	f04f 0301 	mov.w	r3, #1
 80077ca:	f04f 0400 	mov.w	r4, #0
 80077ce:	461a      	mov	r2, r3
 80077d0:	4623      	mov	r3, r4
 80077d2:	f7f8 fd21 	bl	8000218 <__aeabi_uldivmod>
 80077d6:	4603      	mov	r3, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	4619      	mov	r1, r3
 80077dc:	4622      	mov	r2, r4
 80077de:	f04f 0300 	mov.w	r3, #0
 80077e2:	f04f 0400 	mov.w	r4, #0
 80077e6:	0214      	lsls	r4, r2, #8
 80077e8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80077ec:	020b      	lsls	r3, r1, #8
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6852      	ldr	r2, [r2, #4]
 80077f2:	0852      	lsrs	r2, r2, #1
 80077f4:	4611      	mov	r1, r2
 80077f6:	f04f 0200 	mov.w	r2, #0
 80077fa:	eb13 0b01 	adds.w	fp, r3, r1
 80077fe:	eb44 0c02 	adc.w	ip, r4, r2
 8007802:	4658      	mov	r0, fp
 8007804:	4661      	mov	r1, ip
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f04f 0400 	mov.w	r4, #0
 800780e:	461a      	mov	r2, r3
 8007810:	4623      	mov	r3, r4
 8007812:	f7f8 fd01 	bl	8000218 <__aeabi_uldivmod>
 8007816:	4603      	mov	r3, r0
 8007818:	460c      	mov	r4, r1
 800781a:	61fb      	str	r3, [r7, #28]
            break;
 800781c:	e1c5      	b.n	8007baa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d05b      	beq.n	80078de <UART_SetConfig+0x86e>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b01      	cmp	r3, #1
 800782c:	d053      	beq.n	80078d6 <UART_SetConfig+0x866>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	2b02      	cmp	r3, #2
 8007834:	d04b      	beq.n	80078ce <UART_SetConfig+0x85e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	2b03      	cmp	r3, #3
 800783c:	d043      	beq.n	80078c6 <UART_SetConfig+0x856>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	2b04      	cmp	r3, #4
 8007844:	d03b      	beq.n	80078be <UART_SetConfig+0x84e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	2b05      	cmp	r3, #5
 800784c:	d033      	beq.n	80078b6 <UART_SetConfig+0x846>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	2b06      	cmp	r3, #6
 8007854:	d02b      	beq.n	80078ae <UART_SetConfig+0x83e>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	2b07      	cmp	r3, #7
 800785c:	d023      	beq.n	80078a6 <UART_SetConfig+0x836>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	2b08      	cmp	r3, #8
 8007864:	d01b      	beq.n	800789e <UART_SetConfig+0x82e>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	2b09      	cmp	r3, #9
 800786c:	d013      	beq.n	8007896 <UART_SetConfig+0x826>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b0a      	cmp	r3, #10
 8007874:	d00b      	beq.n	800788e <UART_SetConfig+0x81e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	2b0b      	cmp	r3, #11
 800787c:	d103      	bne.n	8007886 <UART_SetConfig+0x816>
 800787e:	4bae      	ldr	r3, [pc, #696]	; (8007b38 <UART_SetConfig+0xac8>)
 8007880:	f04f 0400 	mov.w	r4, #0
 8007884:	e02e      	b.n	80078e4 <UART_SetConfig+0x874>
 8007886:	4bad      	ldr	r3, [pc, #692]	; (8007b3c <UART_SetConfig+0xacc>)
 8007888:	f04f 0400 	mov.w	r4, #0
 800788c:	e02a      	b.n	80078e4 <UART_SetConfig+0x874>
 800788e:	4bac      	ldr	r3, [pc, #688]	; (8007b40 <UART_SetConfig+0xad0>)
 8007890:	f04f 0400 	mov.w	r4, #0
 8007894:	e026      	b.n	80078e4 <UART_SetConfig+0x874>
 8007896:	4bab      	ldr	r3, [pc, #684]	; (8007b44 <UART_SetConfig+0xad4>)
 8007898:	f04f 0400 	mov.w	r4, #0
 800789c:	e022      	b.n	80078e4 <UART_SetConfig+0x874>
 800789e:	4baa      	ldr	r3, [pc, #680]	; (8007b48 <UART_SetConfig+0xad8>)
 80078a0:	f04f 0400 	mov.w	r4, #0
 80078a4:	e01e      	b.n	80078e4 <UART_SetConfig+0x874>
 80078a6:	4ba9      	ldr	r3, [pc, #676]	; (8007b4c <UART_SetConfig+0xadc>)
 80078a8:	f04f 0400 	mov.w	r4, #0
 80078ac:	e01a      	b.n	80078e4 <UART_SetConfig+0x874>
 80078ae:	a49e      	add	r4, pc, #632	; (adr r4, 8007b28 <UART_SetConfig+0xab8>)
 80078b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80078b4:	e016      	b.n	80078e4 <UART_SetConfig+0x874>
 80078b6:	4ba6      	ldr	r3, [pc, #664]	; (8007b50 <UART_SetConfig+0xae0>)
 80078b8:	f04f 0400 	mov.w	r4, #0
 80078bc:	e012      	b.n	80078e4 <UART_SetConfig+0x874>
 80078be:	4ba5      	ldr	r3, [pc, #660]	; (8007b54 <UART_SetConfig+0xae4>)
 80078c0:	f04f 0400 	mov.w	r4, #0
 80078c4:	e00e      	b.n	80078e4 <UART_SetConfig+0x874>
 80078c6:	a49a      	add	r4, pc, #616	; (adr r4, 8007b30 <UART_SetConfig+0xac0>)
 80078c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80078cc:	e00a      	b.n	80078e4 <UART_SetConfig+0x874>
 80078ce:	4ba2      	ldr	r3, [pc, #648]	; (8007b58 <UART_SetConfig+0xae8>)
 80078d0:	f04f 0400 	mov.w	r4, #0
 80078d4:	e006      	b.n	80078e4 <UART_SetConfig+0x874>
 80078d6:	4ba1      	ldr	r3, [pc, #644]	; (8007b5c <UART_SetConfig+0xaec>)
 80078d8:	f04f 0400 	mov.w	r4, #0
 80078dc:	e002      	b.n	80078e4 <UART_SetConfig+0x874>
 80078de:	4b97      	ldr	r3, [pc, #604]	; (8007b3c <UART_SetConfig+0xacc>)
 80078e0:	f04f 0400 	mov.w	r4, #0
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6852      	ldr	r2, [r2, #4]
 80078e8:	0852      	lsrs	r2, r2, #1
 80078ea:	4611      	mov	r1, r2
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	eb13 0b01 	adds.w	fp, r3, r1
 80078f4:	eb44 0c02 	adc.w	ip, r4, r2
 80078f8:	4658      	mov	r0, fp
 80078fa:	4661      	mov	r1, ip
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f04f 0400 	mov.w	r4, #0
 8007904:	461a      	mov	r2, r3
 8007906:	4623      	mov	r3, r4
 8007908:	f7f8 fc86 	bl	8000218 <__aeabi_uldivmod>
 800790c:	4603      	mov	r3, r0
 800790e:	460c      	mov	r4, r1
 8007910:	61fb      	str	r3, [r7, #28]
            break;
 8007912:	e14a      	b.n	8007baa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007914:	f7fe f844 	bl	80059a0 <HAL_RCC_GetSysClockFreq>
 8007918:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	4618      	mov	r0, r3
 800791e:	f04f 0100 	mov.w	r1, #0
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d067      	beq.n	80079fa <UART_SetConfig+0x98a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b01      	cmp	r3, #1
 8007930:	d05e      	beq.n	80079f0 <UART_SetConfig+0x980>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2b02      	cmp	r3, #2
 8007938:	d055      	beq.n	80079e6 <UART_SetConfig+0x976>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b03      	cmp	r3, #3
 8007940:	d04c      	beq.n	80079dc <UART_SetConfig+0x96c>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b04      	cmp	r3, #4
 8007948:	d043      	beq.n	80079d2 <UART_SetConfig+0x962>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	2b05      	cmp	r3, #5
 8007950:	d03a      	beq.n	80079c8 <UART_SetConfig+0x958>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	2b06      	cmp	r3, #6
 8007958:	d031      	beq.n	80079be <UART_SetConfig+0x94e>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	2b07      	cmp	r3, #7
 8007960:	d028      	beq.n	80079b4 <UART_SetConfig+0x944>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	2b08      	cmp	r3, #8
 8007968:	d01f      	beq.n	80079aa <UART_SetConfig+0x93a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	2b09      	cmp	r3, #9
 8007970:	d016      	beq.n	80079a0 <UART_SetConfig+0x930>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	2b0a      	cmp	r3, #10
 8007978:	d00d      	beq.n	8007996 <UART_SetConfig+0x926>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	2b0b      	cmp	r3, #11
 8007980:	d104      	bne.n	800798c <UART_SetConfig+0x91c>
 8007982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007986:	f04f 0400 	mov.w	r4, #0
 800798a:	e03a      	b.n	8007a02 <UART_SetConfig+0x992>
 800798c:	f04f 0301 	mov.w	r3, #1
 8007990:	f04f 0400 	mov.w	r4, #0
 8007994:	e035      	b.n	8007a02 <UART_SetConfig+0x992>
 8007996:	f04f 0380 	mov.w	r3, #128	; 0x80
 800799a:	f04f 0400 	mov.w	r4, #0
 800799e:	e030      	b.n	8007a02 <UART_SetConfig+0x992>
 80079a0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079a4:	f04f 0400 	mov.w	r4, #0
 80079a8:	e02b      	b.n	8007a02 <UART_SetConfig+0x992>
 80079aa:	f04f 0320 	mov.w	r3, #32
 80079ae:	f04f 0400 	mov.w	r4, #0
 80079b2:	e026      	b.n	8007a02 <UART_SetConfig+0x992>
 80079b4:	f04f 0310 	mov.w	r3, #16
 80079b8:	f04f 0400 	mov.w	r4, #0
 80079bc:	e021      	b.n	8007a02 <UART_SetConfig+0x992>
 80079be:	f04f 030c 	mov.w	r3, #12
 80079c2:	f04f 0400 	mov.w	r4, #0
 80079c6:	e01c      	b.n	8007a02 <UART_SetConfig+0x992>
 80079c8:	f04f 030a 	mov.w	r3, #10
 80079cc:	f04f 0400 	mov.w	r4, #0
 80079d0:	e017      	b.n	8007a02 <UART_SetConfig+0x992>
 80079d2:	f04f 0308 	mov.w	r3, #8
 80079d6:	f04f 0400 	mov.w	r4, #0
 80079da:	e012      	b.n	8007a02 <UART_SetConfig+0x992>
 80079dc:	f04f 0306 	mov.w	r3, #6
 80079e0:	f04f 0400 	mov.w	r4, #0
 80079e4:	e00d      	b.n	8007a02 <UART_SetConfig+0x992>
 80079e6:	f04f 0304 	mov.w	r3, #4
 80079ea:	f04f 0400 	mov.w	r4, #0
 80079ee:	e008      	b.n	8007a02 <UART_SetConfig+0x992>
 80079f0:	f04f 0302 	mov.w	r3, #2
 80079f4:	f04f 0400 	mov.w	r4, #0
 80079f8:	e003      	b.n	8007a02 <UART_SetConfig+0x992>
 80079fa:	f04f 0301 	mov.w	r3, #1
 80079fe:	f04f 0400 	mov.w	r4, #0
 8007a02:	461a      	mov	r2, r3
 8007a04:	4623      	mov	r3, r4
 8007a06:	f7f8 fc07 	bl	8000218 <__aeabi_uldivmod>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4622      	mov	r2, r4
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	f04f 0400 	mov.w	r4, #0
 8007a1a:	0214      	lsls	r4, r2, #8
 8007a1c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007a20:	020b      	lsls	r3, r1, #8
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6852      	ldr	r2, [r2, #4]
 8007a26:	0852      	lsrs	r2, r2, #1
 8007a28:	4611      	mov	r1, r2
 8007a2a:	f04f 0200 	mov.w	r2, #0
 8007a2e:	eb13 0b01 	adds.w	fp, r3, r1
 8007a32:	eb44 0c02 	adc.w	ip, r4, r2
 8007a36:	4658      	mov	r0, fp
 8007a38:	4661      	mov	r1, ip
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f04f 0400 	mov.w	r4, #0
 8007a42:	461a      	mov	r2, r3
 8007a44:	4623      	mov	r3, r4
 8007a46:	f7f8 fbe7 	bl	8000218 <__aeabi_uldivmod>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	61fb      	str	r3, [r7, #28]
            break;
 8007a50:	e0ab      	b.n	8007baa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 8088 	beq.w	8007b6c <UART_SetConfig+0xafc>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d05b      	beq.n	8007b1c <UART_SetConfig+0xaac>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d052      	beq.n	8007b12 <UART_SetConfig+0xaa2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d04a      	beq.n	8007b0a <UART_SetConfig+0xa9a>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d041      	beq.n	8007b00 <UART_SetConfig+0xa90>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	2b05      	cmp	r3, #5
 8007a82:	d039      	beq.n	8007af8 <UART_SetConfig+0xa88>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b06      	cmp	r3, #6
 8007a8a:	d031      	beq.n	8007af0 <UART_SetConfig+0xa80>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	2b07      	cmp	r3, #7
 8007a92:	d028      	beq.n	8007ae6 <UART_SetConfig+0xa76>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d01f      	beq.n	8007adc <UART_SetConfig+0xa6c>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2b09      	cmp	r3, #9
 8007aa2:	d016      	beq.n	8007ad2 <UART_SetConfig+0xa62>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b0a      	cmp	r3, #10
 8007aaa:	d00d      	beq.n	8007ac8 <UART_SetConfig+0xa58>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b0b      	cmp	r3, #11
 8007ab2:	d104      	bne.n	8007abe <UART_SetConfig+0xa4e>
 8007ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ab8:	f04f 0400 	mov.w	r4, #0
 8007abc:	e05a      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007abe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ac2:	f04f 0400 	mov.w	r4, #0
 8007ac6:	e055      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007acc:	f04f 0400 	mov.w	r4, #0
 8007ad0:	e050      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ad6:	f04f 0400 	mov.w	r4, #0
 8007ada:	e04b      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007adc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ae0:	f04f 0400 	mov.w	r4, #0
 8007ae4:	e046      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007ae6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007aea:	f04f 0400 	mov.w	r4, #0
 8007aee:	e041      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007af0:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <UART_SetConfig+0xaf0>)
 8007af2:	f04f 0400 	mov.w	r4, #0
 8007af6:	e03d      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007af8:	4b1a      	ldr	r3, [pc, #104]	; (8007b64 <UART_SetConfig+0xaf4>)
 8007afa:	f04f 0400 	mov.w	r4, #0
 8007afe:	e039      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007b00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b04:	f04f 0400 	mov.w	r4, #0
 8007b08:	e034      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007b0a:	4b17      	ldr	r3, [pc, #92]	; (8007b68 <UART_SetConfig+0xaf8>)
 8007b0c:	f04f 0400 	mov.w	r4, #0
 8007b10:	e030      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007b12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b16:	f04f 0400 	mov.w	r4, #0
 8007b1a:	e02b      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007b1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b20:	f04f 0400 	mov.w	r4, #0
 8007b24:	e026      	b.n	8007b74 <UART_SetConfig+0xb04>
 8007b26:	bf00      	nop
 8007b28:	14585500 	.word	0x14585500
 8007b2c:	00000000 	.word	0x00000000
 8007b30:	28b0aa00 	.word	0x28b0aa00
 8007b34:	00000000 	.word	0x00000000
 8007b38:	00f42400 	.word	0x00f42400
 8007b3c:	f4240000 	.word	0xf4240000
 8007b40:	01e84800 	.word	0x01e84800
 8007b44:	03d09000 	.word	0x03d09000
 8007b48:	07a12000 	.word	0x07a12000
 8007b4c:	0f424000 	.word	0x0f424000
 8007b50:	186a0000 	.word	0x186a0000
 8007b54:	1e848000 	.word	0x1e848000
 8007b58:	3d090000 	.word	0x3d090000
 8007b5c:	7a120000 	.word	0x7a120000
 8007b60:	000aaa00 	.word	0x000aaa00
 8007b64:	000ccc00 	.word	0x000ccc00
 8007b68:	00155500 	.word	0x00155500
 8007b6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b70:	f04f 0400 	mov.w	r4, #0
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6852      	ldr	r2, [r2, #4]
 8007b78:	0852      	lsrs	r2, r2, #1
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	eb13 0b01 	adds.w	fp, r3, r1
 8007b84:	eb44 0c02 	adc.w	ip, r4, r2
 8007b88:	4658      	mov	r0, fp
 8007b8a:	4661      	mov	r1, ip
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f04f 0400 	mov.w	r4, #0
 8007b94:	461a      	mov	r2, r3
 8007b96:	4623      	mov	r3, r4
 8007b98:	f7f8 fb3e 	bl	8000218 <__aeabi_uldivmod>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	61fb      	str	r3, [r7, #28]
            break;
 8007ba2:	e002      	b.n	8007baa <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	76fb      	strb	r3, [r7, #27]
            break;
 8007ba8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb0:	d309      	bcc.n	8007bc6 <UART_SetConfig+0xb56>
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bb8:	d205      	bcs.n	8007bc6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	60da      	str	r2, [r3, #12]
 8007bc2:	f000 bc18 	b.w	80083f6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	76fb      	strb	r3, [r7, #27]
 8007bca:	f000 bc14 	b.w	80083f6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd6:	f040 8204 	bne.w	8007fe2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8007bda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	f200 81df 	bhi.w	8007fa2 <UART_SetConfig+0xf32>
 8007be4:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <UART_SetConfig+0xb7c>)
 8007be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bea:	bf00      	nop
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007cc9 	.word	0x08007cc9
 8007bf4:	08007d81 	.word	0x08007d81
 8007bf8:	08007fa3 	.word	0x08007fa3
 8007bfc:	08007e29 	.word	0x08007e29
 8007c00:	08007fa3 	.word	0x08007fa3
 8007c04:	08007fa3 	.word	0x08007fa3
 8007c08:	08007fa3 	.word	0x08007fa3
 8007c0c:	08007ee1 	.word	0x08007ee1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c10:	f7fd ff34 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8007c14:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d044      	beq.n	8007ca8 <UART_SetConfig+0xc38>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d03e      	beq.n	8007ca4 <UART_SetConfig+0xc34>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d038      	beq.n	8007ca0 <UART_SetConfig+0xc30>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d032      	beq.n	8007c9c <UART_SetConfig+0xc2c>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d02c      	beq.n	8007c98 <UART_SetConfig+0xc28>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d026      	beq.n	8007c94 <UART_SetConfig+0xc24>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4a:	2b06      	cmp	r3, #6
 8007c4c:	d020      	beq.n	8007c90 <UART_SetConfig+0xc20>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	2b07      	cmp	r3, #7
 8007c54:	d01a      	beq.n	8007c8c <UART_SetConfig+0xc1c>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	2b08      	cmp	r3, #8
 8007c5c:	d014      	beq.n	8007c88 <UART_SetConfig+0xc18>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	2b09      	cmp	r3, #9
 8007c64:	d00e      	beq.n	8007c84 <UART_SetConfig+0xc14>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	2b0a      	cmp	r3, #10
 8007c6c:	d008      	beq.n	8007c80 <UART_SetConfig+0xc10>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	2b0b      	cmp	r3, #11
 8007c74:	d102      	bne.n	8007c7c <UART_SetConfig+0xc0c>
 8007c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c7a:	e016      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e014      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007c80:	2380      	movs	r3, #128	; 0x80
 8007c82:	e012      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007c84:	2340      	movs	r3, #64	; 0x40
 8007c86:	e010      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007c88:	2320      	movs	r3, #32
 8007c8a:	e00e      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	e00c      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007c90:	230c      	movs	r3, #12
 8007c92:	e00a      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007c94:	230a      	movs	r3, #10
 8007c96:	e008      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	e006      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007c9c:	2306      	movs	r3, #6
 8007c9e:	e004      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	e002      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e000      	b.n	8007caa <UART_SetConfig+0xc3a>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb0:	005a      	lsls	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	441a      	add	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	61fb      	str	r3, [r7, #28]
        break;
 8007cc6:	e16f      	b.n	8007fa8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cc8:	f7fd feee 	bl	8005aa8 <HAL_RCC_GetPCLK2Freq>
 8007ccc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d044      	beq.n	8007d60 <UART_SetConfig+0xcf0>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d03e      	beq.n	8007d5c <UART_SetConfig+0xcec>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d038      	beq.n	8007d58 <UART_SetConfig+0xce8>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d032      	beq.n	8007d54 <UART_SetConfig+0xce4>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d02c      	beq.n	8007d50 <UART_SetConfig+0xce0>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	d026      	beq.n	8007d4c <UART_SetConfig+0xcdc>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	2b06      	cmp	r3, #6
 8007d04:	d020      	beq.n	8007d48 <UART_SetConfig+0xcd8>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	2b07      	cmp	r3, #7
 8007d0c:	d01a      	beq.n	8007d44 <UART_SetConfig+0xcd4>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	2b08      	cmp	r3, #8
 8007d14:	d014      	beq.n	8007d40 <UART_SetConfig+0xcd0>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	2b09      	cmp	r3, #9
 8007d1c:	d00e      	beq.n	8007d3c <UART_SetConfig+0xccc>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b0a      	cmp	r3, #10
 8007d24:	d008      	beq.n	8007d38 <UART_SetConfig+0xcc8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	2b0b      	cmp	r3, #11
 8007d2c:	d102      	bne.n	8007d34 <UART_SetConfig+0xcc4>
 8007d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d32:	e016      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e014      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	e012      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d3c:	2340      	movs	r3, #64	; 0x40
 8007d3e:	e010      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d40:	2320      	movs	r3, #32
 8007d42:	e00e      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d44:	2310      	movs	r3, #16
 8007d46:	e00c      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	e00a      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d4c:	230a      	movs	r3, #10
 8007d4e:	e008      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d50:	2308      	movs	r3, #8
 8007d52:	e006      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d54:	2306      	movs	r3, #6
 8007d56:	e004      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	e002      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e000      	b.n	8007d62 <UART_SetConfig+0xcf2>
 8007d60:	2301      	movs	r3, #1
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d68:	005a      	lsls	r2, r3, #1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	441a      	add	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	61fb      	str	r3, [r7, #28]
        break;
 8007d7e:	e113      	b.n	8007fa8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d043      	beq.n	8007e10 <UART_SetConfig+0xda0>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d03d      	beq.n	8007e0c <UART_SetConfig+0xd9c>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d037      	beq.n	8007e08 <UART_SetConfig+0xd98>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d031      	beq.n	8007e04 <UART_SetConfig+0xd94>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d02b      	beq.n	8007e00 <UART_SetConfig+0xd90>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	2b05      	cmp	r3, #5
 8007dae:	d025      	beq.n	8007dfc <UART_SetConfig+0xd8c>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	2b06      	cmp	r3, #6
 8007db6:	d01f      	beq.n	8007df8 <UART_SetConfig+0xd88>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	2b07      	cmp	r3, #7
 8007dbe:	d019      	beq.n	8007df4 <UART_SetConfig+0xd84>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d013      	beq.n	8007df0 <UART_SetConfig+0xd80>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d00d      	beq.n	8007dec <UART_SetConfig+0xd7c>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	2b0a      	cmp	r3, #10
 8007dd6:	d007      	beq.n	8007de8 <UART_SetConfig+0xd78>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	2b0b      	cmp	r3, #11
 8007dde:	d101      	bne.n	8007de4 <UART_SetConfig+0xd74>
 8007de0:	4b8d      	ldr	r3, [pc, #564]	; (8008018 <UART_SetConfig+0xfa8>)
 8007de2:	e016      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007de4:	4b8d      	ldr	r3, [pc, #564]	; (800801c <UART_SetConfig+0xfac>)
 8007de6:	e014      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007de8:	4b8d      	ldr	r3, [pc, #564]	; (8008020 <UART_SetConfig+0xfb0>)
 8007dea:	e012      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007dec:	4b8d      	ldr	r3, [pc, #564]	; (8008024 <UART_SetConfig+0xfb4>)
 8007dee:	e010      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007df0:	4b8d      	ldr	r3, [pc, #564]	; (8008028 <UART_SetConfig+0xfb8>)
 8007df2:	e00e      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007df4:	4b8d      	ldr	r3, [pc, #564]	; (800802c <UART_SetConfig+0xfbc>)
 8007df6:	e00c      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007df8:	4b8d      	ldr	r3, [pc, #564]	; (8008030 <UART_SetConfig+0xfc0>)
 8007dfa:	e00a      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007dfc:	4b8d      	ldr	r3, [pc, #564]	; (8008034 <UART_SetConfig+0xfc4>)
 8007dfe:	e008      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007e00:	4b8d      	ldr	r3, [pc, #564]	; (8008038 <UART_SetConfig+0xfc8>)
 8007e02:	e006      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007e04:	4b8d      	ldr	r3, [pc, #564]	; (800803c <UART_SetConfig+0xfcc>)
 8007e06:	e004      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007e08:	4b8d      	ldr	r3, [pc, #564]	; (8008040 <UART_SetConfig+0xfd0>)
 8007e0a:	e002      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007e0c:	4b8d      	ldr	r3, [pc, #564]	; (8008044 <UART_SetConfig+0xfd4>)
 8007e0e:	e000      	b.n	8007e12 <UART_SetConfig+0xda2>
 8007e10:	4b82      	ldr	r3, [pc, #520]	; (800801c <UART_SetConfig+0xfac>)
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6852      	ldr	r2, [r2, #4]
 8007e16:	0852      	lsrs	r2, r2, #1
 8007e18:	441a      	add	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	61fb      	str	r3, [r7, #28]
        break;
 8007e26:	e0bf      	b.n	8007fa8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e28:	f7fd fdba 	bl	80059a0 <HAL_RCC_GetSysClockFreq>
 8007e2c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d044      	beq.n	8007ec0 <UART_SetConfig+0xe50>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d03e      	beq.n	8007ebc <UART_SetConfig+0xe4c>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d038      	beq.n	8007eb8 <UART_SetConfig+0xe48>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d032      	beq.n	8007eb4 <UART_SetConfig+0xe44>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d02c      	beq.n	8007eb0 <UART_SetConfig+0xe40>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b05      	cmp	r3, #5
 8007e5c:	d026      	beq.n	8007eac <UART_SetConfig+0xe3c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b06      	cmp	r3, #6
 8007e64:	d020      	beq.n	8007ea8 <UART_SetConfig+0xe38>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b07      	cmp	r3, #7
 8007e6c:	d01a      	beq.n	8007ea4 <UART_SetConfig+0xe34>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	2b08      	cmp	r3, #8
 8007e74:	d014      	beq.n	8007ea0 <UART_SetConfig+0xe30>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d00e      	beq.n	8007e9c <UART_SetConfig+0xe2c>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b0a      	cmp	r3, #10
 8007e84:	d008      	beq.n	8007e98 <UART_SetConfig+0xe28>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b0b      	cmp	r3, #11
 8007e8c:	d102      	bne.n	8007e94 <UART_SetConfig+0xe24>
 8007e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e92:	e016      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e014      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007e98:	2380      	movs	r3, #128	; 0x80
 8007e9a:	e012      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007e9c:	2340      	movs	r3, #64	; 0x40
 8007e9e:	e010      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	e00e      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007ea4:	2310      	movs	r3, #16
 8007ea6:	e00c      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	e00a      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007eac:	230a      	movs	r3, #10
 8007eae:	e008      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	e006      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007eb4:	2306      	movs	r3, #6
 8007eb6:	e004      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007eb8:	2304      	movs	r3, #4
 8007eba:	e002      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e000      	b.n	8007ec2 <UART_SetConfig+0xe52>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec8:	005a      	lsls	r2, r3, #1
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	085b      	lsrs	r3, r3, #1
 8007ed0:	441a      	add	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	61fb      	str	r3, [r7, #28]
        break;
 8007ede:	e063      	b.n	8007fa8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d04f      	beq.n	8007f88 <UART_SetConfig+0xf18>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d048      	beq.n	8007f82 <UART_SetConfig+0xf12>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d041      	beq.n	8007f7c <UART_SetConfig+0xf0c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d03a      	beq.n	8007f76 <UART_SetConfig+0xf06>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d033      	beq.n	8007f70 <UART_SetConfig+0xf00>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	2b05      	cmp	r3, #5
 8007f0e:	d02c      	beq.n	8007f6a <UART_SetConfig+0xefa>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2b06      	cmp	r3, #6
 8007f16:	d025      	beq.n	8007f64 <UART_SetConfig+0xef4>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b07      	cmp	r3, #7
 8007f1e:	d01e      	beq.n	8007f5e <UART_SetConfig+0xeee>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d017      	beq.n	8007f58 <UART_SetConfig+0xee8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	2b09      	cmp	r3, #9
 8007f2e:	d010      	beq.n	8007f52 <UART_SetConfig+0xee2>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	2b0a      	cmp	r3, #10
 8007f36:	d009      	beq.n	8007f4c <UART_SetConfig+0xedc>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b0b      	cmp	r3, #11
 8007f3e:	d102      	bne.n	8007f46 <UART_SetConfig+0xed6>
 8007f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f44:	e022      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f4a:	e01f      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f50:	e01c      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f56:	e019      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f5c:	e016      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f62:	e013      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f64:	f241 5354 	movw	r3, #5460	; 0x1554
 8007f68:	e010      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f6a:	f641 1398 	movw	r3, #6552	; 0x1998
 8007f6e:	e00d      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f74:	e00a      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f76:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007f7a:	e007      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f80:	e004      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f86:	e001      	b.n	8007f8c <UART_SetConfig+0xf1c>
 8007f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	6852      	ldr	r2, [r2, #4]
 8007f90:	0852      	lsrs	r2, r2, #1
 8007f92:	441a      	add	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	61fb      	str	r3, [r7, #28]
        break;
 8007fa0:	e002      	b.n	8007fa8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	76fb      	strb	r3, [r7, #27]
        break;
 8007fa6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	2b0f      	cmp	r3, #15
 8007fac:	d916      	bls.n	8007fdc <UART_SetConfig+0xf6c>
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb4:	d212      	bcs.n	8007fdc <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f023 030f 	bic.w	r3, r3, #15
 8007fbe:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	89fa      	ldrh	r2, [r7, #14]
 8007fd8:	60da      	str	r2, [r3, #12]
 8007fda:	e20c      	b.n	80083f6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	76fb      	strb	r3, [r7, #27]
 8007fe0:	e209      	b.n	80083f6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8007fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fe6:	2b08      	cmp	r3, #8
 8007fe8:	f200 81f4 	bhi.w	80083d4 <UART_SetConfig+0x1364>
 8007fec:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <UART_SetConfig+0xf84>)
 8007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff2:	bf00      	nop
 8007ff4:	08008049 	.word	0x08008049
 8007ff8:	080080ff 	.word	0x080080ff
 8007ffc:	080081b5 	.word	0x080081b5
 8008000:	080083d5 	.word	0x080083d5
 8008004:	0800825f 	.word	0x0800825f
 8008008:	080083d5 	.word	0x080083d5
 800800c:	080083d5 	.word	0x080083d5
 8008010:	080083d5 	.word	0x080083d5
 8008014:	08008315 	.word	0x08008315
 8008018:	0001e848 	.word	0x0001e848
 800801c:	01e84800 	.word	0x01e84800
 8008020:	0003d090 	.word	0x0003d090
 8008024:	0007a120 	.word	0x0007a120
 8008028:	000f4240 	.word	0x000f4240
 800802c:	001e8480 	.word	0x001e8480
 8008030:	0028b0aa 	.word	0x0028b0aa
 8008034:	0030d400 	.word	0x0030d400
 8008038:	003d0900 	.word	0x003d0900
 800803c:	00516154 	.word	0x00516154
 8008040:	007a1200 	.word	0x007a1200
 8008044:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008048:	f7fd fd18 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 800804c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	2b00      	cmp	r3, #0
 8008054:	d044      	beq.n	80080e0 <UART_SetConfig+0x1070>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	2b01      	cmp	r3, #1
 800805c:	d03e      	beq.n	80080dc <UART_SetConfig+0x106c>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	2b02      	cmp	r3, #2
 8008064:	d038      	beq.n	80080d8 <UART_SetConfig+0x1068>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	2b03      	cmp	r3, #3
 800806c:	d032      	beq.n	80080d4 <UART_SetConfig+0x1064>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	2b04      	cmp	r3, #4
 8008074:	d02c      	beq.n	80080d0 <UART_SetConfig+0x1060>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	2b05      	cmp	r3, #5
 800807c:	d026      	beq.n	80080cc <UART_SetConfig+0x105c>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	2b06      	cmp	r3, #6
 8008084:	d020      	beq.n	80080c8 <UART_SetConfig+0x1058>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	2b07      	cmp	r3, #7
 800808c:	d01a      	beq.n	80080c4 <UART_SetConfig+0x1054>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	2b08      	cmp	r3, #8
 8008094:	d014      	beq.n	80080c0 <UART_SetConfig+0x1050>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	2b09      	cmp	r3, #9
 800809c:	d00e      	beq.n	80080bc <UART_SetConfig+0x104c>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2b0a      	cmp	r3, #10
 80080a4:	d008      	beq.n	80080b8 <UART_SetConfig+0x1048>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b0b      	cmp	r3, #11
 80080ac:	d102      	bne.n	80080b4 <UART_SetConfig+0x1044>
 80080ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080b2:	e016      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080b4:	2301      	movs	r3, #1
 80080b6:	e014      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	e012      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080bc:	2340      	movs	r3, #64	; 0x40
 80080be:	e010      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080c0:	2320      	movs	r3, #32
 80080c2:	e00e      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080c4:	2310      	movs	r3, #16
 80080c6:	e00c      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080c8:	230c      	movs	r3, #12
 80080ca:	e00a      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080cc:	230a      	movs	r3, #10
 80080ce:	e008      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080d0:	2308      	movs	r3, #8
 80080d2:	e006      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080d4:	2306      	movs	r3, #6
 80080d6:	e004      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080d8:	2304      	movs	r3, #4
 80080da:	e002      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080dc:	2302      	movs	r3, #2
 80080de:	e000      	b.n	80080e2 <UART_SetConfig+0x1072>
 80080e0:	2301      	movs	r3, #1
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	085b      	lsrs	r3, r3, #1
 80080ee:	441a      	add	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	61fb      	str	r3, [r7, #28]
        break;
 80080fc:	e16d      	b.n	80083da <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080fe:	f7fd fcd3 	bl	8005aa8 <HAL_RCC_GetPCLK2Freq>
 8008102:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	2b00      	cmp	r3, #0
 800810a:	d044      	beq.n	8008196 <UART_SetConfig+0x1126>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	2b01      	cmp	r3, #1
 8008112:	d03e      	beq.n	8008192 <UART_SetConfig+0x1122>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b02      	cmp	r3, #2
 800811a:	d038      	beq.n	800818e <UART_SetConfig+0x111e>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b03      	cmp	r3, #3
 8008122:	d032      	beq.n	800818a <UART_SetConfig+0x111a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	2b04      	cmp	r3, #4
 800812a:	d02c      	beq.n	8008186 <UART_SetConfig+0x1116>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b05      	cmp	r3, #5
 8008132:	d026      	beq.n	8008182 <UART_SetConfig+0x1112>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b06      	cmp	r3, #6
 800813a:	d020      	beq.n	800817e <UART_SetConfig+0x110e>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	2b07      	cmp	r3, #7
 8008142:	d01a      	beq.n	800817a <UART_SetConfig+0x110a>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	2b08      	cmp	r3, #8
 800814a:	d014      	beq.n	8008176 <UART_SetConfig+0x1106>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	2b09      	cmp	r3, #9
 8008152:	d00e      	beq.n	8008172 <UART_SetConfig+0x1102>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	2b0a      	cmp	r3, #10
 800815a:	d008      	beq.n	800816e <UART_SetConfig+0x10fe>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b0b      	cmp	r3, #11
 8008162:	d102      	bne.n	800816a <UART_SetConfig+0x10fa>
 8008164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008168:	e016      	b.n	8008198 <UART_SetConfig+0x1128>
 800816a:	2301      	movs	r3, #1
 800816c:	e014      	b.n	8008198 <UART_SetConfig+0x1128>
 800816e:	2380      	movs	r3, #128	; 0x80
 8008170:	e012      	b.n	8008198 <UART_SetConfig+0x1128>
 8008172:	2340      	movs	r3, #64	; 0x40
 8008174:	e010      	b.n	8008198 <UART_SetConfig+0x1128>
 8008176:	2320      	movs	r3, #32
 8008178:	e00e      	b.n	8008198 <UART_SetConfig+0x1128>
 800817a:	2310      	movs	r3, #16
 800817c:	e00c      	b.n	8008198 <UART_SetConfig+0x1128>
 800817e:	230c      	movs	r3, #12
 8008180:	e00a      	b.n	8008198 <UART_SetConfig+0x1128>
 8008182:	230a      	movs	r3, #10
 8008184:	e008      	b.n	8008198 <UART_SetConfig+0x1128>
 8008186:	2308      	movs	r3, #8
 8008188:	e006      	b.n	8008198 <UART_SetConfig+0x1128>
 800818a:	2306      	movs	r3, #6
 800818c:	e004      	b.n	8008198 <UART_SetConfig+0x1128>
 800818e:	2304      	movs	r3, #4
 8008190:	e002      	b.n	8008198 <UART_SetConfig+0x1128>
 8008192:	2302      	movs	r3, #2
 8008194:	e000      	b.n	8008198 <UART_SetConfig+0x1128>
 8008196:	2301      	movs	r3, #1
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	fbb2 f2f3 	udiv	r2, r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	441a      	add	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	61fb      	str	r3, [r7, #28]
        break;
 80081b2:	e112      	b.n	80083da <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d044      	beq.n	8008246 <UART_SetConfig+0x11d6>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d03e      	beq.n	8008242 <UART_SetConfig+0x11d2>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d038      	beq.n	800823e <UART_SetConfig+0x11ce>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d032      	beq.n	800823a <UART_SetConfig+0x11ca>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d02c      	beq.n	8008236 <UART_SetConfig+0x11c6>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d026      	beq.n	8008232 <UART_SetConfig+0x11c2>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	2b06      	cmp	r3, #6
 80081ea:	d020      	beq.n	800822e <UART_SetConfig+0x11be>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	2b07      	cmp	r3, #7
 80081f2:	d01a      	beq.n	800822a <UART_SetConfig+0x11ba>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d014      	beq.n	8008226 <UART_SetConfig+0x11b6>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	2b09      	cmp	r3, #9
 8008202:	d00e      	beq.n	8008222 <UART_SetConfig+0x11b2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	2b0a      	cmp	r3, #10
 800820a:	d008      	beq.n	800821e <UART_SetConfig+0x11ae>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	2b0b      	cmp	r3, #11
 8008212:	d102      	bne.n	800821a <UART_SetConfig+0x11aa>
 8008214:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008218:	e016      	b.n	8008248 <UART_SetConfig+0x11d8>
 800821a:	4b81      	ldr	r3, [pc, #516]	; (8008420 <UART_SetConfig+0x13b0>)
 800821c:	e014      	b.n	8008248 <UART_SetConfig+0x11d8>
 800821e:	4b81      	ldr	r3, [pc, #516]	; (8008424 <UART_SetConfig+0x13b4>)
 8008220:	e012      	b.n	8008248 <UART_SetConfig+0x11d8>
 8008222:	4b81      	ldr	r3, [pc, #516]	; (8008428 <UART_SetConfig+0x13b8>)
 8008224:	e010      	b.n	8008248 <UART_SetConfig+0x11d8>
 8008226:	4b81      	ldr	r3, [pc, #516]	; (800842c <UART_SetConfig+0x13bc>)
 8008228:	e00e      	b.n	8008248 <UART_SetConfig+0x11d8>
 800822a:	4b81      	ldr	r3, [pc, #516]	; (8008430 <UART_SetConfig+0x13c0>)
 800822c:	e00c      	b.n	8008248 <UART_SetConfig+0x11d8>
 800822e:	4b81      	ldr	r3, [pc, #516]	; (8008434 <UART_SetConfig+0x13c4>)
 8008230:	e00a      	b.n	8008248 <UART_SetConfig+0x11d8>
 8008232:	4b81      	ldr	r3, [pc, #516]	; (8008438 <UART_SetConfig+0x13c8>)
 8008234:	e008      	b.n	8008248 <UART_SetConfig+0x11d8>
 8008236:	4b81      	ldr	r3, [pc, #516]	; (800843c <UART_SetConfig+0x13cc>)
 8008238:	e006      	b.n	8008248 <UART_SetConfig+0x11d8>
 800823a:	4b81      	ldr	r3, [pc, #516]	; (8008440 <UART_SetConfig+0x13d0>)
 800823c:	e004      	b.n	8008248 <UART_SetConfig+0x11d8>
 800823e:	4b81      	ldr	r3, [pc, #516]	; (8008444 <UART_SetConfig+0x13d4>)
 8008240:	e002      	b.n	8008248 <UART_SetConfig+0x11d8>
 8008242:	4b81      	ldr	r3, [pc, #516]	; (8008448 <UART_SetConfig+0x13d8>)
 8008244:	e000      	b.n	8008248 <UART_SetConfig+0x11d8>
 8008246:	4b76      	ldr	r3, [pc, #472]	; (8008420 <UART_SetConfig+0x13b0>)
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6852      	ldr	r2, [r2, #4]
 800824c:	0852      	lsrs	r2, r2, #1
 800824e:	441a      	add	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	fbb2 f3f3 	udiv	r3, r2, r3
 8008258:	b29b      	uxth	r3, r3
 800825a:	61fb      	str	r3, [r7, #28]
        break;
 800825c:	e0bd      	b.n	80083da <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800825e:	f7fd fb9f 	bl	80059a0 <HAL_RCC_GetSysClockFreq>
 8008262:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b00      	cmp	r3, #0
 800826a:	d044      	beq.n	80082f6 <UART_SetConfig+0x1286>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	2b01      	cmp	r3, #1
 8008272:	d03e      	beq.n	80082f2 <UART_SetConfig+0x1282>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	2b02      	cmp	r3, #2
 800827a:	d038      	beq.n	80082ee <UART_SetConfig+0x127e>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b03      	cmp	r3, #3
 8008282:	d032      	beq.n	80082ea <UART_SetConfig+0x127a>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b04      	cmp	r3, #4
 800828a:	d02c      	beq.n	80082e6 <UART_SetConfig+0x1276>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b05      	cmp	r3, #5
 8008292:	d026      	beq.n	80082e2 <UART_SetConfig+0x1272>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b06      	cmp	r3, #6
 800829a:	d020      	beq.n	80082de <UART_SetConfig+0x126e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b07      	cmp	r3, #7
 80082a2:	d01a      	beq.n	80082da <UART_SetConfig+0x126a>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d014      	beq.n	80082d6 <UART_SetConfig+0x1266>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b09      	cmp	r3, #9
 80082b2:	d00e      	beq.n	80082d2 <UART_SetConfig+0x1262>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b0a      	cmp	r3, #10
 80082ba:	d008      	beq.n	80082ce <UART_SetConfig+0x125e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b0b      	cmp	r3, #11
 80082c2:	d102      	bne.n	80082ca <UART_SetConfig+0x125a>
 80082c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082c8:	e016      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e014      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082ce:	2380      	movs	r3, #128	; 0x80
 80082d0:	e012      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082d2:	2340      	movs	r3, #64	; 0x40
 80082d4:	e010      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082d6:	2320      	movs	r3, #32
 80082d8:	e00e      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082da:	2310      	movs	r3, #16
 80082dc:	e00c      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082de:	230c      	movs	r3, #12
 80082e0:	e00a      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082e2:	230a      	movs	r3, #10
 80082e4:	e008      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082e6:	2308      	movs	r3, #8
 80082e8:	e006      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082ea:	2306      	movs	r3, #6
 80082ec:	e004      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082ee:	2304      	movs	r3, #4
 80082f0:	e002      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e000      	b.n	80082f8 <UART_SetConfig+0x1288>
 80082f6:	2301      	movs	r3, #1
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	441a      	add	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	fbb2 f3f3 	udiv	r3, r2, r3
 800830e:	b29b      	uxth	r3, r3
 8008310:	61fb      	str	r3, [r7, #28]
        break;
 8008312:	e062      	b.n	80083da <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d04e      	beq.n	80083ba <UART_SetConfig+0x134a>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b01      	cmp	r3, #1
 8008322:	d047      	beq.n	80083b4 <UART_SetConfig+0x1344>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b02      	cmp	r3, #2
 800832a:	d040      	beq.n	80083ae <UART_SetConfig+0x133e>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	2b03      	cmp	r3, #3
 8008332:	d039      	beq.n	80083a8 <UART_SetConfig+0x1338>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	2b04      	cmp	r3, #4
 800833a:	d032      	beq.n	80083a2 <UART_SetConfig+0x1332>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2b05      	cmp	r3, #5
 8008342:	d02b      	beq.n	800839c <UART_SetConfig+0x132c>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b06      	cmp	r3, #6
 800834a:	d024      	beq.n	8008396 <UART_SetConfig+0x1326>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	2b07      	cmp	r3, #7
 8008352:	d01d      	beq.n	8008390 <UART_SetConfig+0x1320>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2b08      	cmp	r3, #8
 800835a:	d016      	beq.n	800838a <UART_SetConfig+0x131a>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	2b09      	cmp	r3, #9
 8008362:	d00f      	beq.n	8008384 <UART_SetConfig+0x1314>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b0a      	cmp	r3, #10
 800836a:	d008      	beq.n	800837e <UART_SetConfig+0x130e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b0b      	cmp	r3, #11
 8008372:	d101      	bne.n	8008378 <UART_SetConfig+0x1308>
 8008374:	2380      	movs	r3, #128	; 0x80
 8008376:	e022      	b.n	80083be <UART_SetConfig+0x134e>
 8008378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837c:	e01f      	b.n	80083be <UART_SetConfig+0x134e>
 800837e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008382:	e01c      	b.n	80083be <UART_SetConfig+0x134e>
 8008384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008388:	e019      	b.n	80083be <UART_SetConfig+0x134e>
 800838a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800838e:	e016      	b.n	80083be <UART_SetConfig+0x134e>
 8008390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008394:	e013      	b.n	80083be <UART_SetConfig+0x134e>
 8008396:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800839a:	e010      	b.n	80083be <UART_SetConfig+0x134e>
 800839c:	f640 43cc 	movw	r3, #3276	; 0xccc
 80083a0:	e00d      	b.n	80083be <UART_SetConfig+0x134e>
 80083a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083a6:	e00a      	b.n	80083be <UART_SetConfig+0x134e>
 80083a8:	f241 5355 	movw	r3, #5461	; 0x1555
 80083ac:	e007      	b.n	80083be <UART_SetConfig+0x134e>
 80083ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083b2:	e004      	b.n	80083be <UART_SetConfig+0x134e>
 80083b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80083b8:	e001      	b.n	80083be <UART_SetConfig+0x134e>
 80083ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	6852      	ldr	r2, [r2, #4]
 80083c2:	0852      	lsrs	r2, r2, #1
 80083c4:	441a      	add	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	61fb      	str	r3, [r7, #28]
        break;
 80083d2:	e002      	b.n	80083da <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	76fb      	strb	r3, [r7, #27]
        break;
 80083d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	2b0f      	cmp	r3, #15
 80083de:	d908      	bls.n	80083f2 <UART_SetConfig+0x1382>
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e6:	d204      	bcs.n	80083f2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	60da      	str	r2, [r3, #12]
 80083f0:	e001      	b.n	80083f6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008412:	7efb      	ldrb	r3, [r7, #27]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	; 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800841e:	bf00      	nop
 8008420:	00f42400 	.word	0x00f42400
 8008424:	0001e848 	.word	0x0001e848
 8008428:	0003d090 	.word	0x0003d090
 800842c:	0007a120 	.word	0x0007a120
 8008430:	000f4240 	.word	0x000f4240
 8008434:	00145855 	.word	0x00145855
 8008438:	00186a00 	.word	0x00186a00
 800843c:	001e8480 	.word	0x001e8480
 8008440:	0028b0aa 	.word	0x0028b0aa
 8008444:	003d0900 	.word	0x003d0900
 8008448:	007a1200 	.word	0x007a1200

0800844c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00a      	beq.n	8008476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00a      	beq.n	80084ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00a      	beq.n	80084fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008502:	f003 0320 	and.w	r3, r3, #32
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01a      	beq.n	8008562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800854a:	d10a      	bne.n	8008562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	605a      	str	r2, [r3, #4]
  }
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af02      	add	r7, sp, #8
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80085a0:	f7f9 f8cc 	bl	800173c <HAL_GetTick>
 80085a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d10e      	bne.n	80085d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f82c 	bl	8008620 <UART_WaitOnFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e022      	b.n	8008618 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d10e      	bne.n	80085fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f816 	bl	8008620 <UART_WaitOnFlagUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e00c      	b.n	8008618 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2220      	movs	r2, #32
 800860a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	4613      	mov	r3, r2
 800862e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008630:	e02c      	b.n	800868c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008638:	d028      	beq.n	800868c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863a:	f7f9 f87f 	bl	800173c <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	429a      	cmp	r2, r3
 8008648:	d302      	bcc.n	8008650 <UART_WaitOnFlagUntilTimeout+0x30>
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d11d      	bne.n	800868c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800865e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689a      	ldr	r2, [r3, #8]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2220      	movs	r2, #32
 8008674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2220      	movs	r2, #32
 800867c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e00f      	b.n	80086ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	69da      	ldr	r2, [r3, #28]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	4013      	ands	r3, r2
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	429a      	cmp	r2, r3
 800869a:	bf0c      	ite	eq
 800869c:	2301      	moveq	r3, #1
 800869e:	2300      	movne	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	461a      	mov	r2, r3
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d0c3      	beq.n	8008632 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d101      	bne.n	80086ca <HAL_UARTEx_DisableFifoMode+0x16>
 80086c6:	2302      	movs	r3, #2
 80086c8:	e027      	b.n	800871a <HAL_UARTEx_DisableFifoMode+0x66>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2224      	movs	r2, #36	; 0x24
 80086d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0201 	bic.w	r2, r2, #1
 80086f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2220      	movs	r2, #32
 800870c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800873a:	2302      	movs	r3, #2
 800873c:	e02d      	b.n	800879a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2224      	movs	r2, #36	; 0x24
 800874a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0201 	bic.w	r2, r2, #1
 8008764:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f850 	bl	8008820 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e02d      	b.n	8008816 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2224      	movs	r2, #36	; 0x24
 80087c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0201 	bic.w	r2, r2, #1
 80087e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f812 	bl	8008820 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
	...

08008820 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b089      	sub	sp, #36	; 0x24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008828:	4a2f      	ldr	r2, [pc, #188]	; (80088e8 <UARTEx_SetNbDataToProcess+0xc8>)
 800882a:	f107 0314 	add.w	r3, r7, #20
 800882e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008832:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008836:	4a2d      	ldr	r2, [pc, #180]	; (80088ec <UARTEx_SetNbDataToProcess+0xcc>)
 8008838:	f107 030c 	add.w	r3, r7, #12
 800883c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008840:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008848:	2b00      	cmp	r3, #0
 800884a:	d108      	bne.n	800885e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800885c:	e03d      	b.n	80088da <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800885e:	2308      	movs	r3, #8
 8008860:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008862:	2308      	movs	r3, #8
 8008864:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	0e5b      	lsrs	r3, r3, #25
 800886e:	b2db      	uxtb	r3, r3
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	0f5b      	lsrs	r3, r3, #29
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f003 0307 	and.w	r3, r3, #7
 8008884:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008886:	7fbb      	ldrb	r3, [r7, #30]
 8008888:	7f3a      	ldrb	r2, [r7, #28]
 800888a:	f107 0120 	add.w	r1, r7, #32
 800888e:	440a      	add	r2, r1
 8008890:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008894:	fb02 f303 	mul.w	r3, r2, r3
 8008898:	7f3a      	ldrb	r2, [r7, #28]
 800889a:	f107 0120 	add.w	r1, r7, #32
 800889e:	440a      	add	r2, r1
 80088a0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80088a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80088b0:	7ffb      	ldrb	r3, [r7, #31]
 80088b2:	7f7a      	ldrb	r2, [r7, #29]
 80088b4:	f107 0120 	add.w	r1, r7, #32
 80088b8:	440a      	add	r2, r1
 80088ba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80088be:	fb02 f303 	mul.w	r3, r2, r3
 80088c2:	7f7a      	ldrb	r2, [r7, #29]
 80088c4:	f107 0120 	add.w	r1, r7, #32
 80088c8:	440a      	add	r2, r1
 80088ca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80088ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80088da:	bf00      	nop
 80088dc:	3724      	adds	r7, #36	; 0x24
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	0800bc08 	.word	0x0800bc08
 80088ec:	0800bc10 	.word	0x0800bc10

080088f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80088f8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80088fc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008904:	b29a      	uxth	r2, r3
 8008906:	89fb      	ldrh	r3, [r7, #14]
 8008908:	4313      	orrs	r3, r2
 800890a:	b29a      	uxth	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008928:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800892c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008934:	b29b      	uxth	r3, r3
 8008936:	b21a      	sxth	r2, r3
 8008938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800893c:	43db      	mvns	r3, r3
 800893e:	b21b      	sxth	r3, r3
 8008940:	4013      	ands	r3, r2
 8008942:	b21b      	sxth	r3, r3
 8008944:	b29a      	uxth	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800895a:	b084      	sub	sp, #16
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	f107 0014 	add.w	r0, r7, #20
 8008968:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff ffaf 	bl	80088f0 <USB_EnableGlobalInt>

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800899e:	b004      	add	sp, #16
 80089a0:	4770      	bx	lr
	...

080089a4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089a4:	b490      	push	{r4, r7}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80089c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	78db      	ldrb	r3, [r3, #3]
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d819      	bhi.n	8008a06 <USB_ActivateEndpoint+0x62>
 80089d2:	a201      	add	r2, pc, #4	; (adr r2, 80089d8 <USB_ActivateEndpoint+0x34>)
 80089d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d8:	080089e9 	.word	0x080089e9
 80089dc:	080089fd 	.word	0x080089fd
 80089e0:	08008a0d 	.word	0x08008a0d
 80089e4:	080089f3 	.word	0x080089f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80089e8:	89bb      	ldrh	r3, [r7, #12]
 80089ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089ee:	81bb      	strh	r3, [r7, #12]
      break;
 80089f0:	e00d      	b.n	8008a0e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80089f2:	89bb      	ldrh	r3, [r7, #12]
 80089f4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80089f8:	81bb      	strh	r3, [r7, #12]
      break;
 80089fa:	e008      	b.n	8008a0e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80089fc:	89bb      	ldrh	r3, [r7, #12]
 80089fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a02:	81bb      	strh	r3, [r7, #12]
      break;
 8008a04:	e003      	b.n	8008a0e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	73fb      	strb	r3, [r7, #15]
      break;
 8008a0a:	e000      	b.n	8008a0e <USB_ActivateEndpoint+0x6a>
      break;
 8008a0c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	441a      	add	r2, r3
 8008a18:	89bb      	ldrh	r3, [r7, #12]
 8008a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	b21b      	sxth	r3, r3
 8008a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a46:	b21a      	sxth	r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b21b      	sxth	r3, r3
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	b21b      	sxth	r3, r3
 8008a52:	b29c      	uxth	r4, r3
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	441a      	add	r2, r3
 8008a5e:	4b8a      	ldr	r3, [pc, #552]	; (8008c88 <USB_ActivateEndpoint+0x2e4>)
 8008a60:	4323      	orrs	r3, r4
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	7b1b      	ldrb	r3, [r3, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f040 8112 	bne.w	8008c94 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d067      	beq.n	8008b48 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a78:	687c      	ldr	r4, [r7, #4]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	441c      	add	r4, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	00db      	lsls	r3, r3, #3
 8008a8a:	4423      	add	r3, r4
 8008a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a90:	461c      	mov	r4, r3
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	88db      	ldrh	r3, [r3, #6]
 8008a96:	085b      	lsrs	r3, r3, #1
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29c      	uxth	r4, r3
 8008aae:	4623      	mov	r3, r4
 8008ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d014      	beq.n	8008ae2 <USB_ActivateEndpoint+0x13e>
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ace:	b29c      	uxth	r4, r3
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	441a      	add	r2, r3
 8008ada:	4b6c      	ldr	r3, [pc, #432]	; (8008c8c <USB_ActivateEndpoint+0x2e8>)
 8008adc:	4323      	orrs	r3, r4
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	78db      	ldrb	r3, [r3, #3]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d018      	beq.n	8008b1c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b00:	b29c      	uxth	r4, r3
 8008b02:	f084 0320 	eor.w	r3, r4, #32
 8008b06:	b29c      	uxth	r4, r3
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	441a      	add	r2, r3
 8008b12:	4b5d      	ldr	r3, [pc, #372]	; (8008c88 <USB_ActivateEndpoint+0x2e4>)
 8008b14:	4323      	orrs	r3, r4
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	8013      	strh	r3, [r2, #0]
 8008b1a:	e22b      	b.n	8008f74 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b32:	b29c      	uxth	r4, r3
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	441a      	add	r2, r3
 8008b3e:	4b52      	ldr	r3, [pc, #328]	; (8008c88 <USB_ActivateEndpoint+0x2e4>)
 8008b40:	4323      	orrs	r3, r4
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	8013      	strh	r3, [r2, #0]
 8008b46:	e215      	b.n	8008f74 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b48:	687c      	ldr	r4, [r7, #4]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	441c      	add	r4, r3
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	4423      	add	r3, r4
 8008b5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b60:	461c      	mov	r4, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	88db      	ldrh	r3, [r3, #6]
 8008b66:	085b      	lsrs	r3, r3, #1
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008b70:	687c      	ldr	r4, [r7, #4]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	441c      	add	r4, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	4423      	add	r3, r4
 8008b84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b88:	461c      	mov	r4, r3
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10e      	bne.n	8008bb0 <USB_ActivateEndpoint+0x20c>
 8008b92:	8823      	ldrh	r3, [r4, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	8023      	strh	r3, [r4, #0]
 8008b9e:	8823      	ldrh	r3, [r4, #0]
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	8023      	strh	r3, [r4, #0]
 8008bae:	e02d      	b.n	8008c0c <USB_ActivateEndpoint+0x268>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	2b3e      	cmp	r3, #62	; 0x3e
 8008bb6:	d812      	bhi.n	8008bde <USB_ActivateEndpoint+0x23a>
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	085b      	lsrs	r3, r3, #1
 8008bbe:	60bb      	str	r3, [r7, #8]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <USB_ActivateEndpoint+0x22e>
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	60bb      	str	r3, [r7, #8]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	029b      	lsls	r3, r3, #10
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	8023      	strh	r3, [r4, #0]
 8008bdc:	e016      	b.n	8008c0c <USB_ActivateEndpoint+0x268>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	095b      	lsrs	r3, r3, #5
 8008be4:	60bb      	str	r3, [r7, #8]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f003 031f 	and.w	r3, r3, #31
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d102      	bne.n	8008bf8 <USB_ActivateEndpoint+0x254>
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	60bb      	str	r3, [r7, #8]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	029b      	lsls	r3, r3, #10
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29c      	uxth	r4, r3
 8008c1a:	4623      	mov	r3, r4
 8008c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d014      	beq.n	8008c4e <USB_ActivateEndpoint+0x2aa>
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3a:	b29c      	uxth	r4, r3
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	441a      	add	r2, r3
 8008c46:	4b12      	ldr	r3, [pc, #72]	; (8008c90 <USB_ActivateEndpoint+0x2ec>)
 8008c48:	4323      	orrs	r3, r4
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c64:	b29c      	uxth	r4, r3
 8008c66:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008c6a:	b29c      	uxth	r4, r3
 8008c6c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008c70:	b29c      	uxth	r4, r3
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	441a      	add	r2, r3
 8008c7c:	4b02      	ldr	r3, [pc, #8]	; (8008c88 <USB_ActivateEndpoint+0x2e4>)
 8008c7e:	4323      	orrs	r3, r4
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	8013      	strh	r3, [r2, #0]
 8008c84:	e176      	b.n	8008f74 <USB_ActivateEndpoint+0x5d0>
 8008c86:	bf00      	nop
 8008c88:	ffff8080 	.word	0xffff8080
 8008c8c:	ffff80c0 	.word	0xffff80c0
 8008c90:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008caa:	b29c      	uxth	r4, r3
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	4b96      	ldr	r3, [pc, #600]	; (8008f10 <USB_ActivateEndpoint+0x56c>)
 8008cb8:	4323      	orrs	r3, r4
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008cbe:	687c      	ldr	r4, [r7, #4]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	441c      	add	r4, r3
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	4423      	add	r3, r4
 8008cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cd6:	461c      	mov	r4, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	891b      	ldrh	r3, [r3, #8]
 8008cdc:	085b      	lsrs	r3, r3, #1
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	8023      	strh	r3, [r4, #0]
 8008ce6:	687c      	ldr	r4, [r7, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	441c      	add	r4, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4423      	add	r3, r4
 8008cfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cfe:	461c      	mov	r4, r3
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	895b      	ldrh	r3, [r3, #10]
 8008d04:	085b      	lsrs	r3, r3, #1
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	785b      	ldrb	r3, [r3, #1]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f040 8088 	bne.w	8008e28 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29c      	uxth	r4, r3
 8008d26:	4623      	mov	r3, r4
 8008d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d014      	beq.n	8008d5a <USB_ActivateEndpoint+0x3b6>
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d46:	b29c      	uxth	r4, r3
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	441a      	add	r2, r3
 8008d52:	4b70      	ldr	r3, [pc, #448]	; (8008f14 <USB_ActivateEndpoint+0x570>)
 8008d54:	4323      	orrs	r3, r4
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	b29c      	uxth	r4, r3
 8008d68:	4623      	mov	r3, r4
 8008d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d014      	beq.n	8008d9c <USB_ActivateEndpoint+0x3f8>
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d88:	b29c      	uxth	r4, r3
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	441a      	add	r2, r3
 8008d94:	4b60      	ldr	r3, [pc, #384]	; (8008f18 <USB_ActivateEndpoint+0x574>)
 8008d96:	4323      	orrs	r3, r4
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db2:	b29c      	uxth	r4, r3
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	441a      	add	r2, r3
 8008dbe:	4b56      	ldr	r3, [pc, #344]	; (8008f18 <USB_ActivateEndpoint+0x574>)
 8008dc0:	4323      	orrs	r3, r4
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ddc:	b29c      	uxth	r4, r3
 8008dde:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008de2:	b29c      	uxth	r4, r3
 8008de4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008de8:	b29c      	uxth	r4, r3
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	441a      	add	r2, r3
 8008df4:	4b49      	ldr	r3, [pc, #292]	; (8008f1c <USB_ActivateEndpoint+0x578>)
 8008df6:	4323      	orrs	r3, r4
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e12:	b29c      	uxth	r4, r3
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	441a      	add	r2, r3
 8008e1e:	4b3f      	ldr	r3, [pc, #252]	; (8008f1c <USB_ActivateEndpoint+0x578>)
 8008e20:	4323      	orrs	r3, r4
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	8013      	strh	r3, [r2, #0]
 8008e26:	e0a5      	b.n	8008f74 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29c      	uxth	r4, r3
 8008e36:	4623      	mov	r3, r4
 8008e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d014      	beq.n	8008e6a <USB_ActivateEndpoint+0x4c6>
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e56:	b29c      	uxth	r4, r3
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	441a      	add	r2, r3
 8008e62:	4b2c      	ldr	r3, [pc, #176]	; (8008f14 <USB_ActivateEndpoint+0x570>)
 8008e64:	4323      	orrs	r3, r4
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	b29c      	uxth	r4, r3
 8008e78:	4623      	mov	r3, r4
 8008e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d014      	beq.n	8008eac <USB_ActivateEndpoint+0x508>
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e98:	b29c      	uxth	r4, r3
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	441a      	add	r2, r3
 8008ea4:	4b1c      	ldr	r3, [pc, #112]	; (8008f18 <USB_ActivateEndpoint+0x574>)
 8008ea6:	4323      	orrs	r3, r4
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec2:	b29c      	uxth	r4, r3
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	441a      	add	r2, r3
 8008ece:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <USB_ActivateEndpoint+0x570>)
 8008ed0:	4323      	orrs	r3, r4
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	78db      	ldrb	r3, [r3, #3]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d020      	beq.n	8008f20 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ef4:	b29c      	uxth	r4, r3
 8008ef6:	f084 0320 	eor.w	r3, r4, #32
 8008efa:	b29c      	uxth	r4, r3
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	441a      	add	r2, r3
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <USB_ActivateEndpoint+0x578>)
 8008f08:	4323      	orrs	r3, r4
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	8013      	strh	r3, [r2, #0]
 8008f0e:	e01c      	b.n	8008f4a <USB_ActivateEndpoint+0x5a6>
 8008f10:	ffff8180 	.word	0xffff8180
 8008f14:	ffffc080 	.word	0xffffc080
 8008f18:	ffff80c0 	.word	0xffff80c0
 8008f1c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f36:	b29c      	uxth	r4, r3
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	441a      	add	r2, r3
 8008f42:	4b0f      	ldr	r3, [pc, #60]	; (8008f80 <USB_ActivateEndpoint+0x5dc>)
 8008f44:	4323      	orrs	r3, r4
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f60:	b29c      	uxth	r4, r3
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	441a      	add	r2, r3
 8008f6c:	4b04      	ldr	r3, [pc, #16]	; (8008f80 <USB_ActivateEndpoint+0x5dc>)
 8008f6e:	4323      	orrs	r3, r4
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc90      	pop	{r4, r7}
 8008f7e:	4770      	bx	lr
 8008f80:	ffff8080 	.word	0xffff8080

08008f84 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f84:	b490      	push	{r4, r7}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	7b1b      	ldrb	r3, [r3, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d171      	bne.n	800907a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	785b      	ldrb	r3, [r3, #1]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d036      	beq.n	800900c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	b29c      	uxth	r4, r3
 8008fac:	4623      	mov	r3, r4
 8008fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d014      	beq.n	8008fe0 <USB_DeactivateEndpoint+0x5c>
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fcc:	b29c      	uxth	r4, r3
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	441a      	add	r2, r3
 8008fd8:	4b6b      	ldr	r3, [pc, #428]	; (8009188 <USB_DeactivateEndpoint+0x204>)
 8008fda:	4323      	orrs	r3, r4
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ff6:	b29c      	uxth	r4, r3
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	441a      	add	r2, r3
 8009002:	4b62      	ldr	r3, [pc, #392]	; (800918c <USB_DeactivateEndpoint+0x208>)
 8009004:	4323      	orrs	r3, r4
 8009006:	b29b      	uxth	r3, r3
 8009008:	8013      	strh	r3, [r2, #0]
 800900a:	e144      	b.n	8009296 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29c      	uxth	r4, r3
 800901a:	4623      	mov	r3, r4
 800901c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d014      	beq.n	800904e <USB_DeactivateEndpoint+0xca>
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903a:	b29c      	uxth	r4, r3
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	441a      	add	r2, r3
 8009046:	4b52      	ldr	r3, [pc, #328]	; (8009190 <USB_DeactivateEndpoint+0x20c>)
 8009048:	4323      	orrs	r3, r4
 800904a:	b29b      	uxth	r3, r3
 800904c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	b29b      	uxth	r3, r3
 800905c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009064:	b29c      	uxth	r4, r3
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	441a      	add	r2, r3
 8009070:	4b46      	ldr	r3, [pc, #280]	; (800918c <USB_DeactivateEndpoint+0x208>)
 8009072:	4323      	orrs	r3, r4
 8009074:	b29b      	uxth	r3, r3
 8009076:	8013      	strh	r3, [r2, #0]
 8009078:	e10d      	b.n	8009296 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	785b      	ldrb	r3, [r3, #1]
 800907e:	2b00      	cmp	r3, #0
 8009080:	f040 8088 	bne.w	8009194 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29c      	uxth	r4, r3
 8009092:	4623      	mov	r3, r4
 8009094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d014      	beq.n	80090c6 <USB_DeactivateEndpoint+0x142>
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b2:	b29c      	uxth	r4, r3
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	441a      	add	r2, r3
 80090be:	4b34      	ldr	r3, [pc, #208]	; (8009190 <USB_DeactivateEndpoint+0x20c>)
 80090c0:	4323      	orrs	r3, r4
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29c      	uxth	r4, r3
 80090d4:	4623      	mov	r3, r4
 80090d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d014      	beq.n	8009108 <USB_DeactivateEndpoint+0x184>
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f4:	b29c      	uxth	r4, r3
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	441a      	add	r2, r3
 8009100:	4b21      	ldr	r3, [pc, #132]	; (8009188 <USB_DeactivateEndpoint+0x204>)
 8009102:	4323      	orrs	r3, r4
 8009104:	b29b      	uxth	r3, r3
 8009106:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800911e:	b29c      	uxth	r4, r3
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	441a      	add	r2, r3
 800912a:	4b17      	ldr	r3, [pc, #92]	; (8009188 <USB_DeactivateEndpoint+0x204>)
 800912c:	4323      	orrs	r3, r4
 800912e:	b29b      	uxth	r3, r3
 8009130:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	b29b      	uxth	r3, r3
 8009140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009148:	b29c      	uxth	r4, r3
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	441a      	add	r2, r3
 8009154:	4b0d      	ldr	r3, [pc, #52]	; (800918c <USB_DeactivateEndpoint+0x208>)
 8009156:	4323      	orrs	r3, r4
 8009158:	b29b      	uxth	r3, r3
 800915a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	b29b      	uxth	r3, r3
 800916a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800916e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009172:	b29c      	uxth	r4, r3
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	441a      	add	r2, r3
 800917e:	4b03      	ldr	r3, [pc, #12]	; (800918c <USB_DeactivateEndpoint+0x208>)
 8009180:	4323      	orrs	r3, r4
 8009182:	b29b      	uxth	r3, r3
 8009184:	8013      	strh	r3, [r2, #0]
 8009186:	e086      	b.n	8009296 <USB_DeactivateEndpoint+0x312>
 8009188:	ffff80c0 	.word	0xffff80c0
 800918c:	ffff8080 	.word	0xffff8080
 8009190:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29c      	uxth	r4, r3
 80091a2:	4623      	mov	r3, r4
 80091a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d014      	beq.n	80091d6 <USB_DeactivateEndpoint+0x252>
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c2:	b29c      	uxth	r4, r3
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	441a      	add	r2, r3
 80091ce:	4b35      	ldr	r3, [pc, #212]	; (80092a4 <USB_DeactivateEndpoint+0x320>)
 80091d0:	4323      	orrs	r3, r4
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29c      	uxth	r4, r3
 80091e4:	4623      	mov	r3, r4
 80091e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d014      	beq.n	8009218 <USB_DeactivateEndpoint+0x294>
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009204:	b29c      	uxth	r4, r3
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	441a      	add	r2, r3
 8009210:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <USB_DeactivateEndpoint+0x324>)
 8009212:	4323      	orrs	r3, r4
 8009214:	b29b      	uxth	r3, r3
 8009216:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29b      	uxth	r3, r3
 8009226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800922a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922e:	b29c      	uxth	r4, r3
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	441a      	add	r2, r3
 800923a:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <USB_DeactivateEndpoint+0x320>)
 800923c:	4323      	orrs	r3, r4
 800923e:	b29b      	uxth	r3, r3
 8009240:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	b29b      	uxth	r3, r3
 8009250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009258:	b29c      	uxth	r4, r3
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	441a      	add	r2, r3
 8009264:	4b11      	ldr	r3, [pc, #68]	; (80092ac <USB_DeactivateEndpoint+0x328>)
 8009266:	4323      	orrs	r3, r4
 8009268:	b29b      	uxth	r3, r3
 800926a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800927e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009282:	b29c      	uxth	r4, r3
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	441a      	add	r2, r3
 800928e:	4b07      	ldr	r3, [pc, #28]	; (80092ac <USB_DeactivateEndpoint+0x328>)
 8009290:	4323      	orrs	r3, r4
 8009292:	b29b      	uxth	r3, r3
 8009294:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bc90      	pop	{r4, r7}
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	ffffc080 	.word	0xffffc080
 80092a8:	ffff80c0 	.word	0xffff80c0
 80092ac:	ffff8080 	.word	0xffff8080

080092b0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b08d      	sub	sp, #52	; 0x34
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	f040 8160 	bne.w	8009584 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	699a      	ldr	r2, [r3, #24]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d909      	bls.n	80092e4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	699a      	ldr	r2, [r3, #24]
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	1ad2      	subs	r2, r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	619a      	str	r2, [r3, #24]
 80092e2:	e005      	b.n	80092f0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2200      	movs	r2, #0
 80092ee:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	7b1b      	ldrb	r3, [r3, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d119      	bne.n	800932c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	6959      	ldr	r1, [r3, #20]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	88da      	ldrh	r2, [r3, #6]
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	b29b      	uxth	r3, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fba8 	bl	8009a5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800930a:	687c      	ldr	r4, [r7, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009312:	b29b      	uxth	r3, r3
 8009314:	441c      	add	r4, r3
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4423      	add	r3, r4
 800931e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009322:	461c      	mov	r4, r3
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	b29b      	uxth	r3, r3
 8009328:	8023      	strh	r3, [r4, #0]
 800932a:	e10f      	b.n	800954c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	d065      	beq.n	800940e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009342:	687c      	ldr	r4, [r7, #4]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	785b      	ldrb	r3, [r3, #1]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d148      	bne.n	80093de <USB_EPStartXfer+0x12e>
 800934c:	687c      	ldr	r4, [r7, #4]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009354:	b29b      	uxth	r3, r3
 8009356:	441c      	add	r4, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	00db      	lsls	r3, r3, #3
 800935e:	4423      	add	r3, r4
 8009360:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009364:	461c      	mov	r4, r3
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10e      	bne.n	800938a <USB_EPStartXfer+0xda>
 800936c:	8823      	ldrh	r3, [r4, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009374:	b29b      	uxth	r3, r3
 8009376:	8023      	strh	r3, [r4, #0]
 8009378:	8823      	ldrh	r3, [r4, #0]
 800937a:	b29b      	uxth	r3, r3
 800937c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009384:	b29b      	uxth	r3, r3
 8009386:	8023      	strh	r3, [r4, #0]
 8009388:	e03d      	b.n	8009406 <USB_EPStartXfer+0x156>
 800938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938c:	2b3e      	cmp	r3, #62	; 0x3e
 800938e:	d810      	bhi.n	80093b2 <USB_EPStartXfer+0x102>
 8009390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009392:	085b      	lsrs	r3, r3, #1
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <USB_EPStartXfer+0xf6>
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	3301      	adds	r3, #1
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	029b      	lsls	r3, r3, #10
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	8023      	strh	r3, [r4, #0]
 80093b0:	e029      	b.n	8009406 <USB_EPStartXfer+0x156>
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	095b      	lsrs	r3, r3, #5
 80093b6:	627b      	str	r3, [r7, #36]	; 0x24
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	f003 031f 	and.w	r3, r3, #31
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <USB_EPStartXfer+0x118>
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	3b01      	subs	r3, #1
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	029b      	lsls	r3, r3, #10
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d8:	b29b      	uxth	r3, r3
 80093da:	8023      	strh	r3, [r4, #0]
 80093dc:	e013      	b.n	8009406 <USB_EPStartXfer+0x156>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	785b      	ldrb	r3, [r3, #1]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d10f      	bne.n	8009406 <USB_EPStartXfer+0x156>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	441c      	add	r4, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	00db      	lsls	r3, r3, #3
 80093f6:	4423      	add	r3, r4
 80093f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	895b      	ldrh	r3, [r3, #10]
 800940a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800940c:	e063      	b.n	80094d6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	785b      	ldrb	r3, [r3, #1]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d148      	bne.n	80094a8 <USB_EPStartXfer+0x1f8>
 8009416:	687c      	ldr	r4, [r7, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800941e:	b29b      	uxth	r3, r3
 8009420:	441c      	add	r4, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	4423      	add	r3, r4
 800942a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800942e:	461c      	mov	r4, r3
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10e      	bne.n	8009454 <USB_EPStartXfer+0x1a4>
 8009436:	8823      	ldrh	r3, [r4, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800943e:	b29b      	uxth	r3, r3
 8009440:	8023      	strh	r3, [r4, #0]
 8009442:	8823      	ldrh	r3, [r4, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800944a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800944e:	b29b      	uxth	r3, r3
 8009450:	8023      	strh	r3, [r4, #0]
 8009452:	e03d      	b.n	80094d0 <USB_EPStartXfer+0x220>
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	2b3e      	cmp	r3, #62	; 0x3e
 8009458:	d810      	bhi.n	800947c <USB_EPStartXfer+0x1cc>
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	085b      	lsrs	r3, r3, #1
 800945e:	623b      	str	r3, [r7, #32]
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <USB_EPStartXfer+0x1c0>
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	3301      	adds	r3, #1
 800946e:	623b      	str	r3, [r7, #32]
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	b29b      	uxth	r3, r3
 8009474:	029b      	lsls	r3, r3, #10
 8009476:	b29b      	uxth	r3, r3
 8009478:	8023      	strh	r3, [r4, #0]
 800947a:	e029      	b.n	80094d0 <USB_EPStartXfer+0x220>
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	095b      	lsrs	r3, r3, #5
 8009480:	623b      	str	r3, [r7, #32]
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	f003 031f 	and.w	r3, r3, #31
 8009488:	2b00      	cmp	r3, #0
 800948a:	d102      	bne.n	8009492 <USB_EPStartXfer+0x1e2>
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	3b01      	subs	r3, #1
 8009490:	623b      	str	r3, [r7, #32]
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	b29b      	uxth	r3, r3
 8009496:	029b      	lsls	r3, r3, #10
 8009498:	b29b      	uxth	r3, r3
 800949a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800949e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	8023      	strh	r3, [r4, #0]
 80094a6:	e013      	b.n	80094d0 <USB_EPStartXfer+0x220>
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d10f      	bne.n	80094d0 <USB_EPStartXfer+0x220>
 80094b0:	687c      	ldr	r4, [r7, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	441c      	add	r4, r3
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	4423      	add	r3, r4
 80094c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094c8:	461c      	mov	r4, r3
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	891b      	ldrh	r3, [r3, #8]
 80094d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	6959      	ldr	r1, [r3, #20]
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	b29b      	uxth	r3, r3
 80094de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 faba 	bl	8009a5a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	785b      	ldrb	r3, [r3, #1]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d115      	bne.n	800951a <USB_EPStartXfer+0x26a>
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009504:	b29c      	uxth	r4, r3
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	441a      	add	r2, r3
 8009510:	4b9a      	ldr	r3, [pc, #616]	; (800977c <USB_EPStartXfer+0x4cc>)
 8009512:	4323      	orrs	r3, r4
 8009514:	b29b      	uxth	r3, r3
 8009516:	8013      	strh	r3, [r2, #0]
 8009518:	e018      	b.n	800954c <USB_EPStartXfer+0x29c>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d114      	bne.n	800954c <USB_EPStartXfer+0x29c>
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	b29b      	uxth	r3, r3
 8009530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009538:	b29c      	uxth	r4, r3
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	441a      	add	r2, r3
 8009544:	4b8e      	ldr	r3, [pc, #568]	; (8009780 <USB_EPStartXfer+0x4d0>)
 8009546:	4323      	orrs	r3, r4
 8009548:	b29b      	uxth	r3, r3
 800954a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800955e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009562:	b29c      	uxth	r4, r3
 8009564:	f084 0310 	eor.w	r3, r4, #16
 8009568:	b29c      	uxth	r4, r3
 800956a:	f084 0320 	eor.w	r3, r4, #32
 800956e:	b29c      	uxth	r4, r3
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	441a      	add	r2, r3
 800957a:	4b82      	ldr	r3, [pc, #520]	; (8009784 <USB_EPStartXfer+0x4d4>)
 800957c:	4323      	orrs	r3, r4
 800957e:	b29b      	uxth	r3, r3
 8009580:	8013      	strh	r3, [r2, #0]
 8009582:	e146      	b.n	8009812 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	429a      	cmp	r2, r3
 800958e:	d909      	bls.n	80095a4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	699a      	ldr	r2, [r3, #24]
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	1ad2      	subs	r2, r2, r3
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	619a      	str	r2, [r3, #24]
 80095a2:	e005      	b.n	80095b0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2200      	movs	r2, #0
 80095ae:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	7b1b      	ldrb	r3, [r3, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d148      	bne.n	800964a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80095b8:	687c      	ldr	r4, [r7, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	441c      	add	r4, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	00db      	lsls	r3, r3, #3
 80095ca:	4423      	add	r3, r4
 80095cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095d0:	461c      	mov	r4, r3
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10e      	bne.n	80095f6 <USB_EPStartXfer+0x346>
 80095d8:	8823      	ldrh	r3, [r4, #0]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	8023      	strh	r3, [r4, #0]
 80095e4:	8823      	ldrh	r3, [r4, #0]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	8023      	strh	r3, [r4, #0]
 80095f4:	e0f2      	b.n	80097dc <USB_EPStartXfer+0x52c>
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	2b3e      	cmp	r3, #62	; 0x3e
 80095fa:	d810      	bhi.n	800961e <USB_EPStartXfer+0x36e>
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	085b      	lsrs	r3, r3, #1
 8009600:	61fb      	str	r3, [r7, #28]
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <USB_EPStartXfer+0x362>
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	3301      	adds	r3, #1
 8009610:	61fb      	str	r3, [r7, #28]
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	b29b      	uxth	r3, r3
 8009616:	029b      	lsls	r3, r3, #10
 8009618:	b29b      	uxth	r3, r3
 800961a:	8023      	strh	r3, [r4, #0]
 800961c:	e0de      	b.n	80097dc <USB_EPStartXfer+0x52c>
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	095b      	lsrs	r3, r3, #5
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	f003 031f 	and.w	r3, r3, #31
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <USB_EPStartXfer+0x384>
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	3b01      	subs	r3, #1
 8009632:	61fb      	str	r3, [r7, #28]
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	b29b      	uxth	r3, r3
 8009638:	029b      	lsls	r3, r3, #10
 800963a:	b29b      	uxth	r3, r3
 800963c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009644:	b29b      	uxth	r3, r3
 8009646:	8023      	strh	r3, [r4, #0]
 8009648:	e0c8      	b.n	80097dc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d148      	bne.n	80096e4 <USB_EPStartXfer+0x434>
 8009652:	687c      	ldr	r4, [r7, #4]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800965a:	b29b      	uxth	r3, r3
 800965c:	441c      	add	r4, r3
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	4423      	add	r3, r4
 8009666:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800966a:	461c      	mov	r4, r3
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10e      	bne.n	8009690 <USB_EPStartXfer+0x3e0>
 8009672:	8823      	ldrh	r3, [r4, #0]
 8009674:	b29b      	uxth	r3, r3
 8009676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800967a:	b29b      	uxth	r3, r3
 800967c:	8023      	strh	r3, [r4, #0]
 800967e:	8823      	ldrh	r3, [r4, #0]
 8009680:	b29b      	uxth	r3, r3
 8009682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800968a:	b29b      	uxth	r3, r3
 800968c:	8023      	strh	r3, [r4, #0]
 800968e:	e03d      	b.n	800970c <USB_EPStartXfer+0x45c>
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	2b3e      	cmp	r3, #62	; 0x3e
 8009694:	d810      	bhi.n	80096b8 <USB_EPStartXfer+0x408>
 8009696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009698:	085b      	lsrs	r3, r3, #1
 800969a:	61bb      	str	r3, [r7, #24]
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <USB_EPStartXfer+0x3fc>
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	3301      	adds	r3, #1
 80096aa:	61bb      	str	r3, [r7, #24]
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	029b      	lsls	r3, r3, #10
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	8023      	strh	r3, [r4, #0]
 80096b6:	e029      	b.n	800970c <USB_EPStartXfer+0x45c>
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	095b      	lsrs	r3, r3, #5
 80096bc:	61bb      	str	r3, [r7, #24]
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	f003 031f 	and.w	r3, r3, #31
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d102      	bne.n	80096ce <USB_EPStartXfer+0x41e>
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	61bb      	str	r3, [r7, #24]
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	029b      	lsls	r3, r3, #10
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096de:	b29b      	uxth	r3, r3
 80096e0:	8023      	strh	r3, [r4, #0]
 80096e2:	e013      	b.n	800970c <USB_EPStartXfer+0x45c>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d10f      	bne.n	800970c <USB_EPStartXfer+0x45c>
 80096ec:	687c      	ldr	r4, [r7, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	441c      	add	r4, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	4423      	add	r3, r4
 8009700:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009704:	461c      	mov	r4, r3
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	b29b      	uxth	r3, r3
 800970a:	8023      	strh	r3, [r4, #0]
 800970c:	687c      	ldr	r4, [r7, #4]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	785b      	ldrb	r3, [r3, #1]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d14e      	bne.n	80097b4 <USB_EPStartXfer+0x504>
 8009716:	687c      	ldr	r4, [r7, #4]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800971e:	b29b      	uxth	r3, r3
 8009720:	441c      	add	r4, r3
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	4423      	add	r3, r4
 800972a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800972e:	461c      	mov	r4, r3
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10e      	bne.n	8009754 <USB_EPStartXfer+0x4a4>
 8009736:	8823      	ldrh	r3, [r4, #0]
 8009738:	b29b      	uxth	r3, r3
 800973a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800973e:	b29b      	uxth	r3, r3
 8009740:	8023      	strh	r3, [r4, #0]
 8009742:	8823      	ldrh	r3, [r4, #0]
 8009744:	b29b      	uxth	r3, r3
 8009746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800974a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800974e:	b29b      	uxth	r3, r3
 8009750:	8023      	strh	r3, [r4, #0]
 8009752:	e043      	b.n	80097dc <USB_EPStartXfer+0x52c>
 8009754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009756:	2b3e      	cmp	r3, #62	; 0x3e
 8009758:	d816      	bhi.n	8009788 <USB_EPStartXfer+0x4d8>
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	085b      	lsrs	r3, r3, #1
 800975e:	617b      	str	r3, [r7, #20]
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <USB_EPStartXfer+0x4c0>
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	3301      	adds	r3, #1
 800976e:	617b      	str	r3, [r7, #20]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	b29b      	uxth	r3, r3
 8009774:	029b      	lsls	r3, r3, #10
 8009776:	b29b      	uxth	r3, r3
 8009778:	8023      	strh	r3, [r4, #0]
 800977a:	e02f      	b.n	80097dc <USB_EPStartXfer+0x52c>
 800977c:	ffff80c0 	.word	0xffff80c0
 8009780:	ffffc080 	.word	0xffffc080
 8009784:	ffff8080 	.word	0xffff8080
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	f003 031f 	and.w	r3, r3, #31
 8009794:	2b00      	cmp	r3, #0
 8009796:	d102      	bne.n	800979e <USB_EPStartXfer+0x4ee>
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	3b01      	subs	r3, #1
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	029b      	lsls	r3, r3, #10
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	8023      	strh	r3, [r4, #0]
 80097b2:	e013      	b.n	80097dc <USB_EPStartXfer+0x52c>
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	785b      	ldrb	r3, [r3, #1]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d10f      	bne.n	80097dc <USB_EPStartXfer+0x52c>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	441c      	add	r4, r3
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	4423      	add	r3, r4
 80097ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097d2:	613b      	str	r3, [r7, #16]
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f2:	b29c      	uxth	r4, r3
 80097f4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80097f8:	b29c      	uxth	r4, r3
 80097fa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80097fe:	b29c      	uxth	r4, r3
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	441a      	add	r2, r3
 800980a:	4b04      	ldr	r3, [pc, #16]	; (800981c <USB_EPStartXfer+0x56c>)
 800980c:	4323      	orrs	r3, r4
 800980e:	b29b      	uxth	r3, r3
 8009810:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3734      	adds	r7, #52	; 0x34
 8009818:	46bd      	mov	sp, r7
 800981a:	bd90      	pop	{r4, r7, pc}
 800981c:	ffff8080 	.word	0xffff8080

08009820 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009820:	b490      	push	{r4, r7}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	785b      	ldrb	r3, [r3, #1]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d018      	beq.n	8009864 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	b29b      	uxth	r3, r3
 8009840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009848:	b29c      	uxth	r4, r3
 800984a:	f084 0310 	eor.w	r3, r4, #16
 800984e:	b29c      	uxth	r4, r3
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	441a      	add	r2, r3
 800985a:	4b11      	ldr	r3, [pc, #68]	; (80098a0 <USB_EPSetStall+0x80>)
 800985c:	4323      	orrs	r3, r4
 800985e:	b29b      	uxth	r3, r3
 8009860:	8013      	strh	r3, [r2, #0]
 8009862:	e017      	b.n	8009894 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800987a:	b29c      	uxth	r4, r3
 800987c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009880:	b29c      	uxth	r4, r3
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	441a      	add	r2, r3
 800988c:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <USB_EPSetStall+0x80>)
 800988e:	4323      	orrs	r3, r4
 8009890:	b29b      	uxth	r3, r3
 8009892:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bc90      	pop	{r4, r7}
 800989e:	4770      	bx	lr
 80098a0:	ffff8080 	.word	0xffff8080

080098a4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098a4:	b490      	push	{r4, r7}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	7b1b      	ldrb	r3, [r3, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d17d      	bne.n	80099b2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	785b      	ldrb	r3, [r3, #1]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d03d      	beq.n	800993a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	b29c      	uxth	r4, r3
 80098cc:	4623      	mov	r3, r4
 80098ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d014      	beq.n	8009900 <USB_EPClearStall+0x5c>
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ec:	b29c      	uxth	r4, r3
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	441a      	add	r2, r3
 80098f8:	4b31      	ldr	r3, [pc, #196]	; (80099c0 <USB_EPClearStall+0x11c>)
 80098fa:	4323      	orrs	r3, r4
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	78db      	ldrb	r3, [r3, #3]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d054      	beq.n	80099b2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800991a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800991e:	b29c      	uxth	r4, r3
 8009920:	f084 0320 	eor.w	r3, r4, #32
 8009924:	b29c      	uxth	r4, r3
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	441a      	add	r2, r3
 8009930:	4b24      	ldr	r3, [pc, #144]	; (80099c4 <USB_EPClearStall+0x120>)
 8009932:	4323      	orrs	r3, r4
 8009934:	b29b      	uxth	r3, r3
 8009936:	8013      	strh	r3, [r2, #0]
 8009938:	e03b      	b.n	80099b2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	b29c      	uxth	r4, r3
 8009948:	4623      	mov	r3, r4
 800994a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d014      	beq.n	800997c <USB_EPClearStall+0xd8>
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	b29b      	uxth	r3, r3
 8009960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009968:	b29c      	uxth	r4, r3
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	441a      	add	r2, r3
 8009974:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <USB_EPClearStall+0x124>)
 8009976:	4323      	orrs	r3, r4
 8009978:	b29b      	uxth	r3, r3
 800997a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	b29b      	uxth	r3, r3
 800998a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800998e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009992:	b29c      	uxth	r4, r3
 8009994:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009998:	b29c      	uxth	r4, r3
 800999a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800999e:	b29c      	uxth	r4, r3
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	441a      	add	r2, r3
 80099aa:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <USB_EPClearStall+0x120>)
 80099ac:	4323      	orrs	r3, r4
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bc90      	pop	{r4, r7}
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	ffff80c0 	.word	0xffff80c0
 80099c4:	ffff8080 	.word	0xffff8080
 80099c8:	ffffc080 	.word	0xffffc080

080099cc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80099d8:	78fb      	ldrb	r3, [r7, #3]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d103      	bne.n	80099e6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2280      	movs	r2, #128	; 0x80
 80099e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b085      	sub	sp, #20
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a34:	68fb      	ldr	r3, [r7, #12]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b08d      	sub	sp, #52	; 0x34
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	4611      	mov	r1, r2
 8009a66:	461a      	mov	r2, r3
 8009a68:	460b      	mov	r3, r1
 8009a6a:	80fb      	strh	r3, [r7, #6]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a70:	88bb      	ldrh	r3, [r7, #4]
 8009a72:	3301      	adds	r3, #1
 8009a74:	085b      	lsrs	r3, r3, #1
 8009a76:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a80:	88fa      	ldrh	r2, [r7, #6]
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a8a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a90:	e01b      	b.n	8009aca <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	021b      	lsls	r3, r3, #8
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	3302      	adds	r3, #2
 8009abc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e0      	bne.n	8009a92 <USB_WritePMA+0x38>
  }
}
 8009ad0:	bf00      	nop
 8009ad2:	3734      	adds	r7, #52	; 0x34
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b08b      	sub	sp, #44	; 0x2c
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	461a      	mov	r2, r3
 8009aea:	460b      	mov	r3, r1
 8009aec:	80fb      	strh	r3, [r7, #6]
 8009aee:	4613      	mov	r3, r2
 8009af0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009af2:	88bb      	ldrh	r3, [r7, #4]
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b02:	88fa      	ldrh	r2, [r7, #6]
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b0c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	627b      	str	r3, [r7, #36]	; 0x24
 8009b12:	e018      	b.n	8009b46 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	3302      	adds	r3, #2
 8009b20:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	0a1b      	lsrs	r3, r3, #8
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	3b01      	subs	r3, #1
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1e3      	bne.n	8009b14 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009b4c:	88bb      	ldrh	r3, [r7, #4]
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d007      	beq.n	8009b68 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	701a      	strb	r2, [r3, #0]
  }
}
 8009b68:	bf00      	nop
 8009b6a:	372c      	adds	r7, #44	; 0x2c
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7c1b      	ldrb	r3, [r3, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d115      	bne.n	8009bb8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b90:	2202      	movs	r2, #2
 8009b92:	2181      	movs	r1, #129	; 0x81
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f001 fe5e 	bl	800b856 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f001 fe54 	bl	800b856 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009bb6:	e012      	b.n	8009bde <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bb8:	2340      	movs	r3, #64	; 0x40
 8009bba:	2202      	movs	r2, #2
 8009bbc:	2181      	movs	r1, #129	; 0x81
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f001 fe49 	bl	800b856 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bca:	2340      	movs	r3, #64	; 0x40
 8009bcc:	2202      	movs	r2, #2
 8009bce:	2101      	movs	r1, #1
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 fe40 	bl	800b856 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009bde:	2308      	movs	r3, #8
 8009be0:	2203      	movs	r2, #3
 8009be2:	2182      	movs	r1, #130	; 0x82
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 fe36 	bl	800b856 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bf0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bf4:	f001 ff86 	bl	800bb04 <USBD_static_malloc>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d102      	bne.n	8009c10 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	73fb      	strb	r3, [r7, #15]
 8009c0e:	e026      	b.n	8009c5e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c16:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	7c1b      	ldrb	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d109      	bne.n	8009c4e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c44:	2101      	movs	r1, #1
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 fef0 	bl	800ba2c <USBD_LL_PrepareReceive>
 8009c4c:	e007      	b.n	8009c5e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c54:	2340      	movs	r3, #64	; 0x40
 8009c56:	2101      	movs	r1, #1
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 fee7 	bl	800ba2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c78:	2181      	movs	r1, #129	; 0x81
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 fe11 	bl	800b8a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009c86:	2101      	movs	r1, #1
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fe0a 	bl	800b8a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009c96:	2182      	movs	r1, #130	; 0x82
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fe02 	bl	800b8a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00e      	beq.n	8009ccc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 ff2e 	bl	800bb20 <USBD_static_free>
    pdev->pClassData = NULL;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b086      	sub	sp, #24
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d039      	beq.n	8009d74 <USBD_CDC_Setup+0x9e>
 8009d00:	2b20      	cmp	r3, #32
 8009d02:	d17c      	bne.n	8009dfe <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	88db      	ldrh	r3, [r3, #6]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d029      	beq.n	8009d60 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	b25b      	sxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da11      	bge.n	8009d3a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009d22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	88d2      	ldrh	r2, [r2, #6]
 8009d28:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009d2a:	6939      	ldr	r1, [r7, #16]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	88db      	ldrh	r3, [r3, #6]
 8009d30:	461a      	mov	r2, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 f9fa 	bl	800b12c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009d38:	e068      	b.n	8009e0c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	785a      	ldrb	r2, [r3, #1]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	88db      	ldrh	r3, [r3, #6]
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009d50:	6939      	ldr	r1, [r7, #16]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	88db      	ldrh	r3, [r3, #6]
 8009d56:	461a      	mov	r2, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f001 fa15 	bl	800b188 <USBD_CtlPrepareRx>
      break;
 8009d5e:	e055      	b.n	8009e0c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	7850      	ldrb	r0, [r2, #1]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	4798      	blx	r3
      break;
 8009d72:	e04b      	b.n	8009e0c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	785b      	ldrb	r3, [r3, #1]
 8009d78:	2b0a      	cmp	r3, #10
 8009d7a:	d017      	beq.n	8009dac <USBD_CDC_Setup+0xd6>
 8009d7c:	2b0b      	cmp	r3, #11
 8009d7e:	d029      	beq.n	8009dd4 <USBD_CDC_Setup+0xfe>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d133      	bne.n	8009dec <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d107      	bne.n	8009d9e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009d8e:	f107 030c 	add.w	r3, r7, #12
 8009d92:	2202      	movs	r2, #2
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f001 f9c8 	bl	800b12c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d9c:	e02e      	b.n	8009dfc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 f958 	bl	800b056 <USBD_CtlError>
            ret = USBD_FAIL;
 8009da6:	2302      	movs	r3, #2
 8009da8:	75fb      	strb	r3, [r7, #23]
          break;
 8009daa:	e027      	b.n	8009dfc <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d107      	bne.n	8009dc6 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009db6:	f107 030f 	add.w	r3, r7, #15
 8009dba:	2201      	movs	r2, #1
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 f9b4 	bl	800b12c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009dc4:	e01a      	b.n	8009dfc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f001 f944 	bl	800b056 <USBD_CtlError>
            ret = USBD_FAIL;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8009dd2:	e013      	b.n	8009dfc <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d00d      	beq.n	8009dfa <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 f938 	bl	800b056 <USBD_CtlError>
            ret = USBD_FAIL;
 8009de6:	2302      	movs	r3, #2
 8009de8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009dea:	e006      	b.n	8009dfa <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 f931 	bl	800b056 <USBD_CtlError>
          ret = USBD_FAIL;
 8009df4:	2302      	movs	r3, #2
 8009df6:	75fb      	strb	r3, [r7, #23]
          break;
 8009df8:	e000      	b.n	8009dfc <USBD_CDC_Setup+0x126>
          break;
 8009dfa:	bf00      	nop
      }
      break;
 8009dfc:	e006      	b.n	8009e0c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f001 f928 	bl	800b056 <USBD_CtlError>
      ret = USBD_FAIL;
 8009e06:	2302      	movs	r3, #2
 8009e08:	75fb      	strb	r3, [r7, #23]
      break;
 8009e0a:	bf00      	nop
  }

  return ret;
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e28:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e30:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d037      	beq.n	8009eac <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009e3c:	78fa      	ldrb	r2, [r7, #3]
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	440b      	add	r3, r1
 8009e4a:	331c      	adds	r3, #28
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d026      	beq.n	8009ea0 <USBD_CDC_DataIn+0x8a>
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	331c      	adds	r3, #28
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	78fa      	ldrb	r2, [r7, #3]
 8009e66:	68b9      	ldr	r1, [r7, #8]
 8009e68:	0152      	lsls	r2, r2, #5
 8009e6a:	440a      	add	r2, r1
 8009e6c:	3238      	adds	r2, #56	; 0x38
 8009e6e:	6812      	ldr	r2, [r2, #0]
 8009e70:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e74:	fb02 f201 	mul.w	r2, r2, r1
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d110      	bne.n	8009ea0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009e7e:	78fa      	ldrb	r2, [r7, #3]
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	440b      	add	r3, r1
 8009e8c:	331c      	adds	r3, #28
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e92:	78f9      	ldrb	r1, [r7, #3]
 8009e94:	2300      	movs	r3, #0
 8009e96:	2200      	movs	r2, #0
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 fda4 	bl	800b9e6 <USBD_LL_Transmit>
 8009e9e:	e003      	b.n	8009ea8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e000      	b.n	8009eae <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009eac:	2302      	movs	r3, #2
  }
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ec8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f001 fdcf 	bl	800ba72 <USBD_LL_GetRxDataSize>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00d      	beq.n	8009f02 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009efa:	4611      	mov	r1, r2
 8009efc:	4798      	blx	r3

    return USBD_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	e000      	b.n	8009f04 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009f02:	2302      	movs	r3, #2
  }
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f1a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d015      	beq.n	8009f52 <USBD_CDC_EP0_RxReady+0x46>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f2c:	2bff      	cmp	r3, #255	; 0xff
 8009f2e:	d010      	beq.n	8009f52 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009f3e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f46:	b292      	uxth	r2, r2
 8009f48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	22ff      	movs	r2, #255	; 0xff
 8009f4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2243      	movs	r2, #67	; 0x43
 8009f68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009f6a:	4b03      	ldr	r3, [pc, #12]	; (8009f78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	20000094 	.word	0x20000094

08009f7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2243      	movs	r2, #67	; 0x43
 8009f88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009f8a:	4b03      	ldr	r3, [pc, #12]	; (8009f98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	20000050 	.word	0x20000050

08009f9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2243      	movs	r2, #67	; 0x43
 8009fa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009faa:	4b03      	ldr	r3, [pc, #12]	; (8009fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	200000d8 	.word	0x200000d8

08009fbc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	220a      	movs	r2, #10
 8009fc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009fca:	4b03      	ldr	r3, [pc, #12]	; (8009fd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	2000000c 	.word	0x2000000c

08009fdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b087      	sub	sp, #28
 800a00e:	af00      	add	r7, sp, #0
 800a010:	60f8      	str	r0, [r7, #12]
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	4613      	mov	r3, r2
 800a016:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a01e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a028:	88fa      	ldrh	r2, [r7, #6]
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	371c      	adds	r7, #28
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a03e:	b480      	push	{r7}
 800a040:	b085      	sub	sp, #20
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a04e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b084      	sub	sp, #16
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a074:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d017      	beq.n	800a0b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	7c1b      	ldrb	r3, [r3, #16]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d109      	bne.n	800a09c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a08e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a092:	2101      	movs	r1, #1
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 fcc9 	bl	800ba2c <USBD_LL_PrepareReceive>
 800a09a:	e007      	b.n	800a0ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0a2:	2340      	movs	r3, #64	; 0x40
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f001 fcc0 	bl	800ba2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e000      	b.n	800a0b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a0b0:	2302      	movs	r3, #2
  }
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b084      	sub	sp, #16
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e01a      	b.n	800a108 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	79fa      	ldrb	r2, [r7, #7]
 800a0fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f001 fb2d 	bl	800b760 <USBD_LL_Init>

  return USBD_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d006      	beq.n	800a132 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	73fb      	strb	r3, [r7, #15]
 800a130:	e001      	b.n	800a136 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a132:	2302      	movs	r3, #2
 800a134:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a136:	7bfb      	ldrb	r3, [r7, #15]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f001 fb67 	bl	800b820 <USBD_LL_Start>

  return USBD_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a17e:	2302      	movs	r3, #2
 800a180:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00c      	beq.n	800a1a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	78fa      	ldrb	r2, [r7, #3]
 800a196:	4611      	mov	r1, r2
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	4798      	blx	r3
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	4798      	blx	r3

  return USBD_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b082      	sub	sp, #8
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 fef7 	bl	800afdc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a20a:	f003 031f 	and.w	r3, r3, #31
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d00c      	beq.n	800a22c <USBD_LL_SetupStage+0x56>
 800a212:	2b01      	cmp	r3, #1
 800a214:	d302      	bcc.n	800a21c <USBD_LL_SetupStage+0x46>
 800a216:	2b02      	cmp	r3, #2
 800a218:	d010      	beq.n	800a23c <USBD_LL_SetupStage+0x66>
 800a21a:	e017      	b.n	800a24c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f9cd 	bl	800a5c4 <USBD_StdDevReq>
      break;
 800a22a:	e01a      	b.n	800a262 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fa2f 	bl	800a698 <USBD_StdItfReq>
      break;
 800a23a:	e012      	b.n	800a262 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fa6d 	bl	800a724 <USBD_StdEPReq>
      break;
 800a24a:	e00a      	b.n	800a262 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a252:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a256:	b2db      	uxtb	r3, r3
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f001 fb40 	bl	800b8e0 <USBD_LL_StallEP>
      break;
 800a260:	bf00      	nop
  }

  return USBD_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	460b      	mov	r3, r1
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a27a:	7afb      	ldrb	r3, [r7, #11]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d14b      	bne.n	800a318 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a286:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d134      	bne.n	800a2fc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d919      	bls.n	800a2d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	1ad2      	subs	r2, r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	68da      	ldr	r2, [r3, #12]
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d203      	bcs.n	800a2c0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	e002      	b.n	800a2c6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	6879      	ldr	r1, [r7, #4]
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 ff7a 	bl	800b1c4 <USBD_CtlContinueRx>
 800a2d0:	e038      	b.n	800a344 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00a      	beq.n	800a2f4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d105      	bne.n	800a2f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 ff77 	bl	800b1e8 <USBD_CtlSendStatus>
 800a2fa:	e023      	b.n	800a344 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a302:	2b05      	cmp	r3, #5
 800a304:	d11e      	bne.n	800a344 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a30e:	2100      	movs	r1, #0
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f001 fae5 	bl	800b8e0 <USBD_LL_StallEP>
 800a316:	e015      	b.n	800a344 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d108      	bne.n	800a340 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	7afa      	ldrb	r2, [r7, #11]
 800a338:	4611      	mov	r1, r2
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	4798      	blx	r3
 800a33e:	e001      	b.n	800a344 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a340:	2302      	movs	r3, #2
 800a342:	e000      	b.n	800a346 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b086      	sub	sp, #24
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	460b      	mov	r3, r1
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a35c:	7afb      	ldrb	r3, [r7, #11]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d17f      	bne.n	800a462 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3314      	adds	r3, #20
 800a366:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d15c      	bne.n	800a42c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d915      	bls.n	800a3aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	68da      	ldr	r2, [r3, #12]
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	1ad2      	subs	r2, r2, r3
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	b29b      	uxth	r3, r3
 800a392:	461a      	mov	r2, r3
 800a394:	6879      	ldr	r1, [r7, #4]
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 fee4 	bl	800b164 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a39c:	2300      	movs	r3, #0
 800a39e:	2200      	movs	r2, #0
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f001 fb42 	bl	800ba2c <USBD_LL_PrepareReceive>
 800a3a8:	e04e      	b.n	800a448 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	6912      	ldr	r2, [r2, #16]
 800a3b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3b6:	fb02 f201 	mul.w	r2, r2, r1
 800a3ba:	1a9b      	subs	r3, r3, r2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d11c      	bne.n	800a3fa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d316      	bcc.n	800a3fa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d20f      	bcs.n	800a3fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 fec0 	bl	800b164 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f001 fb1a 	bl	800ba2c <USBD_LL_PrepareReceive>
 800a3f8:	e026      	b.n	800a448 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00a      	beq.n	800a41c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d105      	bne.n	800a41c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a41c:	2180      	movs	r1, #128	; 0x80
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f001 fa5e 	bl	800b8e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 fef2 	bl	800b20e <USBD_CtlReceiveStatus>
 800a42a:	e00d      	b.n	800a448 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a432:	2b04      	cmp	r3, #4
 800a434:	d004      	beq.n	800a440 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d103      	bne.n	800a448 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a440:	2180      	movs	r1, #128	; 0x80
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f001 fa4c 	bl	800b8e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d11d      	bne.n	800a48e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f7ff fe82 	bl	800a15c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a460:	e015      	b.n	800a48e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00d      	beq.n	800a48a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a474:	2b03      	cmp	r3, #3
 800a476:	d108      	bne.n	800a48a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	7afa      	ldrb	r2, [r7, #11]
 800a482:	4611      	mov	r1, r2
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	4798      	blx	r3
 800a488:	e001      	b.n	800a48e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a48a:	2302      	movs	r3, #2
 800a48c:	e000      	b.n	800a490 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4a0:	2340      	movs	r3, #64	; 0x40
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f001 f9d5 	bl	800b856 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2240      	movs	r2, #64	; 0x40
 800a4b8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4bc:	2340      	movs	r3, #64	; 0x40
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2180      	movs	r1, #128	; 0x80
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f001 f9c7 	bl	800b856 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2240      	movs	r2, #64	; 0x40
 800a4d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d009      	beq.n	800a510 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	6852      	ldr	r2, [r2, #4]
 800a508:	b2d2      	uxtb	r2, r2
 800a50a:	4611      	mov	r1, r2
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	4798      	blx	r3
  }

  return USBD_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	78fa      	ldrb	r2, [r7, #3]
 800a52a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2204      	movs	r2, #4
 800a552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a572:	2b04      	cmp	r3, #4
 800a574:	d105      	bne.n	800a582 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d10b      	bne.n	800a5ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	d004      	beq.n	800a5e8 <USBD_StdDevReq+0x24>
 800a5de:	2b40      	cmp	r3, #64	; 0x40
 800a5e0:	d002      	beq.n	800a5e8 <USBD_StdDevReq+0x24>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d008      	beq.n	800a5f8 <USBD_StdDevReq+0x34>
 800a5e6:	e04c      	b.n	800a682 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	4798      	blx	r3
      break;
 800a5f6:	e049      	b.n	800a68c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	785b      	ldrb	r3, [r3, #1]
 800a5fc:	2b09      	cmp	r3, #9
 800a5fe:	d83a      	bhi.n	800a676 <USBD_StdDevReq+0xb2>
 800a600:	a201      	add	r2, pc, #4	; (adr r2, 800a608 <USBD_StdDevReq+0x44>)
 800a602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a606:	bf00      	nop
 800a608:	0800a659 	.word	0x0800a659
 800a60c:	0800a66d 	.word	0x0800a66d
 800a610:	0800a677 	.word	0x0800a677
 800a614:	0800a663 	.word	0x0800a663
 800a618:	0800a677 	.word	0x0800a677
 800a61c:	0800a63b 	.word	0x0800a63b
 800a620:	0800a631 	.word	0x0800a631
 800a624:	0800a677 	.word	0x0800a677
 800a628:	0800a64f 	.word	0x0800a64f
 800a62c:	0800a645 	.word	0x0800a645
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f9d4 	bl	800a9e0 <USBD_GetDescriptor>
          break;
 800a638:	e022      	b.n	800a680 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fb61 	bl	800ad04 <USBD_SetAddress>
          break;
 800a642:	e01d      	b.n	800a680 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fb9e 	bl	800ad88 <USBD_SetConfig>
          break;
 800a64c:	e018      	b.n	800a680 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fc27 	bl	800aea4 <USBD_GetConfig>
          break;
 800a656:	e013      	b.n	800a680 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a658:	6839      	ldr	r1, [r7, #0]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 fc56 	bl	800af0c <USBD_GetStatus>
          break;
 800a660:	e00e      	b.n	800a680 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fc84 	bl	800af72 <USBD_SetFeature>
          break;
 800a66a:	e009      	b.n	800a680 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fc93 	bl	800af9a <USBD_ClrFeature>
          break;
 800a674:	e004      	b.n	800a680 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fcec 	bl	800b056 <USBD_CtlError>
          break;
 800a67e:	bf00      	nop
      }
      break;
 800a680:	e004      	b.n	800a68c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fce6 	bl	800b056 <USBD_CtlError>
      break;
 800a68a:	bf00      	nop
  }

  return ret;
 800a68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop

0800a698 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6ae:	2b20      	cmp	r3, #32
 800a6b0:	d003      	beq.n	800a6ba <USBD_StdItfReq+0x22>
 800a6b2:	2b40      	cmp	r3, #64	; 0x40
 800a6b4:	d001      	beq.n	800a6ba <USBD_StdItfReq+0x22>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d12a      	bne.n	800a710 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d81d      	bhi.n	800a702 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	889b      	ldrh	r3, [r3, #4]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d813      	bhi.n	800a6f8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	4798      	blx	r3
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	88db      	ldrh	r3, [r3, #6]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d110      	bne.n	800a70c <USBD_StdItfReq+0x74>
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10d      	bne.n	800a70c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fd79 	bl	800b1e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6f6:	e009      	b.n	800a70c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fcab 	bl	800b056 <USBD_CtlError>
          break;
 800a700:	e004      	b.n	800a70c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fca6 	bl	800b056 <USBD_CtlError>
          break;
 800a70a:	e000      	b.n	800a70e <USBD_StdItfReq+0x76>
          break;
 800a70c:	bf00      	nop
      }
      break;
 800a70e:	e004      	b.n	800a71a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fc9f 	bl	800b056 <USBD_CtlError>
      break;
 800a718:	bf00      	nop
  }

  return USBD_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	889b      	ldrh	r3, [r3, #4]
 800a736:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a740:	2b20      	cmp	r3, #32
 800a742:	d004      	beq.n	800a74e <USBD_StdEPReq+0x2a>
 800a744:	2b40      	cmp	r3, #64	; 0x40
 800a746:	d002      	beq.n	800a74e <USBD_StdEPReq+0x2a>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d008      	beq.n	800a75e <USBD_StdEPReq+0x3a>
 800a74c:	e13d      	b.n	800a9ca <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	4798      	blx	r3
      break;
 800a75c:	e13a      	b.n	800a9d4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a766:	2b20      	cmp	r3, #32
 800a768:	d10a      	bne.n	800a780 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	4798      	blx	r3
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
 800a77e:	e12a      	b.n	800a9d6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	785b      	ldrb	r3, [r3, #1]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d03e      	beq.n	800a806 <USBD_StdEPReq+0xe2>
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d002      	beq.n	800a792 <USBD_StdEPReq+0x6e>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d070      	beq.n	800a872 <USBD_StdEPReq+0x14e>
 800a790:	e115      	b.n	800a9be <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d002      	beq.n	800a7a2 <USBD_StdEPReq+0x7e>
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d015      	beq.n	800a7cc <USBD_StdEPReq+0xa8>
 800a7a0:	e02b      	b.n	800a7fa <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00c      	beq.n	800a7c2 <USBD_StdEPReq+0x9e>
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	2b80      	cmp	r3, #128	; 0x80
 800a7ac:	d009      	beq.n	800a7c2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f001 f894 	bl	800b8e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a7b8:	2180      	movs	r1, #128	; 0x80
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 f890 	bl	800b8e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7c0:	e020      	b.n	800a804 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fc46 	bl	800b056 <USBD_CtlError>
              break;
 800a7ca:	e01b      	b.n	800a804 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	885b      	ldrh	r3, [r3, #2]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10e      	bne.n	800a7f2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00b      	beq.n	800a7f2 <USBD_StdEPReq+0xce>
 800a7da:	7bbb      	ldrb	r3, [r7, #14]
 800a7dc:	2b80      	cmp	r3, #128	; 0x80
 800a7de:	d008      	beq.n	800a7f2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	88db      	ldrh	r3, [r3, #6]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d104      	bne.n	800a7f2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 f877 	bl	800b8e0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fcf8 	bl	800b1e8 <USBD_CtlSendStatus>

              break;
 800a7f8:	e004      	b.n	800a804 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fc2a 	bl	800b056 <USBD_CtlError>
              break;
 800a802:	bf00      	nop
          }
          break;
 800a804:	e0e0      	b.n	800a9c8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d002      	beq.n	800a816 <USBD_StdEPReq+0xf2>
 800a810:	2b03      	cmp	r3, #3
 800a812:	d015      	beq.n	800a840 <USBD_StdEPReq+0x11c>
 800a814:	e026      	b.n	800a864 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00c      	beq.n	800a836 <USBD_StdEPReq+0x112>
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	2b80      	cmp	r3, #128	; 0x80
 800a820:	d009      	beq.n	800a836 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f001 f85a 	bl	800b8e0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a82c:	2180      	movs	r1, #128	; 0x80
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 f856 	bl	800b8e0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a834:	e01c      	b.n	800a870 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fc0c 	bl	800b056 <USBD_CtlError>
              break;
 800a83e:	e017      	b.n	800a870 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	885b      	ldrh	r3, [r3, #2]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d112      	bne.n	800a86e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d004      	beq.n	800a85c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f001 f861 	bl	800b91e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fcc3 	bl	800b1e8 <USBD_CtlSendStatus>
              }
              break;
 800a862:	e004      	b.n	800a86e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fbf5 	bl	800b056 <USBD_CtlError>
              break;
 800a86c:	e000      	b.n	800a870 <USBD_StdEPReq+0x14c>
              break;
 800a86e:	bf00      	nop
          }
          break;
 800a870:	e0aa      	b.n	800a9c8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d002      	beq.n	800a882 <USBD_StdEPReq+0x15e>
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d032      	beq.n	800a8e6 <USBD_StdEPReq+0x1c2>
 800a880:	e097      	b.n	800a9b2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a882:	7bbb      	ldrb	r3, [r7, #14]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d007      	beq.n	800a898 <USBD_StdEPReq+0x174>
 800a888:	7bbb      	ldrb	r3, [r7, #14]
 800a88a:	2b80      	cmp	r3, #128	; 0x80
 800a88c:	d004      	beq.n	800a898 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fbe0 	bl	800b056 <USBD_CtlError>
                break;
 800a896:	e091      	b.n	800a9bc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a898:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	da0b      	bge.n	800a8b8 <USBD_StdEPReq+0x194>
 800a8a0:	7bbb      	ldrb	r3, [r7, #14]
 800a8a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	3310      	adds	r3, #16
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	e00b      	b.n	800a8d0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8be:	4613      	mov	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fc24 	bl	800b12c <USBD_CtlSendData>
              break;
 800a8e4:	e06a      	b.n	800a9bc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	da11      	bge.n	800a912 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	f003 020f 	and.w	r2, r3, #15
 800a8f4:	6879      	ldr	r1, [r7, #4]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	440b      	add	r3, r1
 800a900:	3318      	adds	r3, #24
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d117      	bne.n	800a938 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fba3 	bl	800b056 <USBD_CtlError>
                  break;
 800a910:	e054      	b.n	800a9bc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	f003 020f 	and.w	r2, r3, #15
 800a918:	6879      	ldr	r1, [r7, #4]
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	440b      	add	r3, r1
 800a924:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d104      	bne.n	800a938 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 fb90 	bl	800b056 <USBD_CtlError>
                  break;
 800a936:	e041      	b.n	800a9bc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da0b      	bge.n	800a958 <USBD_StdEPReq+0x234>
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a946:	4613      	mov	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	3310      	adds	r3, #16
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	4413      	add	r3, r2
 800a954:	3304      	adds	r3, #4
 800a956:	e00b      	b.n	800a970 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a958:	7bbb      	ldrb	r3, [r7, #14]
 800a95a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	4413      	add	r3, r2
 800a96e:	3304      	adds	r3, #4
 800a970:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <USBD_StdEPReq+0x25a>
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	2b80      	cmp	r3, #128	; 0x80
 800a97c:	d103      	bne.n	800a986 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2200      	movs	r2, #0
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	e00e      	b.n	800a9a4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 ffe6 	bl	800b95c <USBD_LL_IsStallEP>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2201      	movs	r2, #1
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	e002      	b.n	800a9a4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fbbe 	bl	800b12c <USBD_CtlSendData>
              break;
 800a9b0:	e004      	b.n	800a9bc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fb4e 	bl	800b056 <USBD_CtlError>
              break;
 800a9ba:	bf00      	nop
          }
          break;
 800a9bc:	e004      	b.n	800a9c8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fb48 	bl	800b056 <USBD_CtlError>
          break;
 800a9c6:	bf00      	nop
      }
      break;
 800a9c8:	e004      	b.n	800a9d4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fb42 	bl	800b056 <USBD_CtlError>
      break;
 800a9d2:	bf00      	nop
  }

  return ret;
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	885b      	ldrh	r3, [r3, #2]
 800a9fa:	0a1b      	lsrs	r3, r3, #8
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	2b0e      	cmp	r3, #14
 800aa02:	f200 8152 	bhi.w	800acaa <USBD_GetDescriptor+0x2ca>
 800aa06:	a201      	add	r2, pc, #4	; (adr r2, 800aa0c <USBD_GetDescriptor+0x2c>)
 800aa08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0c:	0800aa7d 	.word	0x0800aa7d
 800aa10:	0800aa95 	.word	0x0800aa95
 800aa14:	0800aad5 	.word	0x0800aad5
 800aa18:	0800acab 	.word	0x0800acab
 800aa1c:	0800acab 	.word	0x0800acab
 800aa20:	0800ac4b 	.word	0x0800ac4b
 800aa24:	0800ac77 	.word	0x0800ac77
 800aa28:	0800acab 	.word	0x0800acab
 800aa2c:	0800acab 	.word	0x0800acab
 800aa30:	0800acab 	.word	0x0800acab
 800aa34:	0800acab 	.word	0x0800acab
 800aa38:	0800acab 	.word	0x0800acab
 800aa3c:	0800acab 	.word	0x0800acab
 800aa40:	0800acab 	.word	0x0800acab
 800aa44:	0800aa49 	.word	0x0800aa49
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa4e:	69db      	ldr	r3, [r3, #28]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	7c12      	ldrb	r2, [r2, #16]
 800aa60:	f107 0108 	add.w	r1, r7, #8
 800aa64:	4610      	mov	r0, r2
 800aa66:	4798      	blx	r3
 800aa68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa6a:	e126      	b.n	800acba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 faf1 	bl	800b056 <USBD_CtlError>
        err++;
 800aa74:	7afb      	ldrb	r3, [r7, #11]
 800aa76:	3301      	adds	r3, #1
 800aa78:	72fb      	strb	r3, [r7, #11]
      break;
 800aa7a:	e11e      	b.n	800acba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7c12      	ldrb	r2, [r2, #16]
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	4798      	blx	r3
 800aa90:	60f8      	str	r0, [r7, #12]
      break;
 800aa92:	e112      	b.n	800acba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7c1b      	ldrb	r3, [r3, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10d      	bne.n	800aab8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa4:	f107 0208 	add.w	r2, r7, #8
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	4798      	blx	r3
 800aaac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3301      	adds	r3, #1
 800aab2:	2202      	movs	r2, #2
 800aab4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aab6:	e100      	b.n	800acba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	f107 0208 	add.w	r2, r7, #8
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3301      	adds	r3, #1
 800aace:	2202      	movs	r2, #2
 800aad0:	701a      	strb	r2, [r3, #0]
      break;
 800aad2:	e0f2      	b.n	800acba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	885b      	ldrh	r3, [r3, #2]
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b05      	cmp	r3, #5
 800aadc:	f200 80ac 	bhi.w	800ac38 <USBD_GetDescriptor+0x258>
 800aae0:	a201      	add	r2, pc, #4	; (adr r2, 800aae8 <USBD_GetDescriptor+0x108>)
 800aae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae6:	bf00      	nop
 800aae8:	0800ab01 	.word	0x0800ab01
 800aaec:	0800ab35 	.word	0x0800ab35
 800aaf0:	0800ab69 	.word	0x0800ab69
 800aaf4:	0800ab9d 	.word	0x0800ab9d
 800aaf8:	0800abd1 	.word	0x0800abd1
 800aafc:	0800ac05 	.word	0x0800ac05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00b      	beq.n	800ab24 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	7c12      	ldrb	r2, [r2, #16]
 800ab18:	f107 0108 	add.w	r1, r7, #8
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	4798      	blx	r3
 800ab20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab22:	e091      	b.n	800ac48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fa95 	bl	800b056 <USBD_CtlError>
            err++;
 800ab2c:	7afb      	ldrb	r3, [r7, #11]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	72fb      	strb	r3, [r7, #11]
          break;
 800ab32:	e089      	b.n	800ac48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	7c12      	ldrb	r2, [r2, #16]
 800ab4c:	f107 0108 	add.w	r1, r7, #8
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab56:	e077      	b.n	800ac48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fa7b 	bl	800b056 <USBD_CtlError>
            err++;
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	3301      	adds	r3, #1
 800ab64:	72fb      	strb	r3, [r7, #11]
          break;
 800ab66:	e06f      	b.n	800ac48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	7c12      	ldrb	r2, [r2, #16]
 800ab80:	f107 0108 	add.w	r1, r7, #8
 800ab84:	4610      	mov	r0, r2
 800ab86:	4798      	blx	r3
 800ab88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab8a:	e05d      	b.n	800ac48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fa61 	bl	800b056 <USBD_CtlError>
            err++;
 800ab94:	7afb      	ldrb	r3, [r7, #11]
 800ab96:	3301      	adds	r3, #1
 800ab98:	72fb      	strb	r3, [r7, #11]
          break;
 800ab9a:	e055      	b.n	800ac48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	7c12      	ldrb	r2, [r2, #16]
 800abb4:	f107 0108 	add.w	r1, r7, #8
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abbe:	e043      	b.n	800ac48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa47 	bl	800b056 <USBD_CtlError>
            err++;
 800abc8:	7afb      	ldrb	r3, [r7, #11]
 800abca:	3301      	adds	r3, #1
 800abcc:	72fb      	strb	r3, [r7, #11]
          break;
 800abce:	e03b      	b.n	800ac48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00b      	beq.n	800abf4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	7c12      	ldrb	r2, [r2, #16]
 800abe8:	f107 0108 	add.w	r1, r7, #8
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
 800abf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abf2:	e029      	b.n	800ac48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa2d 	bl	800b056 <USBD_CtlError>
            err++;
 800abfc:	7afb      	ldrb	r3, [r7, #11]
 800abfe:	3301      	adds	r3, #1
 800ac00:	72fb      	strb	r3, [r7, #11]
          break;
 800ac02:	e021      	b.n	800ac48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	7c12      	ldrb	r2, [r2, #16]
 800ac1c:	f107 0108 	add.w	r1, r7, #8
 800ac20:	4610      	mov	r0, r2
 800ac22:	4798      	blx	r3
 800ac24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac26:	e00f      	b.n	800ac48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa13 	bl	800b056 <USBD_CtlError>
            err++;
 800ac30:	7afb      	ldrb	r3, [r7, #11]
 800ac32:	3301      	adds	r3, #1
 800ac34:	72fb      	strb	r3, [r7, #11]
          break;
 800ac36:	e007      	b.n	800ac48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fa0b 	bl	800b056 <USBD_CtlError>
          err++;
 800ac40:	7afb      	ldrb	r3, [r7, #11]
 800ac42:	3301      	adds	r3, #1
 800ac44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ac46:	e038      	b.n	800acba <USBD_GetDescriptor+0x2da>
 800ac48:	e037      	b.n	800acba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	7c1b      	ldrb	r3, [r3, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d109      	bne.n	800ac66 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5a:	f107 0208 	add.w	r2, r7, #8
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4798      	blx	r3
 800ac62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac64:	e029      	b.n	800acba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f9f4 	bl	800b056 <USBD_CtlError>
        err++;
 800ac6e:	7afb      	ldrb	r3, [r7, #11]
 800ac70:	3301      	adds	r3, #1
 800ac72:	72fb      	strb	r3, [r7, #11]
      break;
 800ac74:	e021      	b.n	800acba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	7c1b      	ldrb	r3, [r3, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10d      	bne.n	800ac9a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac86:	f107 0208 	add.w	r2, r7, #8
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	4798      	blx	r3
 800ac8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	2207      	movs	r2, #7
 800ac96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac98:	e00f      	b.n	800acba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f9da 	bl	800b056 <USBD_CtlError>
        err++;
 800aca2:	7afb      	ldrb	r3, [r7, #11]
 800aca4:	3301      	adds	r3, #1
 800aca6:	72fb      	strb	r3, [r7, #11]
      break;
 800aca8:	e007      	b.n	800acba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f9d2 	bl	800b056 <USBD_CtlError>
      err++;
 800acb2:	7afb      	ldrb	r3, [r7, #11]
 800acb4:	3301      	adds	r3, #1
 800acb6:	72fb      	strb	r3, [r7, #11]
      break;
 800acb8:	bf00      	nop
  }

  if (err != 0U)
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d11c      	bne.n	800acfa <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800acc0:	893b      	ldrh	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d011      	beq.n	800acea <USBD_GetDescriptor+0x30a>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	88db      	ldrh	r3, [r3, #6]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00d      	beq.n	800acea <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	88da      	ldrh	r2, [r3, #6]
 800acd2:	893b      	ldrh	r3, [r7, #8]
 800acd4:	4293      	cmp	r3, r2
 800acd6:	bf28      	it	cs
 800acd8:	4613      	movcs	r3, r2
 800acda:	b29b      	uxth	r3, r3
 800acdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acde:	893b      	ldrh	r3, [r7, #8]
 800ace0:	461a      	mov	r2, r3
 800ace2:	68f9      	ldr	r1, [r7, #12]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fa21 	bl	800b12c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	88db      	ldrh	r3, [r3, #6]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d104      	bne.n	800acfc <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fa78 	bl	800b1e8 <USBD_CtlSendStatus>
 800acf8:	e000      	b.n	800acfc <USBD_GetDescriptor+0x31c>
    return;
 800acfa:	bf00      	nop
    }
  }
}
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop

0800ad04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	889b      	ldrh	r3, [r3, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d130      	bne.n	800ad78 <USBD_SetAddress+0x74>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	88db      	ldrh	r3, [r3, #6]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d12c      	bne.n	800ad78 <USBD_SetAddress+0x74>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	885b      	ldrh	r3, [r3, #2]
 800ad22:	2b7f      	cmp	r3, #127	; 0x7f
 800ad24:	d828      	bhi.n	800ad78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	885b      	ldrh	r3, [r3, #2]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d104      	bne.n	800ad46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f989 	bl	800b056 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad44:	e01c      	b.n	800ad80 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	7bfa      	ldrb	r2, [r7, #15]
 800ad4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fe28 	bl	800b9a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fa45 	bl	800b1e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2202      	movs	r2, #2
 800ad68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6c:	e008      	b.n	800ad80 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad76:	e003      	b.n	800ad80 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f96b 	bl	800b056 <USBD_CtlError>
  }
}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	885b      	ldrh	r3, [r3, #2]
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	4b41      	ldr	r3, [pc, #260]	; (800aea0 <USBD_SetConfig+0x118>)
 800ad9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad9c:	4b40      	ldr	r3, [pc, #256]	; (800aea0 <USBD_SetConfig+0x118>)
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d904      	bls.n	800adae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f955 	bl	800b056 <USBD_CtlError>
 800adac:	e075      	b.n	800ae9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d002      	beq.n	800adbe <USBD_SetConfig+0x36>
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d023      	beq.n	800ae04 <USBD_SetConfig+0x7c>
 800adbc:	e062      	b.n	800ae84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800adbe:	4b38      	ldr	r3, [pc, #224]	; (800aea0 <USBD_SetConfig+0x118>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d01a      	beq.n	800adfc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800adc6:	4b36      	ldr	r3, [pc, #216]	; (800aea0 <USBD_SetConfig+0x118>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2203      	movs	r2, #3
 800add4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800add8:	4b31      	ldr	r3, [pc, #196]	; (800aea0 <USBD_SetConfig+0x118>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff f9c7 	bl	800a172 <USBD_SetClassConfig>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d104      	bne.n	800adf4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f932 	bl	800b056 <USBD_CtlError>
            return;
 800adf2:	e052      	b.n	800ae9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f9f7 	bl	800b1e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800adfa:	e04e      	b.n	800ae9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f9f3 	bl	800b1e8 <USBD_CtlSendStatus>
        break;
 800ae02:	e04a      	b.n	800ae9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ae04:	4b26      	ldr	r3, [pc, #152]	; (800aea0 <USBD_SetConfig+0x118>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d112      	bne.n	800ae32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2202      	movs	r2, #2
 800ae10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ae14:	4b22      	ldr	r3, [pc, #136]	; (800aea0 <USBD_SetConfig+0x118>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ae1e:	4b20      	ldr	r3, [pc, #128]	; (800aea0 <USBD_SetConfig+0x118>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff f9c3 	bl	800a1b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f9dc 	bl	800b1e8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ae30:	e033      	b.n	800ae9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ae32:	4b1b      	ldr	r3, [pc, #108]	; (800aea0 <USBD_SetConfig+0x118>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d01d      	beq.n	800ae7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f7ff f9b1 	bl	800a1b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ae4e:	4b14      	ldr	r3, [pc, #80]	; (800aea0 <USBD_SetConfig+0x118>)
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ae58:	4b11      	ldr	r3, [pc, #68]	; (800aea0 <USBD_SetConfig+0x118>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff f987 	bl	800a172 <USBD_SetClassConfig>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d104      	bne.n	800ae74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f8f2 	bl	800b056 <USBD_CtlError>
            return;
 800ae72:	e012      	b.n	800ae9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f9b7 	bl	800b1e8 <USBD_CtlSendStatus>
        break;
 800ae7a:	e00e      	b.n	800ae9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f9b3 	bl	800b1e8 <USBD_CtlSendStatus>
        break;
 800ae82:	e00a      	b.n	800ae9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f8e5 	bl	800b056 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ae8c:	4b04      	ldr	r3, [pc, #16]	; (800aea0 <USBD_SetConfig+0x118>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff f98c 	bl	800a1b0 <USBD_ClrClassConfig>
        break;
 800ae98:	bf00      	nop
    }
  }
}
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	200001ac 	.word	0x200001ac

0800aea4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	88db      	ldrh	r3, [r3, #6]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d004      	beq.n	800aec0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f8cc 	bl	800b056 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aebe:	e021      	b.n	800af04 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	db17      	blt.n	800aefa <USBD_GetConfig+0x56>
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	dd02      	ble.n	800aed4 <USBD_GetConfig+0x30>
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d00b      	beq.n	800aeea <USBD_GetConfig+0x46>
 800aed2:	e012      	b.n	800aefa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3308      	adds	r3, #8
 800aede:	2201      	movs	r2, #1
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f922 	bl	800b12c <USBD_CtlSendData>
        break;
 800aee8:	e00c      	b.n	800af04 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3304      	adds	r3, #4
 800aeee:	2201      	movs	r2, #1
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f91a 	bl	800b12c <USBD_CtlSendData>
        break;
 800aef8:	e004      	b.n	800af04 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f8aa 	bl	800b056 <USBD_CtlError>
        break;
 800af02:	bf00      	nop
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af1c:	3b01      	subs	r3, #1
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d81e      	bhi.n	800af60 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	88db      	ldrh	r3, [r3, #6]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d004      	beq.n	800af34 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f892 	bl	800b056 <USBD_CtlError>
        break;
 800af32:	e01a      	b.n	800af6a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af40:	2b00      	cmp	r3, #0
 800af42:	d005      	beq.n	800af50 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	f043 0202 	orr.w	r2, r3, #2
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	330c      	adds	r3, #12
 800af54:	2202      	movs	r2, #2
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f8e7 	bl	800b12c <USBD_CtlSendData>
      break;
 800af5e:	e004      	b.n	800af6a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f877 	bl	800b056 <USBD_CtlError>
      break;
 800af68:	bf00      	nop
  }
}
 800af6a:	bf00      	nop
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	885b      	ldrh	r3, [r3, #2]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d106      	bne.n	800af92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f92b 	bl	800b1e8 <USBD_CtlSendStatus>
  }
}
 800af92:	bf00      	nop
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afaa:	3b01      	subs	r3, #1
 800afac:	2b02      	cmp	r3, #2
 800afae:	d80b      	bhi.n	800afc8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	885b      	ldrh	r3, [r3, #2]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d10c      	bne.n	800afd2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f911 	bl	800b1e8 <USBD_CtlSendStatus>
      }
      break;
 800afc6:	e004      	b.n	800afd2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f843 	bl	800b056 <USBD_CtlError>
      break;
 800afd0:	e000      	b.n	800afd4 <USBD_ClrFeature+0x3a>
      break;
 800afd2:	bf00      	nop
  }
}
 800afd4:	bf00      	nop
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781a      	ldrb	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	785a      	ldrb	r2, [r3, #1]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	3302      	adds	r3, #2
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	b29a      	uxth	r2, r3
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	3303      	adds	r3, #3
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	b29b      	uxth	r3, r3
 800b006:	021b      	lsls	r3, r3, #8
 800b008:	b29b      	uxth	r3, r3
 800b00a:	4413      	add	r3, r2
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	3304      	adds	r3, #4
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	b29a      	uxth	r2, r3
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	3305      	adds	r3, #5
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	b29b      	uxth	r3, r3
 800b022:	021b      	lsls	r3, r3, #8
 800b024:	b29b      	uxth	r3, r3
 800b026:	4413      	add	r3, r2
 800b028:	b29a      	uxth	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	3306      	adds	r3, #6
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	b29a      	uxth	r2, r3
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	3307      	adds	r3, #7
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	021b      	lsls	r3, r3, #8
 800b040:	b29b      	uxth	r3, r3
 800b042:	4413      	add	r3, r2
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	80da      	strh	r2, [r3, #6]

}
 800b04a:	bf00      	nop
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b060:	2180      	movs	r1, #128	; 0x80
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fc3c 	bl	800b8e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b068:	2100      	movs	r1, #0
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fc38 	bl	800b8e0 <USBD_LL_StallEP>
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b084:	2300      	movs	r3, #0
 800b086:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d032      	beq.n	800b0f4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 f834 	bl	800b0fc <USBD_GetLen>
 800b094:	4603      	mov	r3, r0
 800b096:	3301      	adds	r3, #1
 800b098:	b29b      	uxth	r3, r3
 800b09a:	005b      	lsls	r3, r3, #1
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	1c5a      	adds	r2, r3, #1
 800b0a6:	75fa      	strb	r2, [r7, #23]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	7812      	ldrb	r2, [r2, #0]
 800b0b2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	75fa      	strb	r2, [r7, #23]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	4413      	add	r3, r2
 800b0c0:	2203      	movs	r2, #3
 800b0c2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b0c4:	e012      	b.n	800b0ec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	60fa      	str	r2, [r7, #12]
 800b0cc:	7dfa      	ldrb	r2, [r7, #23]
 800b0ce:	1c51      	adds	r1, r2, #1
 800b0d0:	75f9      	strb	r1, [r7, #23]
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	440a      	add	r2, r1
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b0dc:	7dfb      	ldrb	r3, [r7, #23]
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	75fa      	strb	r2, [r7, #23]
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1e8      	bne.n	800b0c6 <USBD_GetString+0x4e>
    }
  }
}
 800b0f4:	bf00      	nop
 800b0f6:	3718      	adds	r7, #24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b108:	e005      	b.n	800b116 <USBD_GetLen+0x1a>
  {
    len++;
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	3301      	adds	r3, #1
 800b10e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3301      	adds	r3, #1
 800b114:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1f5      	bne.n	800b10a <USBD_GetLen+0xe>
  }

  return len;
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	4613      	mov	r3, r2
 800b138:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2202      	movs	r2, #2
 800b13e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b142:	88fa      	ldrh	r2, [r7, #6]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b148:	88fa      	ldrh	r2, [r7, #6]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b14e:	88fb      	ldrh	r3, [r7, #6]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	2100      	movs	r1, #0
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 fc46 	bl	800b9e6 <USBD_LL_Transmit>

  return USBD_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b172:	88fb      	ldrh	r3, [r7, #6]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	2100      	movs	r1, #0
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f000 fc34 	bl	800b9e6 <USBD_LL_Transmit>

  return USBD_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	4613      	mov	r3, r2
 800b194:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2203      	movs	r2, #3
 800b19a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b19e:	88fa      	ldrh	r2, [r7, #6]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b1a6:	88fa      	ldrh	r2, [r7, #6]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1ae:	88fb      	ldrh	r3, [r7, #6]
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f000 fc39 	bl	800ba2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1d2:	88fb      	ldrh	r3, [r7, #6]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f000 fc27 	bl	800ba2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fbf1 	bl	800b9e6 <USBD_LL_Transmit>

  return USBD_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2205      	movs	r2, #5
 800b21a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b21e:	2300      	movs	r3, #0
 800b220:	2200      	movs	r2, #0
 800b222:	2100      	movs	r1, #0
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fc01 	bl	800ba2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b238:	2200      	movs	r2, #0
 800b23a:	4912      	ldr	r1, [pc, #72]	; (800b284 <MX_USB_Device_Init+0x50>)
 800b23c:	4812      	ldr	r0, [pc, #72]	; (800b288 <MX_USB_Device_Init+0x54>)
 800b23e:	f7fe ff3c 	bl	800a0ba <USBD_Init>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b248:	f7f5 fe48 	bl	8000edc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b24c:	490f      	ldr	r1, [pc, #60]	; (800b28c <MX_USB_Device_Init+0x58>)
 800b24e:	480e      	ldr	r0, [pc, #56]	; (800b288 <MX_USB_Device_Init+0x54>)
 800b250:	f7fe ff5e 	bl	800a110 <USBD_RegisterClass>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b25a:	f7f5 fe3f 	bl	8000edc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b25e:	490c      	ldr	r1, [pc, #48]	; (800b290 <MX_USB_Device_Init+0x5c>)
 800b260:	4809      	ldr	r0, [pc, #36]	; (800b288 <MX_USB_Device_Init+0x54>)
 800b262:	f7fe febb 	bl	8009fdc <USBD_CDC_RegisterInterface>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b26c:	f7f5 fe36 	bl	8000edc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b270:	4805      	ldr	r0, [pc, #20]	; (800b288 <MX_USB_Device_Init+0x54>)
 800b272:	f7fe ff67 	bl	800a144 <USBD_Start>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b27c:	f7f5 fe2e 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b280:	bf00      	nop
 800b282:	bd80      	pop	{r7, pc}
 800b284:	2000012c 	.word	0x2000012c
 800b288:	200007b8 	.word	0x200007b8
 800b28c:	20000018 	.word	0x20000018
 800b290:	2000011c 	.word	0x2000011c

0800b294 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b298:	2200      	movs	r2, #0
 800b29a:	4905      	ldr	r1, [pc, #20]	; (800b2b0 <CDC_Init_FS+0x1c>)
 800b29c:	4805      	ldr	r0, [pc, #20]	; (800b2b4 <CDC_Init_FS+0x20>)
 800b29e:	f7fe feb4 	bl	800a00a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2a2:	4905      	ldr	r1, [pc, #20]	; (800b2b8 <CDC_Init_FS+0x24>)
 800b2a4:	4803      	ldr	r0, [pc, #12]	; (800b2b4 <CDC_Init_FS+0x20>)
 800b2a6:	f7fe feca 	bl	800a03e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	2000127c 	.word	0x2000127c
 800b2b4:	200007b8 	.word	0x200007b8
 800b2b8:	20000a7c 	.word	0x20000a7c

0800b2bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	6039      	str	r1, [r7, #0]
 800b2d6:	71fb      	strb	r3, [r7, #7]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	2b23      	cmp	r3, #35	; 0x23
 800b2e0:	d84a      	bhi.n	800b378 <CDC_Control_FS+0xac>
 800b2e2:	a201      	add	r2, pc, #4	; (adr r2, 800b2e8 <CDC_Control_FS+0x1c>)
 800b2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e8:	0800b379 	.word	0x0800b379
 800b2ec:	0800b379 	.word	0x0800b379
 800b2f0:	0800b379 	.word	0x0800b379
 800b2f4:	0800b379 	.word	0x0800b379
 800b2f8:	0800b379 	.word	0x0800b379
 800b2fc:	0800b379 	.word	0x0800b379
 800b300:	0800b379 	.word	0x0800b379
 800b304:	0800b379 	.word	0x0800b379
 800b308:	0800b379 	.word	0x0800b379
 800b30c:	0800b379 	.word	0x0800b379
 800b310:	0800b379 	.word	0x0800b379
 800b314:	0800b379 	.word	0x0800b379
 800b318:	0800b379 	.word	0x0800b379
 800b31c:	0800b379 	.word	0x0800b379
 800b320:	0800b379 	.word	0x0800b379
 800b324:	0800b379 	.word	0x0800b379
 800b328:	0800b379 	.word	0x0800b379
 800b32c:	0800b379 	.word	0x0800b379
 800b330:	0800b379 	.word	0x0800b379
 800b334:	0800b379 	.word	0x0800b379
 800b338:	0800b379 	.word	0x0800b379
 800b33c:	0800b379 	.word	0x0800b379
 800b340:	0800b379 	.word	0x0800b379
 800b344:	0800b379 	.word	0x0800b379
 800b348:	0800b379 	.word	0x0800b379
 800b34c:	0800b379 	.word	0x0800b379
 800b350:	0800b379 	.word	0x0800b379
 800b354:	0800b379 	.word	0x0800b379
 800b358:	0800b379 	.word	0x0800b379
 800b35c:	0800b379 	.word	0x0800b379
 800b360:	0800b379 	.word	0x0800b379
 800b364:	0800b379 	.word	0x0800b379
 800b368:	0800b379 	.word	0x0800b379
 800b36c:	0800b379 	.word	0x0800b379
 800b370:	0800b379 	.word	0x0800b379
 800b374:	0800b379 	.word	0x0800b379
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b378:	bf00      	nop
  }

  return (USBD_OK);
 800b37a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	4805      	ldr	r0, [pc, #20]	; (800b3ac <CDC_Receive_FS+0x24>)
 800b396:	f7fe fe52 	bl	800a03e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b39a:	4804      	ldr	r0, [pc, #16]	; (800b3ac <CDC_Receive_FS+0x24>)
 800b39c:	f7fe fe63 	bl	800a066 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b3a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	200007b8 	.word	0x200007b8

0800b3b0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	6039      	str	r1, [r7, #0]
 800b3ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	2212      	movs	r2, #18
 800b3c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b3c2:	4b03      	ldr	r3, [pc, #12]	; (800b3d0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	2000014c 	.word	0x2000014c

0800b3d4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	6039      	str	r1, [r7, #0]
 800b3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b3e6:	4b03      	ldr	r3, [pc, #12]	; (800b3f4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	20000160 	.word	0x20000160

0800b3f8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4603      	mov	r3, r0
 800b400:	6039      	str	r1, [r7, #0]
 800b402:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d105      	bne.n	800b416 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b40a:	683a      	ldr	r2, [r7, #0]
 800b40c:	4907      	ldr	r1, [pc, #28]	; (800b42c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b40e:	4808      	ldr	r0, [pc, #32]	; (800b430 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b410:	f7ff fe32 	bl	800b078 <USBD_GetString>
 800b414:	e004      	b.n	800b420 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	4904      	ldr	r1, [pc, #16]	; (800b42c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b41a:	4805      	ldr	r0, [pc, #20]	; (800b430 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b41c:	f7ff fe2c 	bl	800b078 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b420:	4b02      	ldr	r3, [pc, #8]	; (800b42c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	20001a7c 	.word	0x20001a7c
 800b430:	0800bc18 	.word	0x0800bc18

0800b434 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4603      	mov	r3, r0
 800b43c:	6039      	str	r1, [r7, #0]
 800b43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	4904      	ldr	r1, [pc, #16]	; (800b454 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b444:	4804      	ldr	r0, [pc, #16]	; (800b458 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b446:	f7ff fe17 	bl	800b078 <USBD_GetString>
  return USBD_StrDesc;
 800b44a:	4b02      	ldr	r3, [pc, #8]	; (800b454 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	20001a7c 	.word	0x20001a7c
 800b458:	0800bc30 	.word	0x0800bc30

0800b45c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	4603      	mov	r3, r0
 800b464:	6039      	str	r1, [r7, #0]
 800b466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	221a      	movs	r2, #26
 800b46c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b46e:	f000 f843 	bl	800b4f8 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b472:	4b02      	ldr	r3, [pc, #8]	; (800b47c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b474:	4618      	mov	r0, r3
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	20000164 	.word	0x20000164

0800b480 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	4603      	mov	r3, r0
 800b488:	6039      	str	r1, [r7, #0]
 800b48a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b48c:	79fb      	ldrb	r3, [r7, #7]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d105      	bne.n	800b49e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	4907      	ldr	r1, [pc, #28]	; (800b4b4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b496:	4808      	ldr	r0, [pc, #32]	; (800b4b8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b498:	f7ff fdee 	bl	800b078 <USBD_GetString>
 800b49c:	e004      	b.n	800b4a8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	4904      	ldr	r1, [pc, #16]	; (800b4b4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b4a2:	4805      	ldr	r0, [pc, #20]	; (800b4b8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b4a4:	f7ff fde8 	bl	800b078 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4a8:	4b02      	ldr	r3, [pc, #8]	; (800b4b4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20001a7c 	.word	0x20001a7c
 800b4b8:	0800bc44 	.word	0x0800bc44

0800b4bc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	6039      	str	r1, [r7, #0]
 800b4c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4c8:	79fb      	ldrb	r3, [r7, #7]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d105      	bne.n	800b4da <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	4907      	ldr	r1, [pc, #28]	; (800b4f0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b4d2:	4808      	ldr	r0, [pc, #32]	; (800b4f4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b4d4:	f7ff fdd0 	bl	800b078 <USBD_GetString>
 800b4d8:	e004      	b.n	800b4e4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	4904      	ldr	r1, [pc, #16]	; (800b4f0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b4de:	4805      	ldr	r0, [pc, #20]	; (800b4f4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b4e0:	f7ff fdca 	bl	800b078 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4e4:	4b02      	ldr	r3, [pc, #8]	; (800b4f0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20001a7c 	.word	0x20001a7c
 800b4f4:	0800bc50 	.word	0x0800bc50

0800b4f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b4fe:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <Get_SerialNum+0x44>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b504:	4b0e      	ldr	r3, [pc, #56]	; (800b540 <Get_SerialNum+0x48>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b50a:	4b0e      	ldr	r3, [pc, #56]	; (800b544 <Get_SerialNum+0x4c>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4413      	add	r3, r2
 800b516:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d009      	beq.n	800b532 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b51e:	2208      	movs	r2, #8
 800b520:	4909      	ldr	r1, [pc, #36]	; (800b548 <Get_SerialNum+0x50>)
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f000 f814 	bl	800b550 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b528:	2204      	movs	r2, #4
 800b52a:	4908      	ldr	r1, [pc, #32]	; (800b54c <Get_SerialNum+0x54>)
 800b52c:	68b8      	ldr	r0, [r7, #8]
 800b52e:	f000 f80f 	bl	800b550 <IntToUnicode>
  }
}
 800b532:	bf00      	nop
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	1fff7590 	.word	0x1fff7590
 800b540:	1fff7594 	.word	0x1fff7594
 800b544:	1fff7598 	.word	0x1fff7598
 800b548:	20000166 	.word	0x20000166
 800b54c:	20000176 	.word	0x20000176

0800b550 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b550:	b480      	push	{r7}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	4613      	mov	r3, r2
 800b55c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b562:	2300      	movs	r3, #0
 800b564:	75fb      	strb	r3, [r7, #23]
 800b566:	e027      	b.n	800b5b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	0f1b      	lsrs	r3, r3, #28
 800b56c:	2b09      	cmp	r3, #9
 800b56e:	d80b      	bhi.n	800b588 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	0f1b      	lsrs	r3, r3, #28
 800b574:	b2da      	uxtb	r2, r3
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	4619      	mov	r1, r3
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	440b      	add	r3, r1
 800b580:	3230      	adds	r2, #48	; 0x30
 800b582:	b2d2      	uxtb	r2, r2
 800b584:	701a      	strb	r2, [r3, #0]
 800b586:	e00a      	b.n	800b59e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	0f1b      	lsrs	r3, r3, #28
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	4619      	mov	r1, r3
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	440b      	add	r3, r1
 800b598:	3237      	adds	r2, #55	; 0x37
 800b59a:	b2d2      	uxtb	r2, r2
 800b59c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5b2:	7dfb      	ldrb	r3, [r7, #23]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	75fb      	strb	r3, [r7, #23]
 800b5b8:	7dfa      	ldrb	r2, [r7, #23]
 800b5ba:	79fb      	ldrb	r3, [r7, #7]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d3d3      	bcc.n	800b568 <IntToUnicode+0x18>
  }
}
 800b5c0:	bf00      	nop
 800b5c2:	371c      	adds	r7, #28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a0d      	ldr	r2, [pc, #52]	; (800b610 <HAL_PCD_MspInit+0x44>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d113      	bne.n	800b606 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b5de:	4b0d      	ldr	r3, [pc, #52]	; (800b614 <HAL_PCD_MspInit+0x48>)
 800b5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e2:	4a0c      	ldr	r2, [pc, #48]	; (800b614 <HAL_PCD_MspInit+0x48>)
 800b5e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5e8:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ea:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <HAL_PCD_MspInit+0x48>)
 800b5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	2014      	movs	r0, #20
 800b5fc:	f7f7 fd5d 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b600:	2014      	movs	r0, #20
 800b602:	f7f7 fd74 	bl	80030ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b606:	bf00      	nop
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	40005c00 	.word	0x40005c00
 800b614:	40021000 	.word	0x40021000

0800b618 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b62c:	4619      	mov	r1, r3
 800b62e:	4610      	mov	r0, r2
 800b630:	f7fe fdd1 	bl	800a1d6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b634:	bf00      	nop
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800b64e:	78fb      	ldrb	r3, [r7, #3]
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	015b      	lsls	r3, r3, #5
 800b654:	4413      	add	r3, r2
 800b656:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	78fb      	ldrb	r3, [r7, #3]
 800b65e:	4619      	mov	r1, r3
 800b660:	f7fe fe04 	bl	800a26c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b664:	bf00      	nop
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800b67e:	78fb      	ldrb	r3, [r7, #3]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	015b      	lsls	r3, r3, #5
 800b684:	4413      	add	r3, r2
 800b686:	333c      	adds	r3, #60	; 0x3c
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	4619      	mov	r1, r3
 800b68e:	f7fe fe5e 	bl	800a34e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b692:	bf00      	nop
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fe ff71 	bl	800a590 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b6ae:	bf00      	nop
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d001      	beq.n	800b6ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b6ca:	f7f5 fc07 	bl	8000edc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b6d4:	7bfa      	ldrb	r2, [r7, #15]
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe ff1e 	bl	800a51a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fe fed7 	bl	800a498 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b6ea:	bf00      	nop
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b702:	4618      	mov	r0, r3
 800b704:	f7fe ff19 	bl	800a53a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	699b      	ldr	r3, [r3, #24]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d005      	beq.n	800b71c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b710:	4b04      	ldr	r3, [pc, #16]	; (800b724 <HAL_PCD_SuspendCallback+0x30>)
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	4a03      	ldr	r2, [pc, #12]	; (800b724 <HAL_PCD_SuspendCallback+0x30>)
 800b716:	f043 0306 	orr.w	r3, r3, #6
 800b71a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	e000ed00 	.word	0xe000ed00

0800b728 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d007      	beq.n	800b748 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b738:	4b08      	ldr	r3, [pc, #32]	; (800b75c <HAL_PCD_ResumeCallback+0x34>)
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	4a07      	ldr	r2, [pc, #28]	; (800b75c <HAL_PCD_ResumeCallback+0x34>)
 800b73e:	f023 0306 	bic.w	r3, r3, #6
 800b742:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b744:	f000 f9f6 	bl	800bb34 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe ff08 	bl	800a564 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b754:	bf00      	nop
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	e000ed00 	.word	0xe000ed00

0800b760 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b768:	4a2b      	ldr	r2, [pc, #172]	; (800b818 <USBD_LL_Init+0xb8>)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a29      	ldr	r2, [pc, #164]	; (800b818 <USBD_LL_Init+0xb8>)
 800b774:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b778:	4b27      	ldr	r3, [pc, #156]	; (800b818 <USBD_LL_Init+0xb8>)
 800b77a:	4a28      	ldr	r2, [pc, #160]	; (800b81c <USBD_LL_Init+0xbc>)
 800b77c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b77e:	4b26      	ldr	r3, [pc, #152]	; (800b818 <USBD_LL_Init+0xb8>)
 800b780:	2208      	movs	r2, #8
 800b782:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b784:	4b24      	ldr	r3, [pc, #144]	; (800b818 <USBD_LL_Init+0xb8>)
 800b786:	2202      	movs	r2, #2
 800b788:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b78a:	4b23      	ldr	r3, [pc, #140]	; (800b818 <USBD_LL_Init+0xb8>)
 800b78c:	2202      	movs	r2, #2
 800b78e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b790:	4b21      	ldr	r3, [pc, #132]	; (800b818 <USBD_LL_Init+0xb8>)
 800b792:	2200      	movs	r2, #0
 800b794:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b796:	4b20      	ldr	r3, [pc, #128]	; (800b818 <USBD_LL_Init+0xb8>)
 800b798:	2200      	movs	r2, #0
 800b79a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b79c:	4b1e      	ldr	r3, [pc, #120]	; (800b818 <USBD_LL_Init+0xb8>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7a2:	4b1d      	ldr	r3, [pc, #116]	; (800b818 <USBD_LL_Init+0xb8>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7a8:	481b      	ldr	r0, [pc, #108]	; (800b818 <USBD_LL_Init+0xb8>)
 800b7aa:	f7f8 fcdf 	bl	800416c <HAL_PCD_Init>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b7b4:	f7f5 fb92 	bl	8000edc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7be:	2318      	movs	r3, #24
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	f7f9 fb8c 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7ce:	2358      	movs	r3, #88	; 0x58
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	2180      	movs	r1, #128	; 0x80
 800b7d4:	f7f9 fb84 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7de:	23c0      	movs	r3, #192	; 0xc0
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2181      	movs	r1, #129	; 0x81
 800b7e4:	f7f9 fb7c 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	f7f9 fb73 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b800:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b804:	2200      	movs	r2, #0
 800b806:	2182      	movs	r1, #130	; 0x82
 800b808:	f7f9 fb6a 	bl	8004ee0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20001c7c 	.word	0x20001c7c
 800b81c:	40005c00 	.word	0x40005c00

0800b820 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b836:	4618      	mov	r0, r3
 800b838:	f7f8 fd53 	bl	80042e2 <HAL_PCD_Start>
 800b83c:	4603      	mov	r3, r0
 800b83e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	4618      	mov	r0, r3
 800b844:	f000 f97c 	bl	800bb40 <USBD_Get_USB_Status>
 800b848:	4603      	mov	r3, r0
 800b84a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b84c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b084      	sub	sp, #16
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	4608      	mov	r0, r1
 800b860:	4611      	mov	r1, r2
 800b862:	461a      	mov	r2, r3
 800b864:	4603      	mov	r3, r0
 800b866:	70fb      	strb	r3, [r7, #3]
 800b868:	460b      	mov	r3, r1
 800b86a:	70bb      	strb	r3, [r7, #2]
 800b86c:	4613      	mov	r3, r2
 800b86e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b87e:	78bb      	ldrb	r3, [r7, #2]
 800b880:	883a      	ldrh	r2, [r7, #0]
 800b882:	78f9      	ldrb	r1, [r7, #3]
 800b884:	f7f8 fecd 	bl	8004622 <HAL_PCD_EP_Open>
 800b888:	4603      	mov	r3, r0
 800b88a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 f956 	bl	800bb40 <USBD_Get_USB_Status>
 800b894:	4603      	mov	r3, r0
 800b896:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b898:	7bbb      	ldrb	r3, [r7, #14]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b084      	sub	sp, #16
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8bc:	78fa      	ldrb	r2, [r7, #3]
 800b8be:	4611      	mov	r1, r2
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7f8 ff0e 	bl	80046e2 <HAL_PCD_EP_Close>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 f937 	bl	800bb40 <USBD_Get_USB_Status>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8fa:	78fa      	ldrb	r2, [r7, #3]
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7f8 ffb9 	bl	8004876 <HAL_PCD_EP_SetStall>
 800b904:	4603      	mov	r3, r0
 800b906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b908:	7bfb      	ldrb	r3, [r7, #15]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 f918 	bl	800bb40 <USBD_Get_USB_Status>
 800b910:	4603      	mov	r3, r0
 800b912:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b914:	7bbb      	ldrb	r3, [r7, #14]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b084      	sub	sp, #16
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	460b      	mov	r3, r1
 800b928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b938:	78fa      	ldrb	r2, [r7, #3]
 800b93a:	4611      	mov	r1, r2
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7f8 fff4 	bl	800492a <HAL_PCD_EP_ClrStall>
 800b942:	4603      	mov	r3, r0
 800b944:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b946:	7bfb      	ldrb	r3, [r7, #15]
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 f8f9 	bl	800bb40 <USBD_Get_USB_Status>
 800b94e:	4603      	mov	r3, r0
 800b950:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800b952:	7bbb      	ldrb	r3, [r7, #14]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b96e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b974:	2b00      	cmp	r3, #0
 800b976:	da08      	bge.n	800b98a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b978:	78fb      	ldrb	r3, [r7, #3]
 800b97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	015b      	lsls	r3, r3, #5
 800b982:	4413      	add	r3, r2
 800b984:	332a      	adds	r3, #42	; 0x2a
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	e008      	b.n	800b99c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	015b      	lsls	r3, r3, #5
 800b994:	4413      	add	r3, r2
 800b996:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b99a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3714      	adds	r7, #20
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9c2:	78fa      	ldrb	r2, [r7, #3]
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7f8 fe06 	bl	80045d8 <HAL_PCD_SetAddress>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 f8b4 	bl	800bb40 <USBD_Get_USB_Status>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b086      	sub	sp, #24
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	60f8      	str	r0, [r7, #12]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	72fb      	strb	r3, [r7, #11]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba08:	893b      	ldrh	r3, [r7, #8]
 800ba0a:	7af9      	ldrb	r1, [r7, #11]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	f7f8 fef9 	bl	8004804 <HAL_PCD_EP_Transmit>
 800ba12:	4603      	mov	r3, r0
 800ba14:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 f891 	bl	800bb40 <USBD_Get_USB_Status>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800ba22:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	607a      	str	r2, [r7, #4]
 800ba36:	461a      	mov	r2, r3
 800ba38:	460b      	mov	r3, r1
 800ba3a:	72fb      	strb	r3, [r7, #11]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba40:	2300      	movs	r3, #0
 800ba42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba4e:	893b      	ldrh	r3, [r7, #8]
 800ba50:	7af9      	ldrb	r1, [r7, #11]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	f7f8 fe87 	bl	8004766 <HAL_PCD_EP_Receive>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 f86e 	bl	800bb40 <USBD_Get_USB_Status>
 800ba64:	4603      	mov	r3, r0
 800ba66:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800ba68:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba84:	78fa      	ldrb	r2, [r7, #3]
 800ba86:	4611      	mov	r1, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7f8 fea6 	bl	80047da <HAL_PCD_EP_GetRxCount>
 800ba8e:	4603      	mov	r3, r0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800baa4:	78fb      	ldrb	r3, [r7, #3]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d002      	beq.n	800bab0 <HAL_PCDEx_LPM_Callback+0x18>
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d013      	beq.n	800bad6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800baae:	e023      	b.n	800baf8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d007      	beq.n	800bac8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bab8:	f000 f83c 	bl	800bb34 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800babc:	4b10      	ldr	r3, [pc, #64]	; (800bb00 <HAL_PCDEx_LPM_Callback+0x68>)
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	4a0f      	ldr	r2, [pc, #60]	; (800bb00 <HAL_PCDEx_LPM_Callback+0x68>)
 800bac2:	f023 0306 	bic.w	r3, r3, #6
 800bac6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe fd48 	bl	800a564 <USBD_LL_Resume>
    break;
 800bad4:	e010      	b.n	800baf8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800badc:	4618      	mov	r0, r3
 800bade:	f7fe fd2c 	bl	800a53a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d005      	beq.n	800baf6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800baea:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <HAL_PCDEx_LPM_Callback+0x68>)
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	4a04      	ldr	r2, [pc, #16]	; (800bb00 <HAL_PCDEx_LPM_Callback+0x68>)
 800baf0:	f043 0306 	orr.w	r3, r3, #6
 800baf4:	6113      	str	r3, [r2, #16]
    break;   
 800baf6:	bf00      	nop
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	e000ed00 	.word	0xe000ed00

0800bb04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb0c:	4b03      	ldr	r3, [pc, #12]	; (800bb1c <USBD_static_malloc+0x18>)
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	200001b0 	.word	0x200001b0

0800bb20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]

}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bb38:	f7f4 fd7c 	bl	8000634 <SystemClock_Config>
}
 800bb3c:	bf00      	nop
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb4e:	79fb      	ldrb	r3, [r7, #7]
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d817      	bhi.n	800bb84 <USBD_Get_USB_Status+0x44>
 800bb54:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <USBD_Get_USB_Status+0x1c>)
 800bb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5a:	bf00      	nop
 800bb5c:	0800bb6d 	.word	0x0800bb6d
 800bb60:	0800bb73 	.word	0x0800bb73
 800bb64:	0800bb79 	.word	0x0800bb79
 800bb68:	0800bb7f 	.word	0x0800bb7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb70:	e00b      	b.n	800bb8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb72:	2302      	movs	r3, #2
 800bb74:	73fb      	strb	r3, [r7, #15]
    break;
 800bb76:	e008      	b.n	800bb8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb7c:	e005      	b.n	800bb8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb7e:	2302      	movs	r3, #2
 800bb80:	73fb      	strb	r3, [r7, #15]
    break;
 800bb82:	e002      	b.n	800bb8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb84:	2302      	movs	r3, #2
 800bb86:	73fb      	strb	r3, [r7, #15]
    break;
 800bb88:	bf00      	nop
  }
  return usb_status;
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <__libc_init_array>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	4e0d      	ldr	r6, [pc, #52]	; (800bbd0 <__libc_init_array+0x38>)
 800bb9c:	4c0d      	ldr	r4, [pc, #52]	; (800bbd4 <__libc_init_array+0x3c>)
 800bb9e:	1ba4      	subs	r4, r4, r6
 800bba0:	10a4      	asrs	r4, r4, #2
 800bba2:	2500      	movs	r5, #0
 800bba4:	42a5      	cmp	r5, r4
 800bba6:	d109      	bne.n	800bbbc <__libc_init_array+0x24>
 800bba8:	4e0b      	ldr	r6, [pc, #44]	; (800bbd8 <__libc_init_array+0x40>)
 800bbaa:	4c0c      	ldr	r4, [pc, #48]	; (800bbdc <__libc_init_array+0x44>)
 800bbac:	f000 f820 	bl	800bbf0 <_init>
 800bbb0:	1ba4      	subs	r4, r4, r6
 800bbb2:	10a4      	asrs	r4, r4, #2
 800bbb4:	2500      	movs	r5, #0
 800bbb6:	42a5      	cmp	r5, r4
 800bbb8:	d105      	bne.n	800bbc6 <__libc_init_array+0x2e>
 800bbba:	bd70      	pop	{r4, r5, r6, pc}
 800bbbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbc0:	4798      	blx	r3
 800bbc2:	3501      	adds	r5, #1
 800bbc4:	e7ee      	b.n	800bba4 <__libc_init_array+0xc>
 800bbc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbca:	4798      	blx	r3
 800bbcc:	3501      	adds	r5, #1
 800bbce:	e7f2      	b.n	800bbb6 <__libc_init_array+0x1e>
 800bbd0:	0800bc80 	.word	0x0800bc80
 800bbd4:	0800bc80 	.word	0x0800bc80
 800bbd8:	0800bc80 	.word	0x0800bc80
 800bbdc:	0800bc84 	.word	0x0800bc84

0800bbe0 <memset>:
 800bbe0:	4402      	add	r2, r0
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d100      	bne.n	800bbea <memset+0xa>
 800bbe8:	4770      	bx	lr
 800bbea:	f803 1b01 	strb.w	r1, [r3], #1
 800bbee:	e7f9      	b.n	800bbe4 <memset+0x4>

0800bbf0 <_init>:
 800bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf2:	bf00      	nop
 800bbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbf6:	bc08      	pop	{r3}
 800bbf8:	469e      	mov	lr, r3
 800bbfa:	4770      	bx	lr

0800bbfc <_fini>:
 800bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfe:	bf00      	nop
 800bc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc02:	bc08      	pop	{r3}
 800bc04:	469e      	mov	lr, r3
 800bc06:	4770      	bx	lr
