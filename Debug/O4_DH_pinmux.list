
O4_DH_pinmux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba80  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800bc58  0800bc58  0001bc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcc8  0800bcc8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcc8  0800bcc8  0001bcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcd0  0800bcd0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcd0  0800bcd0  0001bcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd4  0800bcd4  0001bcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800bcd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d90  20000180  0800be58  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f10  0800be58  00021f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e17  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000450f  00000000  00000000  00045fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001de0  00000000  00000000  0004a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd8  00000000  00000000  0004c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259e1  00000000  00000000  0004de90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b451  00000000  00000000  00073871  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000efe5e  00000000  00000000  0008ecc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017eb20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008008  00000000  00000000  0017eb9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000180 	.word	0x20000180
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bc40 	.word	0x0800bc40

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000184 	.word	0x20000184
 8000214:	0800bc40 	.word	0x0800bc40

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_ADC_ErrorCallback>:
/* ---------------------------- module variables ---------------------------- */
static volatile float adc_val;


/* ---------------------------- extern functions ---------------------------- */
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  // TODO reset the error (e.g. overrun)
  }
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(hadc);
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 fe77 	bl	8002228 <HAL_ADC_GetValue>
 800053a:	ee07 0a90 	vmov	s15, r0
 800053e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000542:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_ADC_ConvCpltCallback+0x24>)
 8000544:	edc3 7a00 	vstr	s15, [r3]
  }
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000019c 	.word	0x2000019c

08000554 <update_measurements>:
	float stm_temperature;
	float btn_lpf;
}measurement;

void update_measurements()
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	//adc1 data
	measurement.v12v_input   = V_REF*0.001391602f*adc1_data[0];
 8000558:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <update_measurements+0xc4>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	ee07 3a90 	vmov	s15, r3
 8000560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000564:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800061c <update_measurements+0xc8>
 8000568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800056c:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <update_measurements+0xcc>)
 800056e:	edc3 7a00 	vstr	s15, [r3]
	measurement.v12v_display = V_REF*0.001391602f*adc1_data[1];
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <update_measurements+0xc4>)
 8000574:	885b      	ldrh	r3, [r3, #2]
 8000576:	ee07 3a90 	vmov	s15, r3
 800057a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800057e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800061c <update_measurements+0xc8>
 8000582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <update_measurements+0xcc>)
 8000588:	edc3 7a01 	vstr	s15, [r3, #4]
	measurement.v3v3_half	 = V_REF*0.000244141f*adc1_data[2];
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <update_measurements+0xc4>)
 800058e:	889b      	ldrh	r3, [r3, #4]
 8000590:	ee07 3a90 	vmov	s15, r3
 8000594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000598:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000624 <update_measurements+0xd0>
 800059c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <update_measurements+0xcc>)
 80005a2:	edc3 7a02 	vstr	s15, [r3, #8]
	//adc2 data
	measurement.v5v5_usb	 = V_REF*0.000537109f*adc2_data[0];
 80005a6:	4b20      	ldr	r3, [pc, #128]	; (8000628 <update_measurements+0xd4>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	ee07 3a90 	vmov	s15, r3
 80005ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005b2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800062c <update_measurements+0xd8>
 80005b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <update_measurements+0xcc>)
 80005bc:	edc3 7a03 	vstr	s15, [r3, #12]
	measurement.btn			 = V_REF/4096*adc2_data[1];
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <update_measurements+0xd4>)
 80005c2:	885b      	ldrh	r3, [r3, #2]
 80005c4:	ee07 3a90 	vmov	s15, r3
 80005c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005cc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000630 <update_measurements+0xdc>
 80005d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <update_measurements+0xcc>)
 80005d6:	edc3 7a04 	vstr	s15, [r3, #16]
	//adc3
	measurement.i12v		 = V_REF/(35*2048)*adc3_data[0];
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <update_measurements+0xe0>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	ee07 3a90 	vmov	s15, r3
 80005e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000638 <update_measurements+0xe4>
 80005ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <update_measurements+0xcc>)
 80005f0:	edc3 7a05 	vstr	s15, [r3, #20]
	measurement.stm_Vbat	 = V_REF*3/4096*adc3_data[1];
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <update_measurements+0xe0>)
 80005f6:	885b      	ldrh	r3, [r3, #2]
 80005f8:	ee07 3a90 	vmov	s15, r3
 80005fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000600:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800063c <update_measurements+0xe8>
 8000604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <update_measurements+0xcc>)
 800060a:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	20000624 	.word	0x20000624
 800061c:	3b640004 	.word	0x3b640004
 8000620:	20000794 	.word	0x20000794
 8000624:	3a200010 	.word	0x3a200010
 8000628:	200004e0 	.word	0x200004e0
 800062c:	3aaffff8 	.word	0x3aaffff8
 8000630:	3a200000 	.word	0x3a200000
 8000634:	200003c8 	.word	0x200003c8
 8000638:	38124925 	.word	0x38124925
 800063c:	3af00000 	.word	0x3af00000

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f001 f86a 	bl	800171e <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(300); //delay after enable Vref
 800064a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800064e:	f001 f8d7 	bl	8001800 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f867 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 fc49 	bl	8000eec <MX_GPIO_Init>
  MX_DMA_Init();
 800065a:	f000 fc05 	bl	8000e68 <MX_DMA_Init>
  MX_ADC1_Init();
 800065e:	f000 f8d5 	bl	800080c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000662:	f000 f96d 	bl	8000940 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000666:	f000 f9e3 	bl	8000a30 <MX_ADC3_Init>
  MX_DAC1_Init();
 800066a:	f000 fa7d 	bl	8000b68 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 800066e:	f000 fab5 	bl	8000bdc <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000672:	f000 fafb 	bl	8000c6c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000676:	f000 fbab 	bl	8000dd0 <MX_USART3_UART_Init>
  MX_USB_Device_Init();
 800067a:	f00a fe03 	bl	800b284 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800067e:	217f      	movs	r1, #127	; 0x7f
 8000680:	4821      	ldr	r0, [pc, #132]	; (8000708 <main+0xc8>)
 8000682:	f002 fb21 	bl	8002cc8 <HAL_ADCEx_Calibration_Start>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <main+0x50>
  {
    Error_Handler();
 800068c:	f000 fc9e 	bl	8000fcc <Error_Handler>
  }
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK)
 8000690:	217f      	movs	r1, #127	; 0x7f
 8000692:	481e      	ldr	r0, [pc, #120]	; (800070c <main+0xcc>)
 8000694:	f002 fb18 	bl	8002cc8 <HAL_ADCEx_Calibration_Start>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <main+0x62>
  {
    Error_Handler();
 800069e:	f000 fc95 	bl	8000fcc <Error_Handler>
  }
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED) != HAL_OK)
 80006a2:	217f      	movs	r1, #127	; 0x7f
 80006a4:	481a      	ldr	r0, [pc, #104]	; (8000710 <main+0xd0>)
 80006a6:	f002 fb0f 	bl	8002cc8 <HAL_ADCEx_Calibration_Start>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <main+0x74>
  {
    Error_Handler();
 80006b0:	f000 fc8c 	bl	8000fcc <Error_Handler>
  }
  HAL_Delay(100);
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f001 f8a3 	bl	8001800 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc1_data[0], 3 );
 80006ba:	2203      	movs	r2, #3
 80006bc:	4915      	ldr	r1, [pc, #84]	; (8000714 <main+0xd4>)
 80006be:	4812      	ldr	r0, [pc, #72]	; (8000708 <main+0xc8>)
 80006c0:	f001 fcf0 	bl	80020a4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&adc2_data[0], 2 );
 80006c4:	2202      	movs	r2, #2
 80006c6:	4914      	ldr	r1, [pc, #80]	; (8000718 <main+0xd8>)
 80006c8:	4810      	ldr	r0, [pc, #64]	; (800070c <main+0xcc>)
 80006ca:	f001 fceb 	bl	80020a4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&adc3_data[0], 3 );
 80006ce:	2203      	movs	r2, #3
 80006d0:	4912      	ldr	r1, [pc, #72]	; (800071c <main+0xdc>)
 80006d2:	480f      	ldr	r0, [pc, #60]	; (8000710 <main+0xd0>)
 80006d4:	f001 fce6 	bl	80020a4 <HAL_ADC_Start_DMA>

  /*## Start PWM signals generation #######################################*/
    /* Start channel 1 */
    if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <main+0xe0>)
 80006dc:	f005 fcf8 	bl	80060d0 <HAL_TIM_PWM_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0xaa>
    {
      /* PWM Generation Error */
      Error_Handler();
 80006e6:	f000 fc71 	bl	8000fcc <Error_Handler>
    }
    htim1.Instance->CCR1=7353/2;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <main+0xe0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f640 625c 	movw	r2, #3676	; 0xe5c
 80006f2:	635a      	str	r2, [r3, #52]	; 0x34
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint32_t i,s=0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  i++;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3301      	adds	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
	  s+=i;
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	603b      	str	r3, [r7, #0]
	  i++;
 8000706:	e7f7      	b.n	80006f8 <main+0xb8>
 8000708:	2000054c 	.word	0x2000054c
 800070c:	20000474 	.word	0x20000474
 8000710:	200005b8 	.word	0x200005b8
 8000714:	20000624 	.word	0x20000624
 8000718:	200004e0 	.word	0x200004e0
 800071c:	200003c8 	.word	0x200003c8
 8000720:	200006f4 	.word	0x200006f4

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0a8      	sub	sp, #160	; 0xa0
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800072e:	2238      	movs	r2, #56	; 0x38
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f00b fa7c 	bl	800bc30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2250      	movs	r2, #80	; 0x50
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f00b fa6e 	bl	800bc30 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000758:	f004 fc52 	bl	8005000 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076c:	2303      	movs	r3, #3
 800076e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000772:	2301      	movs	r3, #1
 8000774:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000778:	2318      	movs	r3, #24
 800077a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800077e:	2308      	movs	r3, #8
 8000780:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000784:	2304      	movs	r3, #4
 8000786:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000794:	4618      	mov	r0, r3
 8000796:	f004 fcd7 	bl	8005148 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007a0:	f000 fc14 	bl	8000fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2303      	movs	r3, #3
 80007aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007bc:	2104      	movs	r1, #4
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 ffda 	bl	8005778 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007ca:	f000 fbff 	bl	8000fcc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <SystemClock_Config+0xe4>)
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC345
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80007d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007e0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80007e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80007e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f005 f9dd 	bl	8005bb0 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007fc:	f000 fbe6 	bl	8000fcc <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	37a0      	adds	r7, #160	; 0xa0
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	0001b004 	.word	0x0001b004

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2220      	movs	r2, #32
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f00b fa03 	bl	800bc30 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <MX_ADC1_Init+0x124>)
 800082c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000830:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <MX_ADC1_Init+0x124>)
 8000834:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000838:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083a:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <MX_ADC1_Init+0x124>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000840:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <MX_ADC1_Init+0x124>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000846:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <MX_ADC1_Init+0x124>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b38      	ldr	r3, [pc, #224]	; (8000930 <MX_ADC1_Init+0x124>)
 800084e:	2201      	movs	r2, #1
 8000850:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <MX_ADC1_Init+0x124>)
 8000854:	2204      	movs	r2, #4
 8000856:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b35      	ldr	r3, [pc, #212]	; (8000930 <MX_ADC1_Init+0x124>)
 800085a:	2200      	movs	r2, #0
 800085c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800085e:	4b34      	ldr	r3, [pc, #208]	; (8000930 <MX_ADC1_Init+0x124>)
 8000860:	2200      	movs	r2, #0
 8000862:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000864:	4b32      	ldr	r3, [pc, #200]	; (8000930 <MX_ADC1_Init+0x124>)
 8000866:	2203      	movs	r2, #3
 8000868:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_ADC1_Init+0x124>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_ADC1_Init+0x124>)
 8000874:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_ADC1_Init+0x124>)
 800087c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000880:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_ADC1_Init+0x124>)
 8000884:	2201      	movs	r2, #1
 8000886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_ADC1_Init+0x124>)
 800088c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000890:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_ADC1_Init+0x124>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800089a:	4825      	ldr	r0, [pc, #148]	; (8000930 <MX_ADC1_Init+0x124>)
 800089c:	f001 fa50 	bl	8001d40 <HAL_ADC_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80008a6:	f000 fb91 	bl	8000fcc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	481e      	ldr	r0, [pc, #120]	; (8000930 <MX_ADC1_Init+0x124>)
 80008b6:	f002 fa69 	bl	8002d8c <HAL_ADCEx_MultiModeConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80008c0:	f000 fb84 	bl	8000fcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_ADC1_Init+0x128>)
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c8:	2306      	movs	r3, #6
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80008cc:	2305      	movs	r3, #5
 80008ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008d0:	237f      	movs	r3, #127	; 0x7f
 80008d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d4:	2304      	movs	r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <MX_ADC1_Init+0x124>)
 80008e2:	f001 fcb9 	bl	8002258 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80008ec:	f000 fb6e 	bl	8000fcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ADC1_Init+0x12c>)
 80008f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008f4:	230c      	movs	r3, #12
 80008f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_ADC1_Init+0x124>)
 80008fe:	f001 fcab 	bl	8002258 <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000908:	f000 fb60 	bl	8000fcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_ADC1_Init+0x130>)
 800090e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000910:	2312      	movs	r3, #18
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC1_Init+0x124>)
 800091a:	f001 fc9d 	bl	8002258 <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000924:	f000 fb52 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000054c 	.word	0x2000054c
 8000934:	04300002 	.word	0x04300002
 8000938:	0c900008 	.word	0x0c900008
 800093c:	10c00010 	.word	0x10c00010

08000940 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2220      	movs	r2, #32
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f00b f96f 	bl	800bc30 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <MX_ADC2_Init+0xe0>)
 8000954:	4a33      	ldr	r2, [pc, #204]	; (8000a24 <MX_ADC2_Init+0xe4>)
 8000956:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000958:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <MX_ADC2_Init+0xe0>)
 800095a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800095e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_ADC2_Init+0xe0>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_ADC2_Init+0xe0>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_ADC2_Init+0xe0>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_ADC2_Init+0xe0>)
 8000974:	2201      	movs	r2, #1
 8000976:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_ADC2_Init+0xe0>)
 800097a:	2204      	movs	r2, #4
 800097c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_ADC2_Init+0xe0>)
 8000980:	2200      	movs	r2, #0
 8000982:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_ADC2_Init+0xe0>)
 8000986:	2200      	movs	r2, #0
 8000988:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_ADC2_Init+0xe0>)
 800098c:	2202      	movs	r2, #2
 800098e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_ADC2_Init+0xe0>)
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_ADC2_Init+0xe0>)
 800099a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ADC2_Init+0xe0>)
 80009a2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_ADC2_Init+0xe0>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_ADC2_Init+0xe0>)
 80009b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_ADC2_Init+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009c0:	4817      	ldr	r0, [pc, #92]	; (8000a20 <MX_ADC2_Init+0xe0>)
 80009c2:	f001 f9bd 	bl	8001d40 <HAL_ADC_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80009cc:	f000 fafe 	bl	8000fcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_ADC2_Init+0xe8>)
 80009d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d4:	2306      	movs	r3, #6
 80009d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80009d8:	2305      	movs	r3, #5
 80009da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009dc:	237f      	movs	r3, #127	; 0x7f
 80009de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009e0:	2304      	movs	r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_ADC2_Init+0xe0>)
 80009ee:	f001 fc33 	bl	8002258 <HAL_ADC_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 80009f8:	f000 fae8 	bl	8000fcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_ADC2_Init+0xec>)
 80009fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a00:	230c      	movs	r3, #12
 8000a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_ADC2_Init+0xe0>)
 8000a0a:	f001 fc25 	bl	8002258 <HAL_ADC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 8000a14:	f000 fada 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000474 	.word	0x20000474
 8000a24:	50000100 	.word	0x50000100
 8000a28:	08600004 	.word	0x08600004
 8000a2c:	32601000 	.word	0x32601000

08000a30 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2220      	movs	r2, #32
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f00b f8f1 	bl	800bc30 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000a4e:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a50:	4a41      	ldr	r2, [pc, #260]	; (8000b58 <MX_ADC3_Init+0x128>)
 8000a52:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000a54:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a5a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a62:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000a68:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a6e:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a74:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a76:	2204      	movs	r2, #4
 8000a78:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a80:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 3;
 8000a86:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a88:	2203      	movs	r2, #3
 8000a8a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a8c:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a96:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000a9e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000ab4:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000abc:	4825      	ldr	r0, [pc, #148]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000abe:	f001 f93f 	bl	8001d40 <HAL_ADC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 8000ac8:	f000 fa80 	bl	8000fcc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481f      	ldr	r0, [pc, #124]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000ad8:	f002 f958 	bl	8002d8c <HAL_ADCEx_MultiModeConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000ae2:	f000 fa73 	bl	8000fcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_ADC3_Init+0x12c>)
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aea:	2306      	movs	r3, #6
 8000aec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000aee:	2305      	movs	r3, #5
 8000af0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af2:	237f      	movs	r3, #127	; 0x7f
 8000af4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000af6:	2304      	movs	r3, #4
 8000af8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4814      	ldr	r0, [pc, #80]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000b04:	f001 fba8 	bl	8002258 <HAL_ADC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8000b0e:	f000 fa5d 	bl	8000fcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_ADC3_Init+0x130>)
 8000b14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b16:	230c      	movs	r3, #12
 8000b18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000b20:	f001 fb9a 	bl	8002258 <HAL_ADC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8000b2a:	f000 fa4f 	bl	8000fcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <MX_ADC3_Init+0x134>)
 8000b30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b32:	2312      	movs	r3, #18
 8000b34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_ADC3_Init+0x124>)
 8000b3c:	f001 fb8c 	bl	8002258 <HAL_ADC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8000b46:	f000 fa41 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3730      	adds	r7, #48	; 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200005b8 	.word	0x200005b8
 8000b58:	50000400 	.word	0x50000400
 8000b5c:	32601000 	.word	0x32601000
 8000b60:	c7520000 	.word	0xc7520000
 8000b64:	cb840000 	.word	0xcb840000

08000b68 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2230      	movs	r2, #48	; 0x30
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00b f85b 	bl	800bc30 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_DAC1_Init+0x6c>)
 8000b7c:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <MX_DAC1_Init+0x70>)
 8000b7e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <MX_DAC1_Init+0x6c>)
 8000b82:	f002 faf6 	bl	8003172 <HAL_DAC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b8c:	f000 fa1e 	bl	8000fcc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000b90:	2302      	movs	r3, #2
 8000b92:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000bac:	2306      	movs	r3, #6
 8000bae:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <MX_DAC1_Init+0x6c>)
 8000bbc:	f002 fafc 	bl	80031b8 <HAL_DAC_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000bc6:	f000 fa01 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3730      	adds	r7, #48	; 0x30
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200003d4 	.word	0x200003d4
 8000bd8:	50000800 	.word	0x50000800

08000bdc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000be2:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <MX_FDCAN1_Init+0x8c>)
 8000be4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_FDCAN1_Init+0x88>)
 8000c50:	f002 ff60 	bl	8003b14 <HAL_FDCAN_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000c5a:	f000 f9b7 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000690 	.word	0x20000690
 8000c68:	40006400 	.word	0x40006400

08000c6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b09c      	sub	sp, #112	; 0x70
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]
 8000c9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2234      	movs	r2, #52	; 0x34
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00a ffc2 	bl	800bc30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cac:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000cae:	4a47      	ldr	r2, [pc, #284]	; (8000dcc <MX_TIM1_Init+0x160>)
 8000cb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 8000cb2:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000cb8:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000cba:	2220      	movs	r2, #32
 8000cbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7353;
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000cc0:	f641 42b9 	movw	r2, #7353	; 0x1cb9
 8000cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ccc:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cd8:	483b      	ldr	r0, [pc, #236]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000cda:	f005 f999 	bl	8006010 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ce4:	f000 f972 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4834      	ldr	r0, [pc, #208]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000cf6:	f005 fb5b 	bl	80063b0 <HAL_TIM_ConfigClockSource>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d00:	f000 f964 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d04:	4830      	ldr	r0, [pc, #192]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000d06:	f005 f9ae 	bl	8006066 <HAL_TIM_PWM_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d10:	f000 f95c 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d14:	2320      	movs	r3, #32
 8000d16:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000d18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d1c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d26:	4619      	mov	r1, r3
 8000d28:	4827      	ldr	r0, [pc, #156]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000d2a:	f006 f879 	bl	8006e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000d34:	f000 f94a 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d38:	2360      	movs	r3, #96	; 0x60
 8000d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 234;
 8000d3c:	23ea      	movs	r3, #234	; 0xea
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d40:	2300      	movs	r3, #0
 8000d42:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481a      	ldr	r0, [pc, #104]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000d5e:	f005 fa0f 	bl	8006180 <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000d68:	f000 f930 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000daa:	f006 f897 	bl	8006edc <HAL_TIMEx_ConfigBreakDeadTime>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000db4:	f000 f90a 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM1_Init+0x15c>)
 8000dba:	f000 fb53 	bl	8001464 <HAL_TIM_MspPostInit>

}
 8000dbe:	bf00      	nop
 8000dc0:	3770      	adds	r7, #112	; 0x70
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200006f4 	.word	0x200006f4
 8000dcc:	40012c00 	.word	0x40012c00

08000dd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000dd6:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <MX_USART3_UART_Init+0x94>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e18:	4811      	ldr	r0, [pc, #68]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000e1a:	f006 f8ff 	bl	800701c <HAL_UART_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e24:	f000 f8d2 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000e2c:	f007 fca3 	bl	8008776 <HAL_UARTEx_SetTxFifoThreshold>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e36:	f000 f8c9 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4808      	ldr	r0, [pc, #32]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000e3e:	f007 fcd8 	bl	80087f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e48:	f000 f8c0 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_USART3_UART_Init+0x90>)
 8000e4e:	f007 fc59 	bl	8008704 <HAL_UARTEx_DisableFifoMode>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e58:	f000 f8b8 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200003e8 	.word	0x200003e8
 8000e64:	40004800 	.word	0x40004800

08000e68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_DMA_Init+0x80>)
 8000e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e72:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <MX_DMA_Init+0x80>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6493      	str	r3, [r2, #72]	; 0x48
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_DMA_Init+0x80>)
 8000e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_DMA_Init+0x80>)
 8000e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <MX_DMA_Init+0x80>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6493      	str	r3, [r2, #72]	; 0x48
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_DMA_Init+0x80>)
 8000e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	200b      	movs	r0, #11
 8000ea4:	f002 f931 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ea8:	200b      	movs	r0, #11
 8000eaa:	f002 f948 	bl	800313e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	200c      	movs	r0, #12
 8000eb4:	f002 f929 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000eb8:	200c      	movs	r0, #12
 8000eba:	f002 f940 	bl	800313e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	200d      	movs	r0, #13
 8000ec4:	f002 f921 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ec8:	200d      	movs	r0, #13
 8000eca:	f002 f938 	bl	800313e <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	205e      	movs	r0, #94	; 0x5e
 8000ed4:	f002 f919 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000ed8:	205e      	movs	r0, #94	; 0x5e
 8000eda:	f002 f930 	bl	800313e <HAL_NVIC_EnableIRQ>

}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a2e      	ldr	r2, [pc, #184]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1a:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0320 	and.w	r3, r3, #32
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_GPIO_Init+0xd4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_DISPLAY_ON_GPIO_Port, GPIO_DISPLAY_ON_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f68:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <MX_GPIO_Init+0xd8>)
 8000f6a:	f003 f90f 	bl	800418c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_USB_Enable_GPIO_Port, GPIO_USB_Enable_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <MX_GPIO_Init+0xdc>)
 8000f76:	f003 f909 	bl	800418c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_DISPLAY_ON_Pin */
  GPIO_InitStruct.Pin = GPIO_DISPLAY_ON_Pin;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_DISPLAY_ON_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_GPIO_Init+0xd8>)
 8000f94:	f002 ff78 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_USB_Enable_Pin */
  GPIO_InitStruct.Pin = GPIO_USB_Enable_Pin;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_USB_Enable_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_GPIO_Init+0xdc>)
 8000fb2:	f002 ff69 	bl	8003e88 <HAL_GPIO_Init>

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000400 	.word	0x48000400

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fea:	6093      	str	r3, [r2, #8]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40007000 	.word	0x40007000

08000ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_MspInit+0x54>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <HAL_MspInit+0x54>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6613      	str	r3, [r2, #96]	; 0x60
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_MspInit+0x54>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_MspInit+0x54>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <HAL_MspInit+0x54>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	6593      	str	r3, [r2, #88]	; 0x58
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_MspInit+0x54>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale 
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8001032:	2010      	movs	r0, #16
 8001034:	f000 fc06 	bl	8001844 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer 
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001038:	f000 fc2c 	bl	8001894 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode 
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800103c:	2000      	movs	r0, #0
 800103e:	f000 fc15 	bl	800186c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001042:	f7ff ffcb 	bl	8000fdc <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b092      	sub	sp, #72	; 0x48
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(hadc->Instance==ADC1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001074:	d170      	bne.n	8001158 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001076:	4b80      	ldr	r3, [pc, #512]	; (8001278 <HAL_ADC_MspInit+0x224>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <HAL_ADC_MspInit+0x224>)
 800107e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001080:	4b7d      	ldr	r3, [pc, #500]	; (8001278 <HAL_ADC_MspInit+0x224>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10b      	bne.n	80010a0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001088:	4b7c      	ldr	r3, [pc, #496]	; (800127c <HAL_ADC_MspInit+0x228>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108c:	4a7b      	ldr	r2, [pc, #492]	; (800127c <HAL_ADC_MspInit+0x228>)
 800108e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001094:	4b79      	ldr	r3, [pc, #484]	; (800127c <HAL_ADC_MspInit+0x228>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109c:	623b      	str	r3, [r7, #32]
 800109e:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b76      	ldr	r3, [pc, #472]	; (800127c <HAL_ADC_MspInit+0x228>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	4a75      	ldr	r2, [pc, #468]	; (800127c <HAL_ADC_MspInit+0x228>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ac:	4b73      	ldr	r3, [pc, #460]	; (800127c <HAL_ADC_MspInit+0x228>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = ADC1_V12V_Pin|ADC1_12V_DISPLAY_Pin|ADC1_3V3HALF_Pin;
 80010b8:	230d      	movs	r3, #13
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010bc:	2303      	movs	r3, #3
 80010be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f002 fedb 	bl	8003e88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010d2:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 80010d4:	4a6b      	ldr	r2, [pc, #428]	; (8001284 <HAL_ADC_MspInit+0x230>)
 80010d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010d8:	4b69      	ldr	r3, [pc, #420]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 80010da:	2205      	movs	r2, #5
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b68      	ldr	r3, [pc, #416]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b66      	ldr	r3, [pc, #408]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b65      	ldr	r3, [pc, #404]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f0:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 80010f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010f8:	4b61      	ldr	r3, [pc, #388]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 80010fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001100:	4b5f      	ldr	r3, [pc, #380]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 8001102:	2220      	movs	r2, #32
 8001104:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001106:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800110c:	485c      	ldr	r0, [pc, #368]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 800110e:	f002 f9ff 	bl	8003510 <HAL_DMA_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001118:	f7ff ff58 	bl	8000fcc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
    pSyncConfig.SyncEnable = DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    pSyncConfig.EventEnable = ENABLE;
 800112a:	2301      	movs	r3, #1
 800112c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    pSyncConfig.RequestNumber = 1;
 8001130:	2301      	movs	r3, #1
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	4851      	ldr	r0, [pc, #324]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 800113c:	f002 fc5a 	bl	80039f4 <HAL_DMAEx_ConfigMuxSync>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001146:	f7ff ff41 	bl	8000fcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
 8001150:	4a4b      	ldr	r2, [pc, #300]	; (8001280 <HAL_ADC_MspInit+0x22c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001156:	e0f3      	b.n	8001340 <HAL_ADC_MspInit+0x2ec>
  else if(hadc->Instance==ADC2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <HAL_ADC_MspInit+0x234>)
 800115e:	4293      	cmp	r3, r2
 8001160:	f040 809a 	bne.w	8001298 <HAL_ADC_MspInit+0x244>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001164:	4b44      	ldr	r3, [pc, #272]	; (8001278 <HAL_ADC_MspInit+0x224>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a43      	ldr	r2, [pc, #268]	; (8001278 <HAL_ADC_MspInit+0x224>)
 800116c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <HAL_ADC_MspInit+0x224>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d10b      	bne.n	800118e <HAL_ADC_MspInit+0x13a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <HAL_ADC_MspInit+0x228>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	4a40      	ldr	r2, [pc, #256]	; (800127c <HAL_ADC_MspInit+0x228>)
 800117c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <HAL_ADC_MspInit+0x228>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_ADC_MspInit+0x228>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a3a      	ldr	r2, [pc, #232]	; (800127c <HAL_ADC_MspInit+0x228>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <HAL_ADC_MspInit+0x228>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_ADC_MspInit+0x228>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a34      	ldr	r2, [pc, #208]	; (800127c <HAL_ADC_MspInit+0x228>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b32      	ldr	r3, [pc, #200]	; (800127c <HAL_ADC_MspInit+0x228>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ADC2_V5V_Pin;
 80011be:	2302      	movs	r3, #2
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c2:	2303      	movs	r3, #3
 80011c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC2_V5V_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f002 fe58 	bl	8003e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_BTN_Pin;
 80011d8:	2304      	movs	r3, #4
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011dc:	2303      	movs	r3, #3
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC2_BTN_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011e8:	4619      	mov	r1, r3
 80011ea:	4828      	ldr	r0, [pc, #160]	; (800128c <HAL_ADC_MspInit+0x238>)
 80011ec:	f002 fe4c 	bl	8003e88 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 80011f2:	4a28      	ldr	r2, [pc, #160]	; (8001294 <HAL_ADC_MspInit+0x240>)
 80011f4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 80011f8:	2224      	movs	r2, #36	; 0x24
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 8001210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001214:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 8001218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 8001220:	2220      	movs	r2, #32
 8001222:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800122a:	4819      	ldr	r0, [pc, #100]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 800122c:	f002 f970 	bl	8003510 <HAL_DMA_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 8001236:	f7ff fec9 	bl	8000fcc <Error_Handler>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
    pSyncConfig.SyncEnable = DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    pSyncConfig.EventEnable = ENABLE;
 8001248:	2301      	movs	r3, #1
 800124a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    pSyncConfig.RequestNumber = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc2, &pSyncConfig) != HAL_OK)
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 800125a:	f002 fbcb 	bl	80039f4 <HAL_DMAEx_ConfigMuxSync>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_ADC_MspInit+0x214>
      Error_Handler();
 8001264:	f7ff feb2 	bl	8000fcc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_ADC_MspInit+0x23c>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001274:	e064      	b.n	8001340 <HAL_ADC_MspInit+0x2ec>
 8001276:	bf00      	nop
 8001278:	200001a0 	.word	0x200001a0
 800127c:	40021000 	.word	0x40021000
 8001280:	20000630 	.word	0x20000630
 8001284:	40020008 	.word	0x40020008
 8001288:	50000100 	.word	0x50000100
 800128c:	48000400 	.word	0x48000400
 8001290:	20000734 	.word	0x20000734
 8001294:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC3)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a2a      	ldr	r2, [pc, #168]	; (8001348 <HAL_ADC_MspInit+0x2f4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d14e      	bne.n	8001340 <HAL_ADC_MspInit+0x2ec>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <HAL_ADC_MspInit+0x2f8>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a29      	ldr	r2, [pc, #164]	; (800134c <HAL_ADC_MspInit+0x2f8>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_ADC_MspInit+0x2f8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_ADC_MspInit+0x2f8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a23      	ldr	r2, [pc, #140]	; (800134c <HAL_ADC_MspInit+0x2f8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_ADC_MspInit+0x2f8>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC3_I12V_Pin;
 80012d2:	2301      	movs	r3, #1
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d6:	2303      	movs	r3, #3
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC3_I12V_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012e2:	4619      	mov	r1, r3
 80012e4:	481a      	ldr	r0, [pc, #104]	; (8001350 <HAL_ADC_MspInit+0x2fc>)
 80012e6:	f002 fdcf 	bl	8003e88 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_ADC_MspInit+0x300>)
 80012ec:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <HAL_ADC_MspInit+0x304>)
 80012ee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_ADC_MspInit+0x300>)
 80012f2:	2225      	movs	r2, #37	; 0x25
 80012f4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_ADC_MspInit+0x300>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_ADC_MspInit+0x300>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_ADC_MspInit+0x300>)
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_ADC_MspInit+0x300>)
 800130a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_ADC_MspInit+0x300>)
 8001312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001316:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_ADC_MspInit+0x300>)
 800131a:	2220      	movs	r2, #32
 800131c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_ADC_MspInit+0x300>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <HAL_ADC_MspInit+0x300>)
 8001326:	f002 f8f3 	bl	8003510 <HAL_DMA_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_ADC_MspInit+0x2e0>
      Error_Handler();
 8001330:	f7ff fe4c 	bl	8000fcc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_ADC_MspInit+0x300>)
 8001338:	655a      	str	r2, [r3, #84]	; 0x54
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_ADC_MspInit+0x300>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001340:	bf00      	nop
 8001342:	3748      	adds	r7, #72	; 0x48
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	50000400 	.word	0x50000400
 800134c:	40021000 	.word	0x40021000
 8001350:	48000400 	.word	0x48000400
 8001354:	200004ec 	.word	0x200004ec
 8001358:	40020030 	.word	0x40020030

0800135c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <HAL_DAC_MspInit+0x38>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10b      	bne.n	8001386 <HAL_DAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_DAC_MspInit+0x3c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_DAC_MspInit+0x3c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_DAC_MspInit+0x3c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	50000800 	.word	0x50000800
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a17      	ldr	r2, [pc, #92]	; (8001418 <HAL_FDCAN_MspInit+0x7c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d128      	bne.n	8001410 <HAL_FDCAN_MspInit+0x74>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_FDCAN_MspInit+0x80>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <HAL_FDCAN_MspInit+0x80>)
 80013c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_FDCAN_MspInit+0x80>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_FDCAN_MspInit+0x80>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_FDCAN_MspInit+0x80>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_FDCAN_MspInit+0x80>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001400:	2309      	movs	r3, #9
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_FDCAN_MspInit+0x84>)
 800140c:	f002 fd3c 	bl	8003e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40006400 	.word	0x40006400
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400

08001424 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_TIM_Base_MspInit+0x38>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10b      	bne.n	800144e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 800143c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001440:	6613      	str	r3, [r2, #96]	; 0x60
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_TIM_Base_MspInit+0x3c>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40012c00 	.word	0x40012c00
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <HAL_TIM_MspPostInit+0x68>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d11d      	bne.n	80014c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_TIM_MspPostInit+0x6c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <HAL_TIM_MspPostInit+0x6c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_TIM_MspPostInit+0x6c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_LED_Pin;
 800149e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014b0:	2306      	movs	r3, #6
 80014b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f002 fce3 	bl	8003e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40012c00 	.word	0x40012c00
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_UART_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d128      	bne.n	8001548 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_UART_MspInit+0x80>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a16      	ldr	r2, [pc, #88]	; (8001554 <HAL_UART_MspInit+0x80>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_UART_MspInit+0x80>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_UART_MspInit+0x80>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <HAL_UART_MspInit+0x80>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_UART_MspInit+0x80>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001526:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001538:	2307      	movs	r3, #7
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <HAL_UART_MspInit+0x84>)
 8001544:	f002 fca0 	bl	8003e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40004800 	.word	0x40004800
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f908 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015bc:	4806      	ldr	r0, [pc, #24]	; (80015d8 <DMA1_Channel1_IRQHandler+0x20>)
 80015be:	f002 f8ca 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  adc1_ready=1;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <DMA1_Channel1_IRQHandler+0x24>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
  i1++;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <DMA1_Channel1_IRQHandler+0x28>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <DMA1_Channel1_IRQHandler+0x28>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000630 	.word	0x20000630
 80015dc:	200007c8 	.word	0x200007c8
 80015e0:	200007cc 	.word	0x200007cc

080015e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80015e8:	4806      	ldr	r0, [pc, #24]	; (8001604 <DMA1_Channel2_IRQHandler+0x20>)
 80015ea:	f002 f8b4 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
  adc2_ready=1;
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <DMA1_Channel2_IRQHandler+0x24>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
  i2++;
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <DMA1_Channel2_IRQHandler+0x28>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <DMA1_Channel2_IRQHandler+0x28>)
 80015fc:	6013      	str	r3, [r2, #0]
  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000734 	.word	0x20000734
 8001608:	200007d0 	.word	0x200007d0
 800160c:	200007c4 	.word	0x200007c4

08001610 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <DMA1_Channel3_IRQHandler+0x4c>)
 8001616:	f002 f89e 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  adc3_ready=1;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <DMA1_Channel3_IRQHandler+0x50>)
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
  i3++;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <DMA1_Channel3_IRQHandler+0x54>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <DMA1_Channel3_IRQHandler+0x54>)
 8001628:	6013      	str	r3, [r2, #0]
  if (adc1_ready && adc2_ready && adc3_ready)
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <DMA1_Channel3_IRQHandler+0x58>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d012      	beq.n	8001658 <DMA1_Channel3_IRQHandler+0x48>
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <DMA1_Channel3_IRQHandler+0x5c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00e      	beq.n	8001658 <DMA1_Channel3_IRQHandler+0x48>
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <DMA1_Channel3_IRQHandler+0x50>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <DMA1_Channel3_IRQHandler+0x48>
  {
	  adc1_ready=0;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <DMA1_Channel3_IRQHandler+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
	  adc2_ready=0;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <DMA1_Channel3_IRQHandler+0x5c>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
	  adc3_ready=0;
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <DMA1_Channel3_IRQHandler+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
	  update_measurements();
 8001654:	f7fe ff7e 	bl	8000554 <update_measurements>
  }
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200004ec 	.word	0x200004ec
 8001660:	200007c0 	.word	0x200007c0
 8001664:	200007bc 	.word	0x200007bc
 8001668:	200007c8 	.word	0x200007c8
 800166c:	200007d0 	.word	0x200007d0

08001670 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <USB_LP_IRQHandler+0x10>)
 8001676:	f002 fe7e 	bl	8004376 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20001c9c 	.word	0x20001c9c

08001684 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 0 */

  /* USER CODE END DMAMUX_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <DMAMUX_OVR_IRQHandler+0x14>)
 800168a:	f002 f9f1 	bl	8003a70 <HAL_DMAEx_MUX_IRQHandler>
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc2);
 800168e:	4803      	ldr	r0, [pc, #12]	; (800169c <DMAMUX_OVR_IRQHandler+0x18>)
 8001690:	f002 f9ee 	bl	8003a70 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000630 	.word	0x20000630
 800169c:	20000734 	.word	0x20000734

080016a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <SystemInit+0x28>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SystemInit+0x28>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SystemInit+0x28>)
 80016b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ba:	609a      	str	r2, [r3, #8]
#endif
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d2:	490e      	ldr	r1, [pc, #56]	; (800170c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <LoopForever+0xe>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e8:	4c0b      	ldr	r4, [pc, #44]	; (8001718 <LoopForever+0x16>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016f6:	f7ff ffd3 	bl	80016a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f00a fa75 	bl	800bbe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fe:	f7fe ff9f 	bl	8000640 <main>

08001702 <LoopForever>:

LoopForever:
    b LoopForever
 8001702:	e7fe      	b.n	8001702 <LoopForever>
  ldr   r0, =_estack
 8001704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001710:	0800bcd8 	.word	0x0800bcd8
  ldr r2, =_sbss
 8001714:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001718:	20001f10 	.word	0x20001f10

0800171c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>

0800171e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f001 fce3 	bl	80030f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f80e 	bl	8001750 <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e001      	b.n	8001744 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001740:	f7ff fc5c 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001744:	79fb      	ldrb	r3, [r7, #7]

}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_InitTick+0x68>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d022      	beq.n	80017aa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_InitTick+0x6c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_InitTick+0x68>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001770:	fbb1 f3f3 	udiv	r3, r1, r3
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f001 fcee 	bl	800315a <HAL_SYSTICK_Config>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10f      	bne.n	80017a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	d809      	bhi.n	800179e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178a:	2200      	movs	r2, #0
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	f04f 30ff 	mov.w	r0, #4294967295
 8001792:	f001 fcba 	bl	800310a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_InitTick+0x70>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e007      	b.n	80017ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	e004      	b.n	80017ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_IncTick+0x1c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_IncTick+0x20>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a03      	ldr	r2, [pc, #12]	; (80017e0 <HAL_IncTick+0x1c>)
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	200007d4 	.word	0x200007d4
 80017e4:	20000008 	.word	0x20000008

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	200007d4 	.word	0x200007d4

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff ffee 	bl	80017e8 <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d004      	beq.n	8001824 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_Delay+0x40>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001824:	bf00      	nop
 8001826:	f7ff ffdf 	bl	80017e8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	429a      	cmp	r2, r3
 8001834:	d8f7      	bhi.n	8001826 <HAL_Delay+0x26>
  {
  }
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008

08001844 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001854:	4904      	ldr	r1, [pc, #16]	; (8001868 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40010030 	.word	0x40010030

0800186c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 0202 	bic.w	r2, r3, #2
 800187c:	4904      	ldr	r1, [pc, #16]	; (8001890 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40010030 	.word	0x40010030

08001894 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80018a6:	f7ff ff9f 	bl	80017e8 <HAL_GetTick>
 80018aa:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80018ac:	e008      	b.n	80018c0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80018ae:	f7ff ff9b 	bl	80017e8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b0a      	cmp	r3, #10
 80018ba:	d901      	bls.n	80018c0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e006      	b.n	80018ce <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40010030 	.word	0x40010030

080018dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001944:	b490      	push	{r4, r7}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3360      	adds	r3, #96	; 0x60
 8001956:	461a      	mov	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <LL_ADC_SetOffset+0x40>)
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	4313      	orrs	r3, r2
 8001972:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001976:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bc90      	pop	{r4, r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	03fff000 	.word	0x03fff000

08001988 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001988:	b490      	push	{r4, r7}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3360      	adds	r3, #96	; 0x60
 8001996:	461a      	mov	r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc90      	pop	{r4, r7}
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019b0:	b490      	push	{r4, r7}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3360      	adds	r3, #96	; 0x60
 80019c0:	461a      	mov	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc90      	pop	{r4, r7}
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019e0:	b490      	push	{r4, r7}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3360      	adds	r3, #96	; 0x60
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc90      	pop	{r4, r7}
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a10:	b490      	push	{r4, r7}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3360      	adds	r3, #96	; 0x60
 8001a20:	461a      	mov	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc90      	pop	{r4, r7}
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	615a      	str	r2, [r3, #20]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a8c:	b490      	push	{r4, r7}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3330      	adds	r3, #48	; 0x30
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	4413      	add	r3, r2
 8001aaa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001aac:	6822      	ldr	r2, [r4, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	211f      	movs	r1, #31
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	401a      	ands	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 011f 	and.w	r1, r3, #31
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc90      	pop	{r4, r7}
 8001adc:	4770      	bx	lr

08001ade <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ade:	b490      	push	{r4, r7}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3314      	adds	r3, #20
 8001aee:	461a      	mov	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	0e5b      	lsrs	r3, r3, #25
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	4413      	add	r3, r2
 8001afc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001afe:	6822      	ldr	r2, [r4, #0]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	0d1b      	lsrs	r3, r3, #20
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	2107      	movs	r1, #7
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	401a      	ands	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	0d1b      	lsrs	r3, r3, #20
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	4313      	orrs	r3, r2
 8001b22:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc90      	pop	{r4, r7}
 8001b2c:	4770      	bx	lr
	...

08001b30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0318 	and.w	r3, r3, #24
 8001b52:	4908      	ldr	r1, [pc, #32]	; (8001b74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b54:	40d9      	lsrs	r1, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	400b      	ands	r3, r1
 8001b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	0007ffff 	.word	0x0007ffff

08001b78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 031f 	and.w	r3, r3, #31
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ba4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6093      	str	r3, [r2, #8]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bcc:	d101      	bne.n	8001bd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c1c:	d101      	bne.n	8001c22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c6c:	f043 0202 	orr.w	r2, r3, #2
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <LL_ADC_IsEnabled+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_ADC_IsEnabled+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d101      	bne.n	8001cbe <LL_ADC_IsDisableOngoing+0x18>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <LL_ADC_IsDisableOngoing+0x1a>
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce0:	f043 0204 	orr.w	r2, r3, #4
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d101      	bne.n	8001d0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d101      	bne.n	8001d32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e19f      	b.n	800209a <HAL_ADC_Init+0x35a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff f973 	bl	8001054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff19 	bl	8001bb8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff feff 	bl	8001b94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff34 	bl	8001c08 <LL_ADC_IsInternalRegulatorEnabled>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d113      	bne.n	8001dce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff18 	bl	8001be0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001db0:	4b99      	ldr	r3, [pc, #612]	; (8002018 <HAL_ADC_Init+0x2d8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	4a99      	ldr	r2, [pc, #612]	; (800201c <HAL_ADC_Init+0x2dc>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f9      	bne.n	8001dc2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff18 	bl	8001c08 <LL_ADC_IsInternalRegulatorEnabled>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	f043 0210 	orr.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff78 	bl	8001cf4 <LL_ADC_REG_IsConversionOngoing>
 8001e04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 813a 	bne.w	8002088 <HAL_ADC_Init+0x348>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 8136 	bne.w	8002088 <HAL_ADC_Init+0x348>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e24:	f043 0202 	orr.w	r2, r3, #2
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff25 	bl	8001c80 <LL_ADC_IsEnabled>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d137      	bne.n	8001eac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e44:	d004      	beq.n	8001e50 <HAL_ADC_Init+0x110>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a75      	ldr	r2, [pc, #468]	; (8002020 <HAL_ADC_Init+0x2e0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d10f      	bne.n	8001e70 <HAL_ADC_Init+0x130>
 8001e50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e54:	f7ff ff14 	bl	8001c80 <LL_ADC_IsEnabled>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	4871      	ldr	r0, [pc, #452]	; (8002020 <HAL_ADC_Init+0x2e0>)
 8001e5c:	f7ff ff10 	bl	8001c80 <LL_ADC_IsEnabled>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4323      	orrs	r3, r4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	e008      	b.n	8001e82 <HAL_ADC_Init+0x142>
 8001e70:	486c      	ldr	r0, [pc, #432]	; (8002024 <HAL_ADC_Init+0x2e4>)
 8001e72:	f7ff ff05 	bl	8001c80 <LL_ADC_IsEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d012      	beq.n	8001eac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e8e:	d004      	beq.n	8001e9a <HAL_ADC_Init+0x15a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a62      	ldr	r2, [pc, #392]	; (8002020 <HAL_ADC_Init+0x2e0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x15e>
 8001e9a:	4a63      	ldr	r2, [pc, #396]	; (8002028 <HAL_ADC_Init+0x2e8>)
 8001e9c:	e000      	b.n	8001ea0 <HAL_ADC_Init+0x160>
 8001e9e:	4a63      	ldr	r2, [pc, #396]	; (800202c <HAL_ADC_Init+0x2ec>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f7ff fd18 	bl	80018dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7f5b      	ldrb	r3, [r3, #29]
 8001eb0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eb6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ebc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ec2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d106      	bne.n	8001ee8 <HAL_ADC_Init+0x1a8>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	045b      	lsls	r3, r3, #17
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <HAL_ADC_Init+0x1c4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	4b49      	ldr	r3, [pc, #292]	; (8002030 <HAL_ADC_Init+0x2f0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fede 	bl	8001cf4 <LL_ADC_REG_IsConversionOngoing>
 8001f38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff feeb 	bl	8001d1a <LL_ADC_INJ_IsConversionOngoing>
 8001f44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d17b      	bne.n	8002044 <HAL_ADC_Init+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d178      	bne.n	8002044 <HAL_ADC_Init+0x304>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f56:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f5e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6e:	f023 0302 	bic.w	r3, r3, #2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d017      	beq.n	8001fb4 <HAL_ADC_Init+0x274>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6911      	ldr	r1, [r2, #16]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001fb2:	e013      	b.n	8001fdc <HAL_ADC_Init+0x29c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fc2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d126      	bne.n	8002034 <HAL_ADC_Init+0x2f4>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ff0:	f023 0304 	bic.w	r3, r3, #4
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ffc:	4311      	orrs	r1, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002008:	430a      	orrs	r2, r1
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	611a      	str	r2, [r3, #16]
 8002016:	e015      	b.n	8002044 <HAL_ADC_Init+0x304>
 8002018:	20000000 	.word	0x20000000
 800201c:	053e2d63 	.word	0x053e2d63
 8002020:	50000100 	.word	0x50000100
 8002024:	50000400 	.word	0x50000400
 8002028:	50000300 	.word	0x50000300
 800202c:	50000700 	.word	0x50000700
 8002030:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10c      	bne.n	8002066 <HAL_ADC_Init+0x326>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f023 010f 	bic.w	r1, r3, #15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
 8002064:	e007      	b.n	8002076 <HAL_ADC_Init+0x336>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 020f 	bic.w	r2, r2, #15
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	65da      	str	r2, [r3, #92]	; 0x5c
 8002086:	e007      	b.n	8002098 <HAL_ADC_Init+0x358>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	f043 0210 	orr.w	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002098:	7ffb      	ldrb	r3, [r7, #31]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	bf00      	nop

080020a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b8:	d004      	beq.n	80020c4 <HAL_ADC_Start_DMA+0x20>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_ADC_Start_DMA+0x16c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_Start_DMA+0x24>
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_ADC_Start_DMA+0x170>)
 80020c6:	e000      	b.n	80020ca <HAL_ADC_Start_DMA+0x26>
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_ADC_Start_DMA+0x174>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fd54 	bl	8001b78 <LL_ADC_GetMultimode>
 80020d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fe0c 	bl	8001cf4 <LL_ADC_REG_IsConversionOngoing>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 808f 	bne.w	8002202 <HAL_ADC_Start_DMA+0x15e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_Start_DMA+0x4e>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e08a      	b.n	8002208 <HAL_ADC_Start_DMA+0x164>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b05      	cmp	r3, #5
 8002104:	d002      	beq.n	800210c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b09      	cmp	r3, #9
 800210a:	d173      	bne.n	80021f4 <HAL_ADC_Start_DMA+0x150>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 fc41 	bl	8002994 <ADC_Enable>
 8002112:	4603      	mov	r3, r0
 8002114:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d166      	bne.n	80021ea <HAL_ADC_Start_DMA+0x146>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a36      	ldr	r2, [pc, #216]	; (8002210 <HAL_ADC_Start_DMA+0x16c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d002      	beq.n	8002140 <HAL_ADC_Start_DMA+0x9c>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	e001      	b.n	8002144 <HAL_ADC_Start_DMA+0xa0>
 8002140:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	4293      	cmp	r3, r2
 800214a:	d002      	beq.n	8002152 <HAL_ADC_Start_DMA+0xae>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_ADC_Start_DMA+0xba>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <HAL_ADC_Start_DMA+0xd4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216e:	f023 0206 	bic.w	r2, r3, #6
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	661a      	str	r2, [r3, #96]	; 0x60
 8002176:	e002      	b.n	800217e <HAL_ADC_Start_DMA+0xda>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	4a26      	ldr	r2, [pc, #152]	; (800221c <HAL_ADC_Start_DMA+0x178>)
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <HAL_ADC_Start_DMA+0x17c>)
 800218c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	4a24      	ldr	r2, [pc, #144]	; (8002224 <HAL_ADC_Start_DMA+0x180>)
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	221c      	movs	r2, #28
 800219c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0210 	orr.w	r2, r2, #16
 80021b4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3340      	adds	r3, #64	; 0x40
 80021d0:	4619      	mov	r1, r3
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f001 fa43 	bl	8003660 <HAL_DMA_Start_IT>
 80021da:	4603      	mov	r3, r0
 80021dc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fd72 	bl	8001ccc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80021e8:	e00d      	b.n	8002206 <HAL_ADC_Start_DMA+0x162>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80021f2:	e008      	b.n	8002206 <HAL_ADC_Start_DMA+0x162>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002200:	e001      	b.n	8002206 <HAL_ADC_Start_DMA+0x162>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002202:	2302      	movs	r3, #2
 8002204:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002206:	7dfb      	ldrb	r3, [r7, #23]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	50000100 	.word	0x50000100
 8002214:	50000300 	.word	0x50000300
 8002218:	50000700 	.word	0x50000700
 800221c:	08002af9 	.word	0x08002af9
 8002220:	08002bd1 	.word	0x08002bd1
 8002224:	08002bed 	.word	0x08002bed

08002228 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0a6      	sub	sp, #152	; 0x98
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x22>
 8002276:	2302      	movs	r3, #2
 8002278:	e37d      	b.n	8002976 <HAL_ADC_ConfigChannel+0x71e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fd34 	bl	8001cf4 <LL_ADC_REG_IsConversionOngoing>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 8362 	bne.w	8002958 <HAL_ADC_ConfigChannel+0x700>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f7ff fbf3 	bl	8001a8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fd22 	bl	8001cf4 <LL_ADC_REG_IsConversionOngoing>
 80022b0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fd2e 	bl	8001d1a <LL_ADC_INJ_IsConversionOngoing>
 80022be:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 817b 	bne.w	80025c2 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 8176 	bne.w	80025c2 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022de:	d10f      	bne.n	8002300 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7ff fbf7 	bl	8001ade <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fba1 	bl	8001a40 <LL_ADC_SetSamplingTimeCommonConfig>
 80022fe:	e00e      	b.n	800231e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	461a      	mov	r2, r3
 800230e:	f7ff fbe6 	bl	8001ade <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fb91 	bl	8001a40 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	08db      	lsrs	r3, r3, #3
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d022      	beq.n	8002386 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002350:	f7ff faf8 	bl	8001944 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6919      	ldr	r1, [r3, #16]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	461a      	mov	r2, r3
 8002362:	f7ff fb3d 	bl	80019e0 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6919      	ldr	r1, [r3, #16]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	7f1b      	ldrb	r3, [r3, #28]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_ADC_ConfigChannel+0x124>
 8002376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237a:	e000      	b.n	800237e <HAL_ADC_ConfigChannel+0x126>
 800237c:	2300      	movs	r3, #0
 800237e:	461a      	mov	r2, r3
 8002380:	f7ff fb46 	bl	8001a10 <LL_ADC_SetOffsetSaturation>
 8002384:	e11d      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fafb 	bl	8001988 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x15a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff faf0 	bl	8001988 <LL_ADC_GetOffsetChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	e012      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x180>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fae5 	bl	8001988 <LL_ADC_GetOffsetChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x198>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0e9b      	lsrs	r3, r3, #26
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	e00a      	b.n	8002406 <HAL_ADC_ConfigChannel+0x1ae>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80023fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	429a      	cmp	r2, r3
 8002408:	d106      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff facc 	bl	80019b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fab2 	bl	8001988 <LL_ADC_GetOffsetChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1ec>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff faa7 	bl	8001988 <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	0e9b      	lsrs	r3, r3, #26
 800243e:	f003 021f 	and.w	r2, r3, #31
 8002442:	e010      	b.n	8002466 <HAL_ADC_ConfigChannel+0x20e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2101      	movs	r1, #1
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fa9c 	bl	8001988 <LL_ADC_GetOffsetChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800245c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_ADC_ConfigChannel+0x226>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	e00a      	b.n	8002494 <HAL_ADC_ConfigChannel+0x23c>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800248c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	429a      	cmp	r2, r3
 8002496:	d106      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fa85 	bl	80019b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fa6b 	bl	8001988 <LL_ADC_GetOffsetChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x27a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2102      	movs	r1, #2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fa60 	bl	8001988 <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	0e9b      	lsrs	r3, r3, #26
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	e010      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x29c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2102      	movs	r1, #2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fa55 	bl	8001988 <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80024ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_ADC_ConfigChannel+0x2b4>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	e00a      	b.n	8002522 <HAL_ADC_ConfigChannel+0x2ca>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800251a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	429a      	cmp	r2, r3
 8002524:	d106      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2200      	movs	r2, #0
 800252c:	2102      	movs	r1, #2
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fa3e 	bl	80019b0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2103      	movs	r1, #3
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fa24 	bl	8001988 <LL_ADC_GetOffsetChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x308>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2103      	movs	r1, #3
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fa19 	bl	8001988 <LL_ADC_GetOffsetChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	0e9b      	lsrs	r3, r3, #26
 800255a:	f003 021f 	and.w	r2, r3, #31
 800255e:	e010      	b.n	8002582 <HAL_ADC_ConfigChannel+0x32a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2103      	movs	r1, #3
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fa0e 	bl	8001988 <LL_ADC_GetOffsetChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_ADC_ConfigChannel+0x342>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0e9b      	lsrs	r3, r3, #26
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	e00a      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x358>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80025a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d106      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2200      	movs	r2, #0
 80025ba:	2103      	movs	r1, #3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f9f7 	bl	80019b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fb5a 	bl	8001c80 <LL_ADC_IsEnabled>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 810c 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	461a      	mov	r2, r3
 80025e2:	f7ff faa5 	bl	8001b30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4aac      	ldr	r2, [pc, #688]	; (800289c <HAL_ADC_ConfigChannel+0x644>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	f040 80fd 	bne.w	80027ec <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <HAL_ADC_ConfigChannel+0x3c2>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	3301      	adds	r3, #1
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2b09      	cmp	r3, #9
 8002610:	bf94      	ite	ls
 8002612:	2301      	movls	r3, #1
 8002614:	2300      	movhi	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	e012      	b.n	8002640 <HAL_ADC_ConfigChannel+0x3e8>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2b09      	cmp	r3, #9
 8002638:	bf94      	ite	ls
 800263a:	2301      	movls	r3, #1
 800263c:	2300      	movhi	r3, #0
 800263e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002640:	2b00      	cmp	r3, #0
 8002642:	d064      	beq.n	800270e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x408>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	3301      	adds	r3, #1
 8002658:	069b      	lsls	r3, r3, #26
 800265a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800265e:	e00e      	b.n	800267e <HAL_ADC_ConfigChannel+0x426>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800266e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	069b      	lsls	r3, r3, #26
 800267a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_ADC_ConfigChannel+0x446>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	3301      	adds	r3, #1
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	e010      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x468>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	ea42 0103 	orr.w	r1, r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x48e>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	3301      	adds	r3, #1
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	051b      	lsls	r3, r3, #20
 80026e4:	e011      	b.n	800270a <HAL_ADC_ConfigChannel+0x4b2>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 021f 	and.w	r2, r3, #31
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270a:	430b      	orrs	r3, r1
 800270c:	e069      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d107      	bne.n	800272a <HAL_ADC_ConfigChannel+0x4d2>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	3301      	adds	r3, #1
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002728:	e00e      	b.n	8002748 <HAL_ADC_ConfigChannel+0x4f0>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	61fb      	str	r3, [r7, #28]
  return result;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	3301      	adds	r3, #1
 8002742:	069b      	lsls	r3, r3, #26
 8002744:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d109      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x510>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	e010      	b.n	800278a <HAL_ADC_ConfigChannel+0x532>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	617b      	str	r3, [r7, #20]
  return result;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	ea42 0103 	orr.w	r1, r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x55e>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	3b1e      	subs	r3, #30
 80027ae:	051b      	lsls	r3, r3, #20
 80027b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027b4:	e014      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x588>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	60fb      	str	r3, [r7, #12]
  return result;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	3b1e      	subs	r3, #30
 80027da:	051b      	lsls	r3, r3, #20
 80027dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e0:	430b      	orrs	r3, r1
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	6892      	ldr	r2, [r2, #8]
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7ff f979 	bl	8001ade <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_ADC_ConfigChannel+0x648>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80b8 	beq.w	800296a <HAL_ADC_ConfigChannel+0x712>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002802:	d004      	beq.n	800280e <HAL_ADC_ConfigChannel+0x5b6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <HAL_ADC_ConfigChannel+0x64c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x5ba>
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_ADC_ConfigChannel+0x650>)
 8002810:	e000      	b.n	8002814 <HAL_ADC_ConfigChannel+0x5bc>
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_ADC_ConfigChannel+0x654>)
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f887 	bl	8001928 <LL_ADC_GetCommonPathInternalCh>
 800281a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <HAL_ADC_ConfigChannel+0x658>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d004      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x5da>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <HAL_ADC_ConfigChannel+0x65c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d146      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x668>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002832:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d140      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x668>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002846:	f040 8090 	bne.w	800296a <HAL_ADC_ConfigChannel+0x712>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002852:	d004      	beq.n	800285e <HAL_ADC_ConfigChannel+0x606>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_ADC_ConfigChannel+0x64c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x60a>
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <HAL_ADC_ConfigChannel+0x650>)
 8002860:	e000      	b.n	8002864 <HAL_ADC_ConfigChannel+0x60c>
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_ADC_ConfigChannel+0x654>)
 8002864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f7ff f847 	bl	8001902 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_ADC_ConfigChannel+0x660>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_ADC_ConfigChannel+0x664>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	099a      	lsrs	r2, r3, #6
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800288c:	e002      	b.n	8002894 <HAL_ADC_ConfigChannel+0x63c>
          {
            wait_loop_index--;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3b01      	subs	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_ConfigChannel+0x636>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800289a:	e066      	b.n	800296a <HAL_ADC_ConfigChannel+0x712>
 800289c:	407f0000 	.word	0x407f0000
 80028a0:	80080000 	.word	0x80080000
 80028a4:	50000100 	.word	0x50000100
 80028a8:	50000300 	.word	0x50000300
 80028ac:	50000700 	.word	0x50000700
 80028b0:	c3210000 	.word	0xc3210000
 80028b4:	90c00010 	.word	0x90c00010
 80028b8:	20000000 	.word	0x20000000
 80028bc:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2e      	ldr	r2, [pc, #184]	; (8002980 <HAL_ADC_ConfigChannel+0x728>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d120      	bne.n	800290c <HAL_ADC_ConfigChannel+0x6b4>
 80028ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11a      	bne.n	800290c <HAL_ADC_ConfigChannel+0x6b4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a2a      	ldr	r2, [pc, #168]	; (8002984 <HAL_ADC_ConfigChannel+0x72c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d044      	beq.n	800296a <HAL_ADC_ConfigChannel+0x712>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e8:	d004      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x69c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a25      	ldr	r2, [pc, #148]	; (8002984 <HAL_ADC_ConfigChannel+0x72c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x6a0>
 80028f4:	4a24      	ldr	r2, [pc, #144]	; (8002988 <HAL_ADC_ConfigChannel+0x730>)
 80028f6:	e000      	b.n	80028fa <HAL_ADC_ConfigChannel+0x6a2>
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <HAL_ADC_ConfigChannel+0x734>)
 80028fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002902:	4619      	mov	r1, r3
 8002904:	4610      	mov	r0, r2
 8002906:	f7fe fffc 	bl	8001902 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800290a:	e02e      	b.n	800296a <HAL_ADC_ConfigChannel+0x712>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_ADC_ConfigChannel+0x738>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d129      	bne.n	800296a <HAL_ADC_ConfigChannel+0x712>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d123      	bne.n	800296a <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a17      	ldr	r2, [pc, #92]	; (8002984 <HAL_ADC_ConfigChannel+0x72c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01e      	beq.n	800296a <HAL_ADC_ConfigChannel+0x712>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002934:	d004      	beq.n	8002940 <HAL_ADC_ConfigChannel+0x6e8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <HAL_ADC_ConfigChannel+0x72c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x6ec>
 8002940:	4a11      	ldr	r2, [pc, #68]	; (8002988 <HAL_ADC_ConfigChannel+0x730>)
 8002942:	e000      	b.n	8002946 <HAL_ADC_ConfigChannel+0x6ee>
 8002944:	4a11      	ldr	r2, [pc, #68]	; (800298c <HAL_ADC_ConfigChannel+0x734>)
 8002946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800294a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f7fe ffd6 	bl	8001902 <LL_ADC_SetCommonPathInternalCh>
 8002956:	e008      	b.n	800296a <HAL_ADC_ConfigChannel+0x712>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002972:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002976:	4618      	mov	r0, r3
 8002978:	3798      	adds	r7, #152	; 0x98
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	c7520000 	.word	0xc7520000
 8002984:	50000100 	.word	0x50000100
 8002988:	50000300 	.word	0x50000300
 800298c:	50000700 	.word	0x50000700
 8002990:	cb840000 	.word	0xcb840000

08002994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f96d 	bl	8001c80 <LL_ADC_IsEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d146      	bne.n	8002a3a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <ADC_Enable+0xb0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e032      	b.n	8002a3c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f928 	bl	8001c30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029e0:	f7fe ff02 	bl	80017e8 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029e6:	e021      	b.n	8002a2c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f947 	bl	8001c80 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d104      	bne.n	8002a02 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f917 	bl	8001c30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a02:	f7fe fef1 	bl	80017e8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d90d      	bls.n	8002a2c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	f043 0210 	orr.w	r2, r3, #16
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a20:	f043 0201 	orr.w	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e007      	b.n	8002a3c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d1d6      	bne.n	80029e8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	8000003f 	.word	0x8000003f

08002a48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff f926 	bl	8001ca6 <LL_ADC_IsDisableOngoing>
 8002a5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff f90d 	bl	8001c80 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d040      	beq.n	8002aee <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d13d      	bne.n	8002aee <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 030d 	and.w	r3, r3, #13
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10c      	bne.n	8002a9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f8e7 	bl	8001c58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a92:	f7fe fea9 	bl	80017e8 <HAL_GetTick>
 8002a96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a98:	e022      	b.n	8002ae0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e01c      	b.n	8002af0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ab6:	f7fe fe97 	bl	80017e8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d90d      	bls.n	8002ae0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	f043 0210 	orr.w	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e3      	bne.n	8002ab6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d14b      	bne.n	8002baa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d021      	beq.n	8002b70 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe ff98 	bl	8001a66 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d032      	beq.n	8002ba2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d12b      	bne.n	8002ba2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11f      	bne.n	8002ba2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b6e:	e018      	b.n	8002ba2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d111      	bne.n	8002ba2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7fd fcc2 	bl	800052c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ba8:	e00e      	b.n	8002bc8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f7fd fcae 	bl	8000518 <HAL_ADC_ErrorCallback>
}
 8002bbc:	e004      	b.n	8002bc8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fb2f 	bl	8002242 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	f043 0204 	orr.w	r2, r3, #4
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7fd fc80 	bl	8000518 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <LL_ADC_IsEnabled>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <LL_ADC_IsEnabled+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_ADC_IsEnabled+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_StartCalibration>:
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002c58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_IsCalibrationOnGoing>:
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c8c:	d101      	bne.n	8002c92 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d101      	bne.n	8002cb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e04d      	b.n	8002d80 <HAL_ADCEx_Calibration_Start+0xb8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff feab 	bl	8002a48 <ADC_Disable>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d136      	bne.n	8002d6a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d04:	f023 0302 	bic.w	r3, r3, #2
 8002d08:	f043 0202 	orr.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6839      	ldr	r1, [r7, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff95 	bl	8002c46 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d1c:	e014      	b.n	8002d48 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d90d      	bls.n	8002d48 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	f023 0312 	bic.w	r3, r3, #18
 8002d34:	f043 0210 	orr.w	r2, r3, #16
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e01b      	b.n	8002d80 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff93 	bl	8002c78 <LL_ADC_IsCalibrationOnGoing>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e2      	bne.n	8002d1e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	f023 0303 	bic.w	r3, r3, #3
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d68:	e005      	b.n	8002d76 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	0004de01 	.word	0x0004de01

08002d8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b0a1      	sub	sp, #132	; 0x84
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e0c7      	b.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dba:	d102      	bne.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002dbc:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	e001      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0aa      	b.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff5a 	bl	8002ca0 <LL_ADC_REG_IsConversionOngoing>
 8002dec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff54 	bl	8002ca0 <LL_ADC_REG_IsConversionOngoing>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 808c 	bne.w	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x18c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 8088 	bne.w	8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x18c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e10:	d004      	beq.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a4b      	ldr	r2, [pc, #300]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002e1c:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8002e1e:	e000      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8002e20:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002e22:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d041      	beq.n	8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e3e:	035b      	lsls	r3, r3, #13
 8002e40:	430b      	orrs	r3, r1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e50:	d004      	beq.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a3b      	ldr	r2, [pc, #236]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10f      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
 8002e5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e60:	f7ff fede 	bl	8002c20 <LL_ADC_IsEnabled>
 8002e64:	4604      	mov	r4, r0
 8002e66:	4837      	ldr	r0, [pc, #220]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e68:	f7ff feda 	bl	8002c20 <LL_ADC_IsEnabled>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4323      	orrs	r3, r4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e008      	b.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x102>
 8002e7c:	4834      	ldr	r0, [pc, #208]	; (8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8002e7e:	f7ff fecf 	bl	8002c20 <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d04c      	beq.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e9a:	f023 030f 	bic.w	r3, r3, #15
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6811      	ldr	r1, [r2, #0]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	6892      	ldr	r2, [r2, #8]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eae:	e03d      	b.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec4:	d004      	beq.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x144>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10f      	bne.n	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8002ed0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ed4:	f7ff fea4 	bl	8002c20 <LL_ADC_IsEnabled>
 8002ed8:	4604      	mov	r4, r0
 8002eda:	481a      	ldr	r0, [pc, #104]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002edc:	f7ff fea0 	bl	8002c20 <LL_ADC_IsEnabled>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4323      	orrs	r3, r4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e008      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002ef0:	4817      	ldr	r0, [pc, #92]	; (8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8002ef2:	f7ff fe95 	bl	8002c20 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d012      	beq.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f0e:	f023 030f 	bic.w	r3, r3, #15
 8002f12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f16:	e009      	b.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f2a:	e000      	b.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3784      	adds	r7, #132	; 0x84
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd90      	pop	{r4, r7, pc}
 8002f42:	bf00      	nop
 8002f44:	50000100 	.word	0x50000100
 8002f48:	50000300 	.word	0x50000300
 8002f4c:	50000700 	.word	0x50000700
 8002f50:	50000400 	.word	0x50000400

08002f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f86:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	60d3      	str	r3, [r2, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 0307 	and.w	r3, r3, #7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0b      	blt.n	8002fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4907      	ldr	r1, [pc, #28]	; (8002ff0 <__NVIC_EnableIRQ+0x38>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	2b00      	cmp	r3, #0
 8003006:	db0a      	blt.n	800301e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	490c      	ldr	r1, [pc, #48]	; (8003040 <__NVIC_SetPriority+0x4c>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	440b      	add	r3, r1
 8003018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800301c:	e00a      	b.n	8003034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4908      	ldr	r1, [pc, #32]	; (8003044 <__NVIC_SetPriority+0x50>)
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	3b04      	subs	r3, #4
 800302c:	0112      	lsls	r2, r2, #4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	440b      	add	r3, r1
 8003032:	761a      	strb	r2, [r3, #24]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000e100 	.word	0xe000e100
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f1c3 0307 	rsb	r3, r3, #7
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf28      	it	cs
 8003066:	2304      	movcs	r3, #4
 8003068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3304      	adds	r3, #4
 800306e:	2b06      	cmp	r3, #6
 8003070:	d902      	bls.n	8003078 <NVIC_EncodePriority+0x30>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b03      	subs	r3, #3
 8003076:	e000      	b.n	800307a <NVIC_EncodePriority+0x32>
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	43d9      	mvns	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	4313      	orrs	r3, r2
         );
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c0:	d301      	bcc.n	80030c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00f      	b.n	80030e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <SysTick_Config+0x40>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ce:	210f      	movs	r1, #15
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f7ff ff8e 	bl	8002ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <SysTick_Config+0x40>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <SysTick_Config+0x40>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff29 	bl	8002f54 <__NVIC_SetPriorityGrouping>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003118:	f7ff ff40 	bl	8002f9c <__NVIC_GetPriorityGrouping>
 800311c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f7ff ff90 	bl	8003048 <NVIC_EncodePriority>
 8003128:	4602      	mov	r2, r0
 800312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff5f 	bl	8002ff4 <__NVIC_SetPriority>
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff33 	bl	8002fb8 <__NVIC_EnableIRQ>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ffa4 	bl	80030b0 <SysTick_Config>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e014      	b.n	80031ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	791b      	ldrb	r3, [r3, #4]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fe f8e1 	bl	800135c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	795b      	ldrb	r3, [r3, #5]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_DAC_ConfigChannel+0x1c>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e194      	b.n	80034fe <HAL_DAC_ConfigChannel+0x346>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2202      	movs	r2, #2
 80031de:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d174      	bne.n	80032d2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d137      	bne.n	800325e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80031ee:	f7fe fafb 	bl	80017e8 <HAL_GetTick>
 80031f2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031f4:	e011      	b.n	800321a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031f6:	f7fe faf7 	bl	80017e8 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d90a      	bls.n	800321a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f043 0208 	orr.w	r2, r3, #8
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2203      	movs	r2, #3
 8003214:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e171      	b.n	80034fe <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e6      	bne.n	80031f6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003228:	2001      	movs	r0, #1
 800322a:	f7fe fae9 	bl	8001800 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
 8003238:	e01e      	b.n	8003278 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800323a:	f7fe fad5 	bl	80017e8 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d90a      	bls.n	800325e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f043 0208 	orr.w	r2, r3, #8
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2203      	movs	r2, #3
 8003258:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e14f      	b.n	80034fe <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003264:	2b00      	cmp	r3, #0
 8003266:	dbe8      	blt.n	800323a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003268:	2001      	movs	r0, #1
 800326a:	f7fe fac9 	bl	8001800 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	ea02 0103 	and.w	r1, r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	409a      	lsls	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	21ff      	movs	r1, #255	; 0xff
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	ea02 0103 	and.w	r1, r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d11d      	bne.n	8003316 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	221f      	movs	r2, #31
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f2:	4013      	ands	r3, r2
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330a:	4313      	orrs	r3, r2
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2207      	movs	r2, #7
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	4013      	ands	r3, r2
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
 8003342:	e011      	b.n	8003368 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003350:	2301      	movs	r3, #1
 8003352:	623b      	str	r3, [r7, #32]
 8003354:	e008      	b.n	8003368 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800335e:	2301      	movs	r3, #1
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	e001      	b.n	8003368 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	6a3a      	ldr	r2, [r7, #32]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	4013      	ands	r3, r2
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d102      	bne.n	800339c <HAL_DAC_ConfigChannel+0x1e4>
 8003396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339a:	e000      	b.n	800339e <HAL_DAC_ConfigChannel+0x1e6>
 800339c:	2300      	movs	r3, #0
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b6:	4013      	ands	r3, r2
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	795b      	ldrb	r3, [r3, #5]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_DAC_ConfigChannel+0x210>
 80033c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033c6:	e000      	b.n	80033ca <HAL_DAC_ConfigChannel+0x212>
 80033c8:	2300      	movs	r3, #0
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d114      	bne.n	800340a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80033e0:	f002 fb68 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 80033e4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	4a47      	ldr	r2, [pc, #284]	; (8003508 <HAL_DAC_ConfigChannel+0x350>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d904      	bls.n	80033f8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	e00d      	b.n	8003414 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	4a44      	ldr	r2, [pc, #272]	; (800350c <HAL_DAC_ConfigChannel+0x354>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d909      	bls.n	8003414 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
 8003408:	e004      	b.n	8003414 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	4313      	orrs	r3, r2
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003422:	4313      	orrs	r3, r2
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43da      	mvns	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	400a      	ands	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003466:	4013      	ands	r3, r2
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	4313      	orrs	r3, r2
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	22c0      	movs	r2, #192	; 0xc0
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43da      	mvns	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	400a      	ands	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	ea02 0103 	and.w	r1, r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3728      	adds	r7, #40	; 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	09896800 	.word	0x09896800
 800350c:	04c4b400 	.word	0x04c4b400

08003510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e08d      	b.n	800363e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_DMA_Init+0x138>)
 800352a:	429a      	cmp	r2, r3
 800352c:	d80f      	bhi.n	800354e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	4b45      	ldr	r3, [pc, #276]	; (800364c <HAL_DMA_Init+0x13c>)
 8003536:	4413      	add	r3, r2
 8003538:	4a45      	ldr	r2, [pc, #276]	; (8003650 <HAL_DMA_Init+0x140>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	009a      	lsls	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a42      	ldr	r2, [pc, #264]	; (8003654 <HAL_DMA_Init+0x144>)
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
 800354c:	e00e      	b.n	800356c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	4b40      	ldr	r3, [pc, #256]	; (8003658 <HAL_DMA_Init+0x148>)
 8003556:	4413      	add	r3, r2
 8003558:	4a3d      	ldr	r2, [pc, #244]	; (8003650 <HAL_DMA_Init+0x140>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	009a      	lsls	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a3c      	ldr	r2, [pc, #240]	; (800365c <HAL_DMA_Init+0x14c>)
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9b6 	bl	8003930 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035cc:	d102      	bne.n	80035d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d010      	beq.n	8003614 <HAL_DMA_Init+0x104>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d80c      	bhi.n	8003614 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9d6 	bl	80039ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e008      	b.n	8003626 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40020407 	.word	0x40020407
 800364c:	bffdfff8 	.word	0xbffdfff8
 8003650:	cccccccd 	.word	0xcccccccd
 8003654:	40020000 	.word	0x40020000
 8003658:	bffdfbf8 	.word	0xbffdfbf8
 800365c:	40020400 	.word	0x40020400

08003660 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_DMA_Start_IT+0x20>
 800367c:	2302      	movs	r3, #2
 800367e:	e066      	b.n	800374e <HAL_DMA_Start_IT+0xee>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d155      	bne.n	8003740 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f8fb 	bl	80038b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 020e 	orr.w	r2, r2, #14
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e00f      	b.n	80036f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0204 	bic.w	r2, r2, #4
 80036e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 020a 	orr.w	r2, r2, #10
 80036f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003714:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e005      	b.n	800374c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003748:	2302      	movs	r3, #2
 800374a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800374c:	7dfb      	ldrb	r3, [r7, #23]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2204      	movs	r2, #4
 8003778:	409a      	lsls	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d026      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x7a>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d021      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0204 	bic.w	r2, r2, #4
 80037a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f003 021f 	and.w	r2, r3, #31
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	2104      	movs	r1, #4
 80037b8:	fa01 f202 	lsl.w	r2, r1, r2
 80037bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d071      	beq.n	80038aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037ce:	e06c      	b.n	80038aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2202      	movs	r2, #2
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d02e      	beq.n	8003842 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d029      	beq.n	8003842 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 020a 	bic.w	r2, r2, #10
 800380a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2102      	movs	r1, #2
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d038      	beq.n	80038aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003840:	e033      	b.n	80038aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2208      	movs	r2, #8
 800384c:	409a      	lsls	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d02a      	beq.n	80038ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d025      	beq.n	80038ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 020e 	bic.w	r2, r2, #14
 800386e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
}
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 021f 	and.w	r2, r3, #31
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d108      	bne.n	8003914 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003912:	e007      	b.n	8003924 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003940:	429a      	cmp	r2, r3
 8003942:	d802      	bhi.n	800394a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e001      	b.n	800394e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800394c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	3b08      	subs	r3, #8
 800395a:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	009a      	lsls	r2, r3, #2
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4413      	add	r3, r2
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800397a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2201      	movs	r2, #1
 8003984:	409a      	lsls	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	651a      	str	r2, [r3, #80]	; 0x50
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40020407 	.word	0x40020407
 800399c:	40020800 	.word	0x40020800
 80039a0:	40020820 	.word	0x40020820
 80039a4:	cccccccd 	.word	0xcccccccd
 80039a8:	40020880 	.word	0x40020880

080039ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039ce:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2201      	movs	r2, #1
 80039da:	409a      	lsls	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	1000823f 	.word	0x1000823f
 80039f0:	40020940 	.word	0x40020940

080039f4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d12b      	bne.n	8003a62 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_DMAEx_ConfigMuxSync+0x24>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e025      	b.n	8003a64 <HAL_DMAEx_ConfigMuxSync+0x70>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b2d9      	uxtb	r1, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	061a      	lsls	r2, r3, #24
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	04db      	lsls	r3, r3, #19
 8003a36:	431a      	orrs	r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	7a1b      	ldrb	r3, [r3, #8]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	431a      	orrs	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	7a5b      	ldrb	r3, [r3, #9]
 8003a4a:	025b      	lsls	r3, r3, #9
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->SyncSignalID) << DMAMUX_CxCR_SYNC_ID_Pos) | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01a      	beq.n	8003abe <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003aa0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d022      	beq.n	8003b0c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01a      	beq.n	8003b0c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003aee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
      }
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e147      	b.n	8003db6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd fc2e 	bl	800139c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0210 	bic.w	r2, r2, #16
 8003b4e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b50:	f7fd fe4a 	bl	80017e8 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b56:	e012      	b.n	8003b7e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003b58:	f7fd fe46 	bl	80017e8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b0a      	cmp	r3, #10
 8003b64:	d90b      	bls.n	8003b7e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2203      	movs	r2, #3
 8003b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e11b      	b.n	8003db6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d0e5      	beq.n	8003b58 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b9c:	f7fd fe24 	bl	80017e8 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ba2:	e012      	b.n	8003bca <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ba4:	f7fd fe20 	bl	80017e8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b0a      	cmp	r3, #10
 8003bb0:	d90b      	bls.n	8003bca <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0f5      	b.n	8003db6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0e5      	beq.n	8003ba4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0202 	orr.w	r2, r2, #2
 8003be6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a74      	ldr	r2, [pc, #464]	; (8003dc0 <HAL_FDCAN_Init+0x2ac>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d103      	bne.n	8003bfa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003bf2:	4a74      	ldr	r2, [pc, #464]	; (8003dc4 <HAL_FDCAN_Init+0x2b0>)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7c1b      	ldrb	r3, [r3, #16]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d108      	bne.n	8003c14 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c10:	619a      	str	r2, [r3, #24]
 8003c12:	e007      	b.n	8003c24 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c22:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7c5b      	ldrb	r3, [r3, #17]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d108      	bne.n	8003c3e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c3a:	619a      	str	r2, [r3, #24]
 8003c3c:	e007      	b.n	8003c4e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7c9b      	ldrb	r3, [r3, #18]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d108      	bne.n	8003c68 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c64:	619a      	str	r2, [r3, #24]
 8003c66:	e007      	b.n	8003c78 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c76:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699a      	ldr	r2, [r3, #24]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003c9c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0210 	bic.w	r2, r2, #16
 8003cac:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d108      	bne.n	8003cc8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0204 	orr.w	r2, r2, #4
 8003cc4:	619a      	str	r2, [r3, #24]
 8003cc6:	e02c      	b.n	8003d22 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d028      	beq.n	8003d22 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d01c      	beq.n	8003d12 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ce6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0210 	orr.w	r2, r2, #16
 8003cf6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d110      	bne.n	8003d22 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0220 	orr.w	r2, r2, #32
 8003d0e:	619a      	str	r2, [r3, #24]
 8003d10:	e007      	b.n	8003d22 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0220 	orr.w	r2, r2, #32
 8003d20:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d32:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003d3a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003d4a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003d4c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d56:	d115      	bne.n	8003d84 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	3b01      	subs	r3, #1
 8003d64:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d66:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003d70:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003d80:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003d82:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f814 	bl	8003dc8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40006400 	.word	0x40006400
 8003dc4:	40006500 	.word	0x40006500

08003dc8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <FDCAN_CalcultateRamBlockAddresses+0xb8>)
 8003dd2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2a      	ldr	r2, [pc, #168]	; (8003e84 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d103      	bne.n	8003de6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003de4:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df4:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	041a      	lsls	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1a:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	061a      	lsls	r2, r3, #24
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e005      	b.n	8003e68 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d3f3      	bcc.n	8003e5c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	4000a400 	.word	0x4000a400
 8003e84:	40006800 	.word	0x40006800

08003e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e96:	e15a      	b.n	800414e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 814c 	beq.w	8004148 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x38>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b12      	cmp	r3, #18
 8003ebe:	d123      	bne.n	8003f08 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	08da      	lsrs	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3208      	adds	r2, #8
 8003ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	220f      	movs	r2, #15
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	08da      	lsrs	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3208      	adds	r2, #8
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	2203      	movs	r2, #3
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0203 	and.w	r2, r3, #3
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d00b      	beq.n	8003f5c <HAL_GPIO_Init+0xd4>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d007      	beq.n	8003f5c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f50:	2b11      	cmp	r3, #17
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b12      	cmp	r3, #18
 8003f5a:	d130      	bne.n	8003fbe <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2203      	movs	r2, #3
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f92:	2201      	movs	r2, #1
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	091b      	lsrs	r3, r3, #4
 8003fa8:	f003 0201 	and.w	r2, r3, #1
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	2203      	movs	r2, #3
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80a6 	beq.w	8004148 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffc:	4b5b      	ldr	r3, [pc, #364]	; (800416c <HAL_GPIO_Init+0x2e4>)
 8003ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004000:	4a5a      	ldr	r2, [pc, #360]	; (800416c <HAL_GPIO_Init+0x2e4>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6613      	str	r3, [r2, #96]	; 0x60
 8004008:	4b58      	ldr	r3, [pc, #352]	; (800416c <HAL_GPIO_Init+0x2e4>)
 800400a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004014:	4a56      	ldr	r2, [pc, #344]	; (8004170 <HAL_GPIO_Init+0x2e8>)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	089b      	lsrs	r3, r3, #2
 800401a:	3302      	adds	r3, #2
 800401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	220f      	movs	r2, #15
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800403e:	d01f      	beq.n	8004080 <HAL_GPIO_Init+0x1f8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a4c      	ldr	r2, [pc, #304]	; (8004174 <HAL_GPIO_Init+0x2ec>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d019      	beq.n	800407c <HAL_GPIO_Init+0x1f4>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a4b      	ldr	r2, [pc, #300]	; (8004178 <HAL_GPIO_Init+0x2f0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_GPIO_Init+0x1f0>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a4a      	ldr	r2, [pc, #296]	; (800417c <HAL_GPIO_Init+0x2f4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00d      	beq.n	8004074 <HAL_GPIO_Init+0x1ec>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a49      	ldr	r2, [pc, #292]	; (8004180 <HAL_GPIO_Init+0x2f8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d007      	beq.n	8004070 <HAL_GPIO_Init+0x1e8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a48      	ldr	r2, [pc, #288]	; (8004184 <HAL_GPIO_Init+0x2fc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d101      	bne.n	800406c <HAL_GPIO_Init+0x1e4>
 8004068:	2305      	movs	r3, #5
 800406a:	e00a      	b.n	8004082 <HAL_GPIO_Init+0x1fa>
 800406c:	2306      	movs	r3, #6
 800406e:	e008      	b.n	8004082 <HAL_GPIO_Init+0x1fa>
 8004070:	2304      	movs	r3, #4
 8004072:	e006      	b.n	8004082 <HAL_GPIO_Init+0x1fa>
 8004074:	2303      	movs	r3, #3
 8004076:	e004      	b.n	8004082 <HAL_GPIO_Init+0x1fa>
 8004078:	2302      	movs	r3, #2
 800407a:	e002      	b.n	8004082 <HAL_GPIO_Init+0x1fa>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_GPIO_Init+0x1fa>
 8004080:	2300      	movs	r3, #0
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	f002 0203 	and.w	r2, r2, #3
 8004088:	0092      	lsls	r2, r2, #2
 800408a:	4093      	lsls	r3, r2
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004092:	4937      	ldr	r1, [pc, #220]	; (8004170 <HAL_GPIO_Init+0x2e8>)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <HAL_GPIO_Init+0x300>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040c4:	4a30      	ldr	r2, [pc, #192]	; (8004188 <HAL_GPIO_Init+0x300>)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80040ca:	4b2f      	ldr	r3, [pc, #188]	; (8004188 <HAL_GPIO_Init+0x300>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040ee:	4a26      	ldr	r2, [pc, #152]	; (8004188 <HAL_GPIO_Init+0x300>)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040f4:	4b24      	ldr	r3, [pc, #144]	; (8004188 <HAL_GPIO_Init+0x300>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004118:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <HAL_GPIO_Init+0x300>)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_GPIO_Init+0x300>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004142:	4a11      	ldr	r2, [pc, #68]	; (8004188 <HAL_GPIO_Init+0x300>)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3301      	adds	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	f47f ae9d 	bne.w	8003e98 <HAL_GPIO_Init+0x10>
  }
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000
 8004170:	40010000 	.word	0x40010000
 8004174:	48000400 	.word	0x48000400
 8004178:	48000800 	.word	0x48000800
 800417c:	48000c00 	.word	0x48000c00
 8004180:	48001000 	.word	0x48001000
 8004184:	48001400 	.word	0x48001400
 8004188:	40010400 	.word	0x40010400

0800418c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
 8004198:	4613      	mov	r3, r2
 800419a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800419c:	787b      	ldrb	r3, [r7, #1]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041a8:	e002      	b.n	80041b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041be:	b08b      	sub	sp, #44	; 0x2c
 80041c0:	af06      	add	r7, sp, #24
 80041c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0ad      	b.n	800432a <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f007 fa1a 	bl	800b61c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2203      	movs	r2, #3
 80041ec:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f004 fbbb 	bl	8008970 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	e035      	b.n	800426c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	015b      	lsls	r3, r3, #5
 8004206:	4413      	add	r3, r2
 8004208:	3329      	adds	r3, #41	; 0x29
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	015b      	lsls	r3, r3, #5
 8004214:	4413      	add	r3, r2
 8004216:	3328      	adds	r3, #40	; 0x28
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	7bfa      	ldrb	r2, [r7, #15]
 8004220:	b291      	uxth	r1, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	015b      	lsls	r3, r3, #5
 8004226:	4413      	add	r3, r2
 8004228:	3336      	adds	r3, #54	; 0x36
 800422a:	460a      	mov	r2, r1
 800422c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	015b      	lsls	r3, r3, #5
 8004234:	4413      	add	r3, r2
 8004236:	332b      	adds	r3, #43	; 0x2b
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	015b      	lsls	r3, r3, #5
 8004242:	4413      	add	r3, r2
 8004244:	3338      	adds	r3, #56	; 0x38
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	015b      	lsls	r3, r3, #5
 8004250:	4413      	add	r3, r2
 8004252:	333c      	adds	r3, #60	; 0x3c
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	3302      	adds	r3, #2
 800425e:	015b      	lsls	r3, r3, #5
 8004260:	4413      	add	r3, r2
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	3301      	adds	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	7bfa      	ldrb	r2, [r7, #15]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	429a      	cmp	r2, r3
 8004274:	d3c4      	bcc.n	8004200 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004276:	2300      	movs	r3, #0
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e031      	b.n	80042e0 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	015b      	lsls	r3, r3, #5
 8004282:	4413      	add	r3, r2
 8004284:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	015b      	lsls	r3, r3, #5
 8004292:	4413      	add	r3, r2
 8004294:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	015b      	lsls	r3, r3, #5
 80042a2:	4413      	add	r3, r2
 80042a4:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	015b      	lsls	r3, r3, #5
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	015b      	lsls	r3, r3, #5
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	330a      	adds	r3, #10
 80042d2:	015b      	lsls	r3, r3, #5
 80042d4:	4413      	add	r3, r2
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	3301      	adds	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d3c8      	bcc.n	800427c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	687e      	ldr	r6, [r7, #4]
 80042f2:	466d      	mov	r5, sp
 80042f4:	f106 0410 	add.w	r4, r6, #16
 80042f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	1d33      	adds	r3, r6, #4
 8004302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004304:	6838      	ldr	r0, [r7, #0]
 8004306:	f004 fb50 	bl	80089aa <USB_DevInit>

  hpcd->USB_Address = 0U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d102      	bne.n	8004328 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fe41 	bl	8004faa <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004332 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_PCD_Start+0x16>
 8004344:	2302      	movs	r3, #2
 8004346:	e012      	b.n	800436e <HAL_PCD_Start+0x3c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f005 fb75 	bl	8009a44 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f004 faee 	bl	8008940 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f005 fb75 	bl	8009a72 <USB_ReadInterrupts>
 8004388:	4603      	mov	r3, r0
 800438a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800438e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004392:	d102      	bne.n	800439a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fb3f 	bl	8004a18 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f005 fb67 	bl	8009a72 <USB_ReadInterrupts>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ae:	d112      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c2:	b292      	uxth	r2, r2
 80043c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f007 f99c 	bl	800b706 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80043ce:	2100      	movs	r1, #0
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f929 	bl	8004628 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f005 fb49 	bl	8009a72 <USB_ReadInterrupts>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ea:	d10b      	bne.n	8004404 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043fe:	b292      	uxth	r2, r2
 8004400:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f005 fb32 	bl	8009a72 <USB_ReadInterrupts>
 800440e:	4603      	mov	r3, r0
 8004410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004418:	d10b      	bne.n	8004432 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800442c:	b292      	uxth	r2, r2
 800442e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f005 fb1b 	bl	8009a72 <USB_ReadInterrupts>
 800443c:	4603      	mov	r3, r0
 800443e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004446:	d133      	bne.n	80044b0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0204 	bic.w	r2, r2, #4
 800445a:	b292      	uxth	r2, r2
 800445c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0208 	bic.w	r2, r2, #8
 8004472:	b292      	uxth	r2, r2
 8004474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800447e:	2b01      	cmp	r3, #1
 8004480:	d107      	bne.n	8004492 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800448a:	2100      	movs	r1, #0
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f007 fb2b 	bl	800bae8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f007 f970 	bl	800b778 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044aa:	b292      	uxth	r2, r2
 80044ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f005 fadc 	bl	8009a72 <USB_ReadInterrupts>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c4:	d131      	bne.n	800452a <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0208 	orr.w	r2, r2, #8
 80044d8:	b292      	uxth	r2, r2
 80044da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f0:	b292      	uxth	r2, r2
 80044f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0204 	orr.w	r2, r2, #4
 8004508:	b292      	uxth	r2, r2
 800450a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f005 faad 	bl	8009a72 <USB_ReadInterrupts>
 8004518:	4603      	mov	r3, r0
 800451a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	d002      	beq.n	800452a <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f007 f90d 	bl	800b744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f005 fa9f 	bl	8009a72 <USB_ReadInterrupts>
 8004534:	4603      	mov	r3, r0
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d13f      	bne.n	80045be <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004550:	b292      	uxth	r2, r2
 8004552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800455c:	2b00      	cmp	r3, #0
 800455e:	d12b      	bne.n	80045b8 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004568:	b29a      	uxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0204 	orr.w	r2, r2, #4
 8004572:	b292      	uxth	r2, r2
 8004574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0208 	orr.w	r2, r2, #8
 800458a:	b292      	uxth	r2, r2
 800458c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80045ae:	2101      	movs	r1, #1
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f007 fa99 	bl	800bae8 <HAL_PCDEx_LPM_Callback>
 80045b6:	e002      	b.n	80045be <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f007 f8c3 	bl	800b744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f005 fa55 	bl	8009a72 <USB_ReadInterrupts>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d2:	d10e      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045e6:	b292      	uxth	r2, r2
 80045e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f007 f87c 	bl	800b6ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f005 fa3b 	bl	8009a72 <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004606:	d10b      	bne.n	8004620 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800461a:	b292      	uxth	r2, r2
 800461c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_PCD_SetAddress+0x1a>
 800463e:	2302      	movs	r3, #2
 8004640:	e013      	b.n	800466a <HAL_PCD_SetAddress+0x42>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f005 f9de 	bl	8009a1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	4608      	mov	r0, r1
 800467c:	4611      	mov	r1, r2
 800467e:	461a      	mov	r2, r3
 8004680:	4603      	mov	r3, r0
 8004682:	70fb      	strb	r3, [r7, #3]
 8004684:	460b      	mov	r3, r1
 8004686:	803b      	strh	r3, [r7, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004694:	2b00      	cmp	r3, #0
 8004696:	da0b      	bge.n	80046b0 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	015b      	lsls	r3, r3, #5
 80046a0:	3328      	adds	r3, #40	; 0x28
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	705a      	strb	r2, [r3, #1]
 80046ae:	e00b      	b.n	80046c8 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	015b      	lsls	r3, r3, #5
 80046b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046d4:	883a      	ldrh	r2, [r7, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	78ba      	ldrb	r2, [r7, #2]
 80046de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046f2:	78bb      	ldrb	r3, [r7, #2]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d102      	bne.n	80046fe <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_PCD_EP_Open+0x9a>
 8004708:	2302      	movs	r3, #2
 800470a:	e00e      	b.n	800472a <HAL_PCD_EP_Open+0xb8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68f9      	ldr	r1, [r7, #12]
 800471a:	4618      	mov	r0, r3
 800471c:	f004 f96a 	bl	80089f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8004728:	7afb      	ldrb	r3, [r7, #11]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800473e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004742:	2b00      	cmp	r3, #0
 8004744:	da0b      	bge.n	800475e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	015b      	lsls	r3, r3, #5
 800474e:	3328      	adds	r3, #40	; 0x28
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	705a      	strb	r2, [r3, #1]
 800475c:	e00b      	b.n	8004776 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	015b      	lsls	r3, r3, #5
 8004766:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_PCD_EP_Close+0x5e>
 800478c:	2302      	movs	r3, #2
 800478e:	e00e      	b.n	80047ae <HAL_PCD_EP_Close+0x7c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68f9      	ldr	r1, [r7, #12]
 800479e:	4618      	mov	r0, r3
 80047a0:	f004 fc18 	bl	8008fd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	460b      	mov	r3, r1
 80047c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047c6:	7afb      	ldrb	r3, [r7, #11]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	015b      	lsls	r3, r3, #5
 80047ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2200      	movs	r2, #0
 80047e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2200      	movs	r2, #0
 80047ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f0:	7afb      	ldrb	r3, [r7, #11]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047fc:	7afb      	ldrb	r3, [r7, #11]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6979      	ldr	r1, [r7, #20]
 800480c:	4618      	mov	r0, r3
 800480e:	f004 fd77 	bl	8009300 <USB_EPStartXfer>
 8004812:	e005      	b.n	8004820 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	4618      	mov	r0, r3
 800481c:	f004 fd70 	bl	8009300 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	330a      	adds	r3, #10
 8004840:	015b      	lsls	r3, r3, #5
 8004842:	4413      	add	r3, r2
 8004844:	3304      	adds	r3, #4
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	460b      	mov	r3, r1
 8004862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004864:	7afb      	ldrb	r3, [r7, #11]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	015b      	lsls	r3, r3, #5
 800486c:	3328      	adds	r3, #40	; 0x28
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2201      	movs	r2, #1
 800488a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800488c:	7afb      	ldrb	r3, [r7, #11]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	b2da      	uxtb	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004898:	7afb      	ldrb	r3, [r7, #11]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6979      	ldr	r1, [r7, #20]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f004 fd29 	bl	8009300 <USB_EPStartXfer>
 80048ae:	e005      	b.n	80048bc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6979      	ldr	r1, [r7, #20]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f004 fd22 	bl	8009300 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	f003 0207 	and.w	r2, r3, #7
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d901      	bls.n	80048e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e046      	b.n	8004972 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	da0b      	bge.n	8004904 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	015b      	lsls	r3, r3, #5
 80048f4:	3328      	adds	r3, #40	; 0x28
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	705a      	strb	r2, [r3, #1]
 8004902:	e009      	b.n	8004918 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	015b      	lsls	r3, r3, #5
 8004908:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	b2da      	uxtb	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_PCD_EP_SetStall+0x72>
 8004934:	2302      	movs	r3, #2
 8004936:	e01c      	b.n	8004972 <HAL_PCD_EP_SetStall+0xac>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68f9      	ldr	r1, [r7, #12]
 8004946:	4618      	mov	r0, r3
 8004948:	f004 ff92 	bl	8009870 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	2b00      	cmp	r3, #0
 8004954:	d108      	bne.n	8004968 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f005 f895 	bl	8009a92 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d901      	bls.n	8004998 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e03a      	b.n	8004a0e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800499c:	2b00      	cmp	r3, #0
 800499e:	da0b      	bge.n	80049b8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	015b      	lsls	r3, r3, #5
 80049a8:	3328      	adds	r3, #40	; 0x28
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	705a      	strb	r2, [r3, #1]
 80049b6:	e00b      	b.n	80049d0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	015b      	lsls	r3, r3, #5
 80049c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4413      	add	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_PCD_EP_ClrStall+0x76>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e00e      	b.n	8004a0e <HAL_PCD_EP_ClrStall+0x94>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68f9      	ldr	r1, [r7, #12]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f004 ff78 	bl	80098f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a20:	e274      	b.n	8004f0c <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a2a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a2c:	8afb      	ldrh	r3, [r7, #22]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004a36:	7d7b      	ldrb	r3, [r7, #21]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 813c 	bne.w	8004cb6 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a3e:	8afb      	ldrh	r3, [r7, #22]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d14f      	bne.n	8004ae8 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a58:	b29c      	uxth	r4, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3328      	adds	r3, #40	; 0x28
 8004a6e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4413      	add	r3, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f006 fe07 	bl	800b6bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8228 	beq.w	8004f0c <PCD_EP_ISR_Handler+0x4f4>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f040 8223 	bne.w	8004f0c <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	b292      	uxth	r2, r2
 8004ada:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ae6:	e211      	b.n	8004f0c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004aee:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004af8:	8a7b      	ldrh	r3, [r7, #18]
 8004afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d031      	beq.n	8004b66 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f004 fff5 	bl	8009b2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b4e:	4013      	ands	r3, r2
 8004b50:	b29c      	uxth	r4, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004b5a:	b292      	uxth	r2, r2
 8004b5c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f006 fd82 	bl	800b668 <HAL_PCD_SetupStageCallback>
 8004b64:	e1d2      	b.n	8004f0c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f280 81ce 	bge.w	8004f0c <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	b29c      	uxth	r4, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004b88:	b292      	uxth	r2, r2
 8004b8a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d019      	beq.n	8004bf0 <PCD_EP_ISR_Handler+0x1d8>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d015      	beq.n	8004bf0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6959      	ldr	r1, [r3, #20]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f004 ffa9 	bl	8009b2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004be8:	2100      	movs	r1, #0
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f006 fd4e 	bl	800b68c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461c      	mov	r4, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	441c      	add	r4, r3
 8004c02:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8004c06:	461c      	mov	r4, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10e      	bne.n	8004c2e <PCD_EP_ISR_Handler+0x216>
 8004c10:	8823      	ldrh	r3, [r4, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	8023      	strh	r3, [r4, #0]
 8004c1c:	8823      	ldrh	r3, [r4, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	8023      	strh	r3, [r4, #0]
 8004c2c:	e02d      	b.n	8004c8a <PCD_EP_ISR_Handler+0x272>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b3e      	cmp	r3, #62	; 0x3e
 8004c34:	d812      	bhi.n	8004c5c <PCD_EP_ISR_Handler+0x244>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <PCD_EP_ISR_Handler+0x238>
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	029b      	lsls	r3, r3, #10
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	8023      	strh	r3, [r4, #0]
 8004c5a:	e016      	b.n	8004c8a <PCD_EP_ISR_Handler+0x272>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <PCD_EP_ISR_Handler+0x25e>
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	029b      	lsls	r3, r3, #10
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	b29c      	uxth	r4, r3
 8004c9c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004ca0:	b29c      	uxth	r4, r3
 8004ca2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004ca6:	b29c      	uxth	r4, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b9e      	ldr	r3, [pc, #632]	; (8004f28 <PCD_EP_ISR_Handler+0x510>)
 8004cae:	4323      	orrs	r3, r4
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
 8004cb4:	e12a      	b.n	8004f0c <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	7d7b      	ldrb	r3, [r7, #21]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004cc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f280 80cb 	bge.w	8004e66 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	7d7b      	ldrb	r3, [r7, #21]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	b29c      	uxth	r4, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	7d7b      	ldrb	r3, [r7, #21]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004cf8:	b292      	uxth	r2, r2
 8004cfa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004cfc:	7d7b      	ldrb	r3, [r7, #21]
 8004cfe:	015b      	lsls	r3, r3, #5
 8004d00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	7b1b      	ldrb	r3, [r3, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11f      	bne.n	8004d52 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4413      	add	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d36:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004d38:	8bfb      	ldrh	r3, [r7, #30]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d06e      	beq.n	8004e1c <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6959      	ldr	r1, [r3, #20]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88da      	ldrh	r2, [r3, #6]
 8004d4a:	8bfb      	ldrh	r3, [r7, #30]
 8004d4c:	f004 feee 	bl	8009b2c <USB_ReadPMA>
 8004d50:	e064      	b.n	8004e1c <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01f      	beq.n	8004dac <PCD_EP_ISR_Handler+0x394>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4413      	add	r3, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	4413      	add	r3, r2
 8004d86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d90:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004d92:	8bfb      	ldrh	r3, [r7, #30]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d028      	beq.n	8004dea <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6959      	ldr	r1, [r3, #20]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	891a      	ldrh	r2, [r3, #8]
 8004da4:	8bfb      	ldrh	r3, [r7, #30]
 8004da6:	f004 fec1 	bl	8009b2c <USB_ReadPMA>
 8004daa:	e01e      	b.n	8004dea <PCD_EP_ISR_Handler+0x3d2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004dd2:	8bfb      	ldrh	r3, [r7, #30]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6959      	ldr	r1, [r3, #20]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	895a      	ldrh	r2, [r3, #10]
 8004de4:	8bfb      	ldrh	r3, [r7, #30]
 8004de6:	f004 fea1 	bl	8009b2c <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	b29c      	uxth	r4, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	4b45      	ldr	r3, [pc, #276]	; (8004f2c <PCD_EP_ISR_Handler+0x514>)
 8004e16:	4323      	orrs	r3, r4
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	8bfb      	ldrh	r3, [r7, #30]
 8004e22:	441a      	add	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	8bfb      	ldrh	r3, [r7, #30]
 8004e2e:	441a      	add	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <PCD_EP_ISR_Handler+0x42e>
 8004e3c:	8bfa      	ldrh	r2, [r7, #30]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d206      	bcs.n	8004e54 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f006 fc1d 	bl	800b68c <HAL_PCD_DataOutStageCallback>
 8004e52:	e008      	b.n	8004e66 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	7819      	ldrb	r1, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fca8 	bl	80047b6 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e66:	8a7b      	ldrh	r3, [r7, #18]
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d04d      	beq.n	8004f0c <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e70:	7d7b      	ldrb	r3, [r7, #21]
 8004e72:	015b      	lsls	r3, r3, #5
 8004e74:	3328      	adds	r3, #40	; 0x28
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	7d7b      	ldrb	r3, [r7, #21]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e94:	b29c      	uxth	r4, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	7d7b      	ldrb	r3, [r7, #21]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	695a      	ldr	r2, [r3, #20]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	441a      	add	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f006 fbe2 	bl	800b6bc <HAL_PCD_DataInStageCallback>
 8004ef8:	e008      	b.n	8004f0c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	7819      	ldrb	r1, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	695a      	ldr	r2, [r3, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fca4 	bl	8004854 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	b21b      	sxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f6ff ad82 	blt.w	8004a22 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3724      	adds	r7, #36	; 0x24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd90      	pop	{r4, r7, pc}
 8004f28:	ffff8080 	.word	0xffff8080
 8004f2c:	ffff80c0 	.word	0xffff80c0

08004f30 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	817b      	strh	r3, [r7, #10]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f42:	897b      	ldrh	r3, [r7, #10]
 8004f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f4e:	897b      	ldrh	r3, [r7, #10]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	015b      	lsls	r3, r3, #5
 8004f56:	3328      	adds	r3, #40	; 0x28
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e006      	b.n	8004f6e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f60:	897b      	ldrh	r3, [r7, #10]
 8004f62:	015b      	lsls	r3, r3, #5
 8004f64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f6e:	893b      	ldrh	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2200      	movs	r2, #0
 8004f78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	80da      	strh	r2, [r3, #6]
 8004f82:	e00b      	b.n	8004f9c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2201      	movs	r2, #1
 8004f88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0c1b      	lsrs	r3, r3, #16
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d141      	bne.n	8005092 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800500e:	4b4b      	ldr	r3, [pc, #300]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501a:	d131      	bne.n	8005080 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800501c:	4b47      	ldr	r3, [pc, #284]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005022:	4a46      	ldr	r2, [pc, #280]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005028:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800502c:	4b43      	ldr	r3, [pc, #268]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005034:	4a41      	ldr	r2, [pc, #260]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800503a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800503c:	4b40      	ldr	r3, [pc, #256]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2232      	movs	r2, #50	; 0x32
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	4a3f      	ldr	r2, [pc, #252]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	0c9b      	lsrs	r3, r3, #18
 800504e:	3301      	adds	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005052:	e002      	b.n	800505a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3b01      	subs	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800505a:	4b38      	ldr	r3, [pc, #224]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005066:	d102      	bne.n	800506e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f2      	bne.n	8005054 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800506e:	4b33      	ldr	r3, [pc, #204]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507a:	d158      	bne.n	800512e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e057      	b.n	8005130 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005080:	4b2e      	ldr	r3, [pc, #184]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005086:	4a2d      	ldr	r2, [pc, #180]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005090:	e04d      	b.n	800512e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005098:	d141      	bne.n	800511e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800509a:	4b28      	ldr	r3, [pc, #160]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a6:	d131      	bne.n	800510c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050a8:	4b24      	ldr	r3, [pc, #144]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ae:	4a23      	ldr	r2, [pc, #140]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050c0:	4a1e      	ldr	r2, [pc, #120]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050c8:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2232      	movs	r2, #50	; 0x32
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	0c9b      	lsrs	r3, r3, #18
 80050da:	3301      	adds	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050de:	e002      	b.n	80050e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f2:	d102      	bne.n	80050fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f2      	bne.n	80050e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050fa:	4b10      	ldr	r3, [pc, #64]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005106:	d112      	bne.n	800512e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e011      	b.n	8005130 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800511c:	e007      	b.n	800512e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800511e:	4b07      	ldr	r3, [pc, #28]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005126:	4a05      	ldr	r2, [pc, #20]	; (800513c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005128:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800512c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40007000 	.word	0x40007000
 8005140:	20000000 	.word	0x20000000
 8005144:	431bde83 	.word	0x431bde83

08005148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e308      	b.n	800576c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d075      	beq.n	8005252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005166:	4ba3      	ldr	r3, [pc, #652]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005170:	4ba0      	ldr	r3, [pc, #640]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b0c      	cmp	r3, #12
 800517e:	d102      	bne.n	8005186 <HAL_RCC_OscConfig+0x3e>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b03      	cmp	r3, #3
 8005184:	d002      	beq.n	800518c <HAL_RCC_OscConfig+0x44>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d10b      	bne.n	80051a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	4b99      	ldr	r3, [pc, #612]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d05b      	beq.n	8005250 <HAL_RCC_OscConfig+0x108>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d157      	bne.n	8005250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e2e3      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d106      	bne.n	80051bc <HAL_RCC_OscConfig+0x74>
 80051ae:	4b91      	ldr	r3, [pc, #580]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a90      	ldr	r2, [pc, #576]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e01d      	b.n	80051f8 <HAL_RCC_OscConfig+0xb0>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x98>
 80051c6:	4b8b      	ldr	r3, [pc, #556]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a8a      	ldr	r2, [pc, #552]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	4b88      	ldr	r3, [pc, #544]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a87      	ldr	r2, [pc, #540]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	e00b      	b.n	80051f8 <HAL_RCC_OscConfig+0xb0>
 80051e0:	4b84      	ldr	r3, [pc, #528]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a83      	ldr	r2, [pc, #524]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4b81      	ldr	r3, [pc, #516]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a80      	ldr	r2, [pc, #512]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80051f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d013      	beq.n	8005228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fc faf2 	bl	80017e8 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005208:	f7fc faee 	bl	80017e8 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e2a8      	b.n	800576c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800521a:	4b76      	ldr	r3, [pc, #472]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0xc0>
 8005226:	e014      	b.n	8005252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fc fade 	bl	80017e8 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005230:	f7fc fada 	bl	80017e8 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b64      	cmp	r3, #100	; 0x64
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e294      	b.n	800576c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005242:	4b6c      	ldr	r3, [pc, #432]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0xe8>
 800524e:	e000      	b.n	8005252 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d075      	beq.n	800534a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525e:	4b65      	ldr	r3, [pc, #404]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005268:	4b62      	ldr	r3, [pc, #392]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b0c      	cmp	r3, #12
 8005276:	d102      	bne.n	800527e <HAL_RCC_OscConfig+0x136>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d002      	beq.n	8005284 <HAL_RCC_OscConfig+0x13c>
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b04      	cmp	r3, #4
 8005282:	d11f      	bne.n	80052c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005284:	4b5b      	ldr	r3, [pc, #364]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_OscConfig+0x154>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e267      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800529c:	4b55      	ldr	r3, [pc, #340]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	4952      	ldr	r1, [pc, #328]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052b0:	4b51      	ldr	r3, [pc, #324]	; (80053f8 <HAL_RCC_OscConfig+0x2b0>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fc fa4b 	bl	8001750 <HAL_InitTick>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d043      	beq.n	8005348 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e253      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d023      	beq.n	8005314 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052cc:	4b49      	ldr	r3, [pc, #292]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a48      	ldr	r2, [pc, #288]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80052d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fc fa86 	bl	80017e8 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e0:	f7fc fa82 	bl	80017e8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e23c      	b.n	800576c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f2:	4b40      	ldr	r3, [pc, #256]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fe:	4b3d      	ldr	r3, [pc, #244]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	061b      	lsls	r3, r3, #24
 800530c:	4939      	ldr	r1, [pc, #228]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
 8005312:	e01a      	b.n	800534a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005314:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a36      	ldr	r2, [pc, #216]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 800531a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800531e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fc fa62 	bl	80017e8 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005328:	f7fc fa5e 	bl	80017e8 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e218      	b.n	800576c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800533a:	4b2e      	ldr	r3, [pc, #184]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x1e0>
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d03c      	beq.n	80053d0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01c      	beq.n	8005398 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800535e:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005364:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536e:	f7fc fa3b 	bl	80017e8 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005376:	f7fc fa37 	bl	80017e8 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e1f1      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005388:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 800538a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0ef      	beq.n	8005376 <HAL_RCC_OscConfig+0x22e>
 8005396:	e01b      	b.n	80053d0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 800539a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539e:	4a15      	ldr	r2, [pc, #84]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7fc fa1e 	bl	80017e8 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b0:	f7fc fa1a 	bl	80017e8 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1d4      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c2:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ef      	bne.n	80053b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80ab 	beq.w	8005534 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053de:	2300      	movs	r3, #0
 80053e0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053e2:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_RCC_OscConfig+0x2b4>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e005      	b.n	80053fe <HAL_RCC_OscConfig+0x2b6>
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	20000004 	.word	0x20000004
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	4baf      	ldr	r3, [pc, #700]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	4aae      	ldr	r2, [pc, #696]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	; 0x58
 800540e:	4bac      	ldr	r3, [pc, #688]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800541a:	2301      	movs	r3, #1
 800541c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800541e:	4ba9      	ldr	r3, [pc, #676]	; (80056c4 <HAL_RCC_OscConfig+0x57c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d118      	bne.n	800545c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800542a:	4ba6      	ldr	r3, [pc, #664]	; (80056c4 <HAL_RCC_OscConfig+0x57c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4aa5      	ldr	r2, [pc, #660]	; (80056c4 <HAL_RCC_OscConfig+0x57c>)
 8005430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005436:	f7fc f9d7 	bl	80017e8 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543e:	f7fc f9d3 	bl	80017e8 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e18d      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005450:	4b9c      	ldr	r3, [pc, #624]	; (80056c4 <HAL_RCC_OscConfig+0x57c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f0      	beq.n	800543e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d108      	bne.n	8005476 <HAL_RCC_OscConfig+0x32e>
 8005464:	4b96      	ldr	r3, [pc, #600]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	4a95      	ldr	r2, [pc, #596]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005474:	e024      	b.n	80054c0 <HAL_RCC_OscConfig+0x378>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2b05      	cmp	r3, #5
 800547c:	d110      	bne.n	80054a0 <HAL_RCC_OscConfig+0x358>
 800547e:	4b90      	ldr	r3, [pc, #576]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	4a8e      	ldr	r2, [pc, #568]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005486:	f043 0304 	orr.w	r3, r3, #4
 800548a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800548e:	4b8c      	ldr	r3, [pc, #560]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005494:	4a8a      	ldr	r2, [pc, #552]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800549e:	e00f      	b.n	80054c0 <HAL_RCC_OscConfig+0x378>
 80054a0:	4b87      	ldr	r3, [pc, #540]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	4a86      	ldr	r2, [pc, #536]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054b0:	4b83      	ldr	r3, [pc, #524]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	4a82      	ldr	r2, [pc, #520]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80054b8:	f023 0304 	bic.w	r3, r3, #4
 80054bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d016      	beq.n	80054f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fc f98e 	bl	80017e8 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d0:	f7fc f98a 	bl	80017e8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e142      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e6:	4b76      	ldr	r3, [pc, #472]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ed      	beq.n	80054d0 <HAL_RCC_OscConfig+0x388>
 80054f4:	e015      	b.n	8005522 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f6:	f7fc f977 	bl	80017e8 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054fc:	e00a      	b.n	8005514 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fc f973 	bl	80017e8 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	4293      	cmp	r3, r2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e12b      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005514:	4b6a      	ldr	r3, [pc, #424]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ed      	bne.n	80054fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005522:	7ffb      	ldrb	r3, [r7, #31]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d105      	bne.n	8005534 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005528:	4b65      	ldr	r3, [pc, #404]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	4a64      	ldr	r2, [pc, #400]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 800552e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d03c      	beq.n	80055ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01c      	beq.n	8005582 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005548:	4b5d      	ldr	r3, [pc, #372]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 800554a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800554e:	4a5c      	ldr	r2, [pc, #368]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005558:	f7fc f946 	bl	80017e8 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005560:	f7fc f942 	bl	80017e8 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e0fc      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005572:	4b53      	ldr	r3, [pc, #332]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0ef      	beq.n	8005560 <HAL_RCC_OscConfig+0x418>
 8005580:	e01b      	b.n	80055ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005582:	4b4f      	ldr	r3, [pc, #316]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005588:	4a4d      	ldr	r2, [pc, #308]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 800558a:	f023 0301 	bic.w	r3, r3, #1
 800558e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005592:	f7fc f929 	bl	80017e8 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800559a:	f7fc f925 	bl	80017e8 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e0df      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055ac:	4b44      	ldr	r3, [pc, #272]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80055ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1ef      	bne.n	800559a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80d3 	beq.w	800576a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055c4:	4b3e      	ldr	r3, [pc, #248]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f003 030c 	and.w	r3, r3, #12
 80055cc:	2b0c      	cmp	r3, #12
 80055ce:	f000 808d 	beq.w	80056ec <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d15a      	bne.n	8005690 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055da:	4b39      	ldr	r3, [pc, #228]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80055e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e6:	f7fc f8ff 	bl	80017e8 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fc f8fb 	bl	80017e8 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e0b5      	b.n	800576c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005600:	4b2f      	ldr	r3, [pc, #188]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f0      	bne.n	80055ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800560c:	4b2c      	ldr	r3, [pc, #176]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	4b2d      	ldr	r3, [pc, #180]	; (80056c8 <HAL_RCC_OscConfig+0x580>)
 8005612:	4013      	ands	r3, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6a11      	ldr	r1, [r2, #32]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800561c:	3a01      	subs	r2, #1
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	4311      	orrs	r1, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005626:	0212      	lsls	r2, r2, #8
 8005628:	4311      	orrs	r1, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800562e:	0852      	lsrs	r2, r2, #1
 8005630:	3a01      	subs	r2, #1
 8005632:	0552      	lsls	r2, r2, #21
 8005634:	4311      	orrs	r1, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800563a:	0852      	lsrs	r2, r2, #1
 800563c:	3a01      	subs	r2, #1
 800563e:	0652      	lsls	r2, r2, #25
 8005640:	4311      	orrs	r1, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005646:	06d2      	lsls	r2, r2, #27
 8005648:	430a      	orrs	r2, r1
 800564a:	491d      	ldr	r1, [pc, #116]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 800564c:	4313      	orrs	r3, r2
 800564e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005650:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1a      	ldr	r2, [pc, #104]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800565a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800565c:	4b18      	ldr	r3, [pc, #96]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005666:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc f8be 	bl	80017e8 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005670:	f7fc f8ba 	bl	80017e8 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e074      	b.n	800576c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x528>
 800568e:	e06c      	b.n	800576a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 8005696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800569a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800569c:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a07      	ldr	r2, [pc, #28]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80056a2:	f023 0303 	bic.w	r3, r3, #3
 80056a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <HAL_RCC_OscConfig+0x578>)
 80056ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80056b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fc f896 	bl	80017e8 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056be:	e00e      	b.n	80056de <HAL_RCC_OscConfig+0x596>
 80056c0:	40021000 	.word	0x40021000
 80056c4:	40007000 	.word	0x40007000
 80056c8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fc f88c 	bl	80017e8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e046      	b.n	800576c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056de:	4b25      	ldr	r3, [pc, #148]	; (8005774 <HAL_RCC_OscConfig+0x62c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x584>
 80056ea:	e03e      	b.n	800576a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e039      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <HAL_RCC_OscConfig+0x62c>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f003 0203 	and.w	r2, r3, #3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	429a      	cmp	r2, r3
 800570a:	d12c      	bne.n	8005766 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	3b01      	subs	r3, #1
 8005718:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d123      	bne.n	8005766 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d11b      	bne.n	8005766 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d113      	bne.n	8005766 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	3b01      	subs	r3, #1
 800574c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d109      	bne.n	8005766 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	3b01      	subs	r3, #1
 8005760:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d001      	beq.n	800576a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40021000 	.word	0x40021000

08005778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e11e      	b.n	80059ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005790:	4b91      	ldr	r3, [pc, #580]	; (80059d8 <HAL_RCC_ClockConfig+0x260>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d910      	bls.n	80057c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b8e      	ldr	r3, [pc, #568]	; (80059d8 <HAL_RCC_ClockConfig+0x260>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 020f 	bic.w	r2, r3, #15
 80057a6:	498c      	ldr	r1, [pc, #560]	; (80059d8 <HAL_RCC_ClockConfig+0x260>)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	4b8a      	ldr	r3, [pc, #552]	; (80059d8 <HAL_RCC_ClockConfig+0x260>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d001      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e106      	b.n	80059ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d073      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d129      	bne.n	8005828 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d4:	4b81      	ldr	r3, [pc, #516]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0f4      	b.n	80059ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057e4:	f000 f99e 	bl	8005b24 <RCC_GetSysClockFreqFromPLLSource>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4a7c      	ldr	r2, [pc, #496]	; (80059e0 <HAL_RCC_ClockConfig+0x268>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d93f      	bls.n	8005872 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057f2:	4b7a      	ldr	r3, [pc, #488]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005806:	2b00      	cmp	r3, #0
 8005808:	d033      	beq.n	8005872 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800580e:	2b00      	cmp	r3, #0
 8005810:	d12f      	bne.n	8005872 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005812:	4b72      	ldr	r3, [pc, #456]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800581a:	4a70      	ldr	r2, [pc, #448]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 800581c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005820:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	e024      	b.n	8005872 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d107      	bne.n	8005840 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005830:	4b6a      	ldr	r3, [pc, #424]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d109      	bne.n	8005850 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0c6      	b.n	80059ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005840:	4b66      	ldr	r3, [pc, #408]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0be      	b.n	80059ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005850:	f000 f8ce 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8005854:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4a61      	ldr	r2, [pc, #388]	; (80059e0 <HAL_RCC_ClockConfig+0x268>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d909      	bls.n	8005872 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800585e:	4b5f      	ldr	r3, [pc, #380]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005866:	4a5d      	ldr	r2, [pc, #372]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005872:	4b5a      	ldr	r3, [pc, #360]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f023 0203 	bic.w	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	4957      	ldr	r1, [pc, #348]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005880:	4313      	orrs	r3, r2
 8005882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005884:	f7fb ffb0 	bl	80017e8 <HAL_GetTick>
 8005888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	e00a      	b.n	80058a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588c:	f7fb ffac 	bl	80017e8 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e095      	b.n	80059ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	4b4e      	ldr	r3, [pc, #312]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 020c 	and.w	r2, r3, #12
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d1eb      	bne.n	800588c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d023      	beq.n	8005908 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058cc:	4b43      	ldr	r3, [pc, #268]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a42      	ldr	r2, [pc, #264]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 80058d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058e4:	4b3d      	ldr	r3, [pc, #244]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058ec:	4a3b      	ldr	r2, [pc, #236]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 80058ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f4:	4b39      	ldr	r3, [pc, #228]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4936      	ldr	r1, [pc, #216]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005902:	4313      	orrs	r3, r2
 8005904:	608b      	str	r3, [r1, #8]
 8005906:	e008      	b.n	800591a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b80      	cmp	r3, #128	; 0x80
 800590c:	d105      	bne.n	800591a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800590e:	4b33      	ldr	r3, [pc, #204]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	4a32      	ldr	r2, [pc, #200]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005918:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800591a:	4b2f      	ldr	r3, [pc, #188]	; (80059d8 <HAL_RCC_ClockConfig+0x260>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d21d      	bcs.n	8005964 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005928:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <HAL_RCC_ClockConfig+0x260>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f023 020f 	bic.w	r2, r3, #15
 8005930:	4929      	ldr	r1, [pc, #164]	; (80059d8 <HAL_RCC_ClockConfig+0x260>)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	4313      	orrs	r3, r2
 8005936:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005938:	f7fb ff56 	bl	80017e8 <HAL_GetTick>
 800593c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800593e:	e00a      	b.n	8005956 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005940:	f7fb ff52 	bl	80017e8 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	f241 3288 	movw	r2, #5000	; 0x1388
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e03b      	b.n	80059ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <HAL_RCC_ClockConfig+0x260>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d1ed      	bne.n	8005940 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005970:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4917      	ldr	r1, [pc, #92]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 800597e:	4313      	orrs	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800598e:	4b13      	ldr	r3, [pc, #76]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	490f      	ldr	r1, [pc, #60]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059a2:	f000 f825 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 80059a6:	4601      	mov	r1, r0
 80059a8:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <HAL_RCC_ClockConfig+0x264>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	4a0c      	ldr	r2, [pc, #48]	; (80059e4 <HAL_RCC_ClockConfig+0x26c>)
 80059b4:	5cd3      	ldrb	r3, [r2, r3]
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	fa21 f303 	lsr.w	r3, r1, r3
 80059be:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <HAL_RCC_ClockConfig+0x270>)
 80059c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <HAL_RCC_ClockConfig+0x274>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fb fec2 	bl	8001750 <HAL_InitTick>
 80059cc:	4603      	mov	r3, r0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40022000 	.word	0x40022000
 80059dc:	40021000 	.word	0x40021000
 80059e0:	04c4b400 	.word	0x04c4b400
 80059e4:	0800bcb0 	.word	0x0800bcb0
 80059e8:	20000000 	.word	0x20000000
 80059ec:	20000004 	.word	0x20000004

080059f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059f6:	4b2c      	ldr	r3, [pc, #176]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d102      	bne.n	8005a08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a02:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	e047      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a08:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 030c 	and.w	r3, r3, #12
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d102      	bne.n	8005a1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a14:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	e03e      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	d136      	bne.n	8005a94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a26:	4b20      	ldr	r3, [pc, #128]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a44:	4a1a      	ldr	r2, [pc, #104]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	4a16      	ldr	r2, [pc, #88]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4e:	68d2      	ldr	r2, [r2, #12]
 8005a50:	0a12      	lsrs	r2, r2, #8
 8005a52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a56:	fb02 f303 	mul.w	r3, r2, r3
 8005a5a:	617b      	str	r3, [r7, #20]
      break;
 8005a5c:	e00c      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a5e:	4a13      	ldr	r2, [pc, #76]	; (8005aac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a66:	4a10      	ldr	r2, [pc, #64]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a68:	68d2      	ldr	r2, [r2, #12]
 8005a6a:	0a12      	lsrs	r2, r2, #8
 8005a6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]
      break;
 8005a76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	0e5b      	lsrs	r3, r3, #25
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	3301      	adds	r3, #1
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	e001      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a98:	693b      	ldr	r3, [r7, #16]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	00f42400 	.word	0x00f42400
 8005ab0:	007a1200 	.word	0x007a1200

08005ab4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab8:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aba:	681b      	ldr	r3, [r3, #0]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000000 	.word	0x20000000

08005acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ad0:	f7ff fff0 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	0a1b      	lsrs	r3, r3, #8
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ae2:	5cd3      	ldrb	r3, [r2, r3]
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40021000 	.word	0x40021000
 8005af4:	0800bcc0 	.word	0x0800bcc0

08005af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005afc:	f7ff ffda 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005b00:	4601      	mov	r1, r0
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0adb      	lsrs	r3, r3, #11
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b0e:	5cd3      	ldrb	r3, [r2, r3]
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	0800bcc0 	.word	0x0800bcc0

08005b24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b2a:	4b1e      	ldr	r3, [pc, #120]	; (8005ba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	091b      	lsrs	r3, r3, #4
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	3301      	adds	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d10c      	bne.n	8005b62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b48:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b50:	4a14      	ldr	r2, [pc, #80]	; (8005ba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b52:	68d2      	ldr	r2, [r2, #12]
 8005b54:	0a12      	lsrs	r2, r2, #8
 8005b56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	617b      	str	r3, [r7, #20]
    break;
 8005b60:	e00c      	b.n	8005b7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	4a0e      	ldr	r2, [pc, #56]	; (8005ba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b6c:	68d2      	ldr	r2, [r2, #12]
 8005b6e:	0a12      	lsrs	r2, r2, #8
 8005b70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b74:	fb02 f303 	mul.w	r3, r2, r3
 8005b78:	617b      	str	r3, [r7, #20]
    break;
 8005b7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	0e5b      	lsrs	r3, r3, #25
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	3301      	adds	r3, #1
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b96:	687b      	ldr	r3, [r7, #4]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	007a1200 	.word	0x007a1200
 8005bac:	00f42400 	.word	0x00f42400

08005bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bb8:	2300      	movs	r3, #0
 8005bba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8098 	beq.w	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd2:	4b43      	ldr	r3, [pc, #268]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10d      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bde:	4b40      	ldr	r3, [pc, #256]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	4a3f      	ldr	r2, [pc, #252]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be8:	6593      	str	r3, [r2, #88]	; 0x58
 8005bea:	4b3d      	ldr	r3, [pc, #244]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	60bb      	str	r3, [r7, #8]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bfa:	4b3a      	ldr	r3, [pc, #232]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a39      	ldr	r2, [pc, #228]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c06:	f7fb fdef 	bl	80017e8 <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c0c:	e009      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0e:	f7fb fdeb 	bl	80017e8 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d902      	bls.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	74fb      	strb	r3, [r7, #19]
        break;
 8005c20:	e005      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c22:	4b30      	ldr	r3, [pc, #192]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0ef      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c2e:	7cfb      	ldrb	r3, [r7, #19]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d159      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c34:	4b2a      	ldr	r3, [pc, #168]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01e      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d019      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c50:	4b23      	ldr	r3, [pc, #140]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c5c:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c7c:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d016      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8e:	f7fb fdab 	bl	80017e8 <HAL_GetTick>
 8005c92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c94:	e00b      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c96:	f7fb fda7 	bl	80017e8 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d902      	bls.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	74fb      	strb	r3, [r7, #19]
            break;
 8005cac:	e006      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cae:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0ec      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005cbc:	7cfb      	ldrb	r3, [r7, #19]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc2:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd0:	4903      	ldr	r1, [pc, #12]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cda:	7cfb      	ldrb	r3, [r7, #19]
 8005cdc:	74bb      	strb	r3, [r7, #18]
 8005cde:	e005      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce8:	7cfb      	ldrb	r3, [r7, #19]
 8005cea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cec:	7c7b      	ldrb	r3, [r7, #17]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d105      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf2:	4baf      	ldr	r3, [pc, #700]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf6:	4aae      	ldr	r2, [pc, #696]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d0a:	4ba9      	ldr	r3, [pc, #676]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f023 0203 	bic.w	r2, r3, #3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	49a5      	ldr	r1, [pc, #660]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d2c:	4ba0      	ldr	r3, [pc, #640]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	f023 020c 	bic.w	r2, r3, #12
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	499d      	ldr	r1, [pc, #628]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d4e:	4b98      	ldr	r3, [pc, #608]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4994      	ldr	r1, [pc, #592]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d70:	4b8f      	ldr	r3, [pc, #572]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	498c      	ldr	r1, [pc, #560]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d92:	4b87      	ldr	r3, [pc, #540]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	4983      	ldr	r1, [pc, #524]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db4:	4b7e      	ldr	r3, [pc, #504]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	497b      	ldr	r1, [pc, #492]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dd6:	4b76      	ldr	r3, [pc, #472]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ddc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	4972      	ldr	r1, [pc, #456]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005df8:	4b6d      	ldr	r3, [pc, #436]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	496a      	ldr	r1, [pc, #424]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e1a:	4b65      	ldr	r3, [pc, #404]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	4961      	ldr	r1, [pc, #388]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e3c:	4b5c      	ldr	r3, [pc, #368]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e42:	f023 0203 	bic.w	r2, r3, #3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	4959      	ldr	r1, [pc, #356]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e5e:	4b54      	ldr	r3, [pc, #336]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	4950      	ldr	r1, [pc, #320]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d015      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e80:	4b4b      	ldr	r3, [pc, #300]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	4948      	ldr	r1, [pc, #288]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e9e:	d105      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea0:	4b43      	ldr	r3, [pc, #268]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a42      	ldr	r2, [pc, #264]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eaa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d015      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005eb8:	4b3d      	ldr	r3, [pc, #244]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec6:	493a      	ldr	r1, [pc, #232]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed6:	d105      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed8:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4a34      	ldr	r2, [pc, #208]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ef0:	4b2f      	ldr	r3, [pc, #188]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	492c      	ldr	r1, [pc, #176]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f0e:	d105      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f10:	4b27      	ldr	r3, [pc, #156]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4a26      	ldr	r2, [pc, #152]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d015      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f28:	4b21      	ldr	r3, [pc, #132]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	491e      	ldr	r1, [pc, #120]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f46:	d105      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f48:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d015      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f60:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	4910      	ldr	r1, [pc, #64]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f7e:	d105      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a0a      	ldr	r2, [pc, #40]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d018      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	4902      	ldr	r1, [pc, #8]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005fae:	e001      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005fb0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fbc:	d105      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	4a12      	ldr	r2, [pc, #72]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d015      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fdc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe4:	4909      	ldr	r1, [pc, #36]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d105      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	4a04      	ldr	r2, [pc, #16]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006000:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006002:	7cbb      	ldrb	r3, [r7, #18]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40021000 	.word	0x40021000

08006010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e01d      	b.n	800605e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fb f9f4 	bl	8001424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f000 fa94 	bl	800657c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e01d      	b.n	80060b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d106      	bne.n	8006092 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f815 	bl	80060bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f000 fa69 	bl	800657c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2201      	movs	r2, #1
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fe76 	bl	8006dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <HAL_TIM_PWM_Start+0x98>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_TIM_PWM_Start+0x4a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_TIM_PWM_Start+0x9c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00e      	beq.n	800611a <HAL_TIM_PWM_Start+0x4a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <HAL_TIM_PWM_Start+0xa0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d009      	beq.n	800611a <HAL_TIM_PWM_Start+0x4a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1a      	ldr	r2, [pc, #104]	; (8006174 <HAL_TIM_PWM_Start+0xa4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d004      	beq.n	800611a <HAL_TIM_PWM_Start+0x4a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a18      	ldr	r2, [pc, #96]	; (8006178 <HAL_TIM_PWM_Start+0xa8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d101      	bne.n	800611e <HAL_TIM_PWM_Start+0x4e>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <HAL_TIM_PWM_Start+0x50>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006132:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	4b10      	ldr	r3, [pc, #64]	; (800617c <HAL_TIM_PWM_Start+0xac>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b06      	cmp	r3, #6
 8006144:	d00b      	beq.n	800615e <HAL_TIM_PWM_Start+0x8e>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d007      	beq.n	800615e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40013400 	.word	0x40013400
 8006170:	40014000 	.word	0x40014000
 8006174:	40014400 	.word	0x40014400
 8006178:	40014800 	.word	0x40014800
 800617c:	00010007 	.word	0x00010007

08006180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006196:	2302      	movs	r3, #2
 8006198:	e105      	b.n	80063a6 <HAL_TIM_PWM_ConfigChannel+0x226>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2202      	movs	r2, #2
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b14      	cmp	r3, #20
 80061ae:	f200 80f0 	bhi.w	8006392 <HAL_TIM_PWM_ConfigChannel+0x212>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	0800620d 	.word	0x0800620d
 80061bc:	08006393 	.word	0x08006393
 80061c0:	08006393 	.word	0x08006393
 80061c4:	08006393 	.word	0x08006393
 80061c8:	0800624d 	.word	0x0800624d
 80061cc:	08006393 	.word	0x08006393
 80061d0:	08006393 	.word	0x08006393
 80061d4:	08006393 	.word	0x08006393
 80061d8:	0800628f 	.word	0x0800628f
 80061dc:	08006393 	.word	0x08006393
 80061e0:	08006393 	.word	0x08006393
 80061e4:	08006393 	.word	0x08006393
 80061e8:	080062cf 	.word	0x080062cf
 80061ec:	08006393 	.word	0x08006393
 80061f0:	08006393 	.word	0x08006393
 80061f4:	08006393 	.word	0x08006393
 80061f8:	08006311 	.word	0x08006311
 80061fc:	08006393 	.word	0x08006393
 8006200:	08006393 	.word	0x08006393
 8006204:	08006393 	.word	0x08006393
 8006208:	08006351 	.word	0x08006351
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fa4c 	bl	80066b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0208 	orr.w	r2, r2, #8
 8006226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0204 	bic.w	r2, r2, #4
 8006236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6999      	ldr	r1, [r3, #24]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	619a      	str	r2, [r3, #24]
      break;
 800624a:	e0a3      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fabc 	bl	80067d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6999      	ldr	r1, [r3, #24]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	021a      	lsls	r2, r3, #8
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	619a      	str	r2, [r3, #24]
      break;
 800628c:	e082      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fb25 	bl	80068e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0208 	orr.w	r2, r2, #8
 80062a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0204 	bic.w	r2, r2, #4
 80062b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69d9      	ldr	r1, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	61da      	str	r2, [r3, #28]
      break;
 80062cc:	e062      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fb8d 	bl	80069f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69d9      	ldr	r1, [r3, #28]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	021a      	lsls	r2, r3, #8
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	61da      	str	r2, [r3, #28]
      break;
 800630e:	e041      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fbf6 	bl	8006b08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0208 	orr.w	r2, r2, #8
 800632a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0204 	bic.w	r2, r2, #4
 800633a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800634e:	e021      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68b9      	ldr	r1, [r7, #8]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fc3a 	bl	8006bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800636a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	021a      	lsls	r2, r3, #8
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006390:	e000      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006392:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop

080063b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_TIM_ConfigClockSource+0x18>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e0cb      	b.n	8006560 <HAL_TIM_ConfigClockSource+0x1b0>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80063e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006404:	f000 80a2 	beq.w	800654c <HAL_TIM_ConfigClockSource+0x19c>
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d81a      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x94>
 800640e:	2b30      	cmp	r3, #48	; 0x30
 8006410:	f000 8093 	beq.w	800653a <HAL_TIM_ConfigClockSource+0x18a>
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d809      	bhi.n	800642c <HAL_TIM_ConfigClockSource+0x7c>
 8006418:	2b10      	cmp	r3, #16
 800641a:	f000 808e 	beq.w	800653a <HAL_TIM_ConfigClockSource+0x18a>
 800641e:	2b20      	cmp	r3, #32
 8006420:	f000 808b 	beq.w	800653a <HAL_TIM_ConfigClockSource+0x18a>
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8088 	beq.w	800653a <HAL_TIM_ConfigClockSource+0x18a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800642a:	e090      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 800642c:	2b50      	cmp	r3, #80	; 0x50
 800642e:	d054      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x12a>
 8006430:	2b50      	cmp	r3, #80	; 0x50
 8006432:	d802      	bhi.n	800643a <HAL_TIM_ConfigClockSource+0x8a>
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d070      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x16a>
      break;
 8006438:	e089      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 800643a:	2b60      	cmp	r3, #96	; 0x60
 800643c:	d05d      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0x14a>
 800643e:	2b70      	cmp	r3, #112	; 0x70
 8006440:	d021      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0xd6>
      break;
 8006442:	e084      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 8006444:	4a48      	ldr	r2, [pc, #288]	; (8006568 <HAL_TIM_ConfigClockSource+0x1b8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d077      	beq.n	800653a <HAL_TIM_ConfigClockSource+0x18a>
 800644a:	4a47      	ldr	r2, [pc, #284]	; (8006568 <HAL_TIM_ConfigClockSource+0x1b8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d809      	bhi.n	8006464 <HAL_TIM_ConfigClockSource+0xb4>
 8006450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006454:	d071      	beq.n	800653a <HAL_TIM_ConfigClockSource+0x18a>
 8006456:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800645a:	d06e      	beq.n	800653a <HAL_TIM_ConfigClockSource+0x18a>
 800645c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006460:	d028      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006462:	e074      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 8006464:	4a41      	ldr	r2, [pc, #260]	; (800656c <HAL_TIM_ConfigClockSource+0x1bc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d067      	beq.n	800653a <HAL_TIM_ConfigClockSource+0x18a>
 800646a:	4a40      	ldr	r2, [pc, #256]	; (800656c <HAL_TIM_ConfigClockSource+0x1bc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d803      	bhi.n	8006478 <HAL_TIM_ConfigClockSource+0xc8>
 8006470:	4a3f      	ldr	r2, [pc, #252]	; (8006570 <HAL_TIM_ConfigClockSource+0x1c0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d061      	beq.n	800653a <HAL_TIM_ConfigClockSource+0x18a>
      break;
 8006476:	e06a      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
  switch (sClockSourceConfig->ClockSource)
 8006478:	4a3e      	ldr	r2, [pc, #248]	; (8006574 <HAL_TIM_ConfigClockSource+0x1c4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d05d      	beq.n	800653a <HAL_TIM_ConfigClockSource+0x18a>
 800647e:	4a3e      	ldr	r2, [pc, #248]	; (8006578 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d05a      	beq.n	800653a <HAL_TIM_ConfigClockSource+0x18a>
      break;
 8006484:	e063      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ETR_SetConfig(htim->Instance,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6899      	ldr	r1, [r3, #8]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f000 fc7d 	bl	8006d94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	609a      	str	r2, [r3, #8]
      break;
 80064b2:	e04c      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ETR_SetConfig(htim->Instance,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6899      	ldr	r1, [r3, #8]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f000 fc66 	bl	8006d94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064d6:	609a      	str	r2, [r3, #8]
      break;
 80064d8:	e039      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f000 fbd8 	bl	8006c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2150      	movs	r1, #80	; 0x50
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fc31 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 80064f8:	e029      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6859      	ldr	r1, [r3, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	461a      	mov	r2, r3
 8006508:	f000 fbf7 	bl	8006cfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2160      	movs	r1, #96	; 0x60
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fc21 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 8006518:	e019      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	6859      	ldr	r1, [r3, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	461a      	mov	r2, r3
 8006528:	f000 fbb8 	bl	8006c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2140      	movs	r1, #64	; 0x40
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fc11 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 8006538:	e009      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	4610      	mov	r0, r2
 8006546:	f000 fc08 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 800654a:	e000      	b.n	800654e <HAL_TIM_ConfigClockSource+0x19e>
      break;
 800654c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	00100020 	.word	0x00100020
 800656c:	00100040 	.word	0x00100040
 8006570:	00100030 	.word	0x00100030
 8006574:	00100060 	.word	0x00100060
 8006578:	00100070 	.word	0x00100070

0800657c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a40      	ldr	r2, [pc, #256]	; (8006690 <TIM_Base_SetConfig+0x114>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659a:	d00f      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a3d      	ldr	r2, [pc, #244]	; (8006694 <TIM_Base_SetConfig+0x118>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00b      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a3c      	ldr	r2, [pc, #240]	; (8006698 <TIM_Base_SetConfig+0x11c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d007      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a3b      	ldr	r2, [pc, #236]	; (800669c <TIM_Base_SetConfig+0x120>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a3a      	ldr	r2, [pc, #232]	; (80066a0 <TIM_Base_SetConfig+0x124>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d108      	bne.n	80065ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a2f      	ldr	r2, [pc, #188]	; (8006690 <TIM_Base_SetConfig+0x114>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d01f      	beq.n	8006616 <TIM_Base_SetConfig+0x9a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065dc:	d01b      	beq.n	8006616 <TIM_Base_SetConfig+0x9a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <TIM_Base_SetConfig+0x118>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d017      	beq.n	8006616 <TIM_Base_SetConfig+0x9a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a2b      	ldr	r2, [pc, #172]	; (8006698 <TIM_Base_SetConfig+0x11c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <TIM_Base_SetConfig+0x9a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a2a      	ldr	r2, [pc, #168]	; (800669c <TIM_Base_SetConfig+0x120>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00f      	beq.n	8006616 <TIM_Base_SetConfig+0x9a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a29      	ldr	r2, [pc, #164]	; (80066a0 <TIM_Base_SetConfig+0x124>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_Base_SetConfig+0x9a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a28      	ldr	r2, [pc, #160]	; (80066a4 <TIM_Base_SetConfig+0x128>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d007      	beq.n	8006616 <TIM_Base_SetConfig+0x9a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a27      	ldr	r2, [pc, #156]	; (80066a8 <TIM_Base_SetConfig+0x12c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_Base_SetConfig+0x9a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a26      	ldr	r2, [pc, #152]	; (80066ac <TIM_Base_SetConfig+0x130>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d108      	bne.n	8006628 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a10      	ldr	r2, [pc, #64]	; (8006690 <TIM_Base_SetConfig+0x114>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00f      	beq.n	8006674 <TIM_Base_SetConfig+0xf8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a12      	ldr	r2, [pc, #72]	; (80066a0 <TIM_Base_SetConfig+0x124>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00b      	beq.n	8006674 <TIM_Base_SetConfig+0xf8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a11      	ldr	r2, [pc, #68]	; (80066a4 <TIM_Base_SetConfig+0x128>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d007      	beq.n	8006674 <TIM_Base_SetConfig+0xf8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a10      	ldr	r2, [pc, #64]	; (80066a8 <TIM_Base_SetConfig+0x12c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_Base_SetConfig+0xf8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a0f      	ldr	r2, [pc, #60]	; (80066ac <TIM_Base_SetConfig+0x130>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d103      	bne.n	800667c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	615a      	str	r2, [r3, #20]
}
 8006682:	bf00      	nop
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40000400 	.word	0x40000400
 8006698:	40000800 	.word	0x40000800
 800669c:	40000c00 	.word	0x40000c00
 80066a0:	40013400 	.word	0x40013400
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800

080066b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0302 	bic.w	r3, r3, #2
 80066fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a2c      	ldr	r2, [pc, #176]	; (80067bc <TIM_OC1_SetConfig+0x10c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00f      	beq.n	8006730 <TIM_OC1_SetConfig+0x80>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a2b      	ldr	r2, [pc, #172]	; (80067c0 <TIM_OC1_SetConfig+0x110>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00b      	beq.n	8006730 <TIM_OC1_SetConfig+0x80>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a2a      	ldr	r2, [pc, #168]	; (80067c4 <TIM_OC1_SetConfig+0x114>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d007      	beq.n	8006730 <TIM_OC1_SetConfig+0x80>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <TIM_OC1_SetConfig+0x118>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_OC1_SetConfig+0x80>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a28      	ldr	r2, [pc, #160]	; (80067cc <TIM_OC1_SetConfig+0x11c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d10c      	bne.n	800674a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0308 	bic.w	r3, r3, #8
 8006736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f023 0304 	bic.w	r3, r3, #4
 8006748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a1b      	ldr	r2, [pc, #108]	; (80067bc <TIM_OC1_SetConfig+0x10c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00f      	beq.n	8006772 <TIM_OC1_SetConfig+0xc2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a1a      	ldr	r2, [pc, #104]	; (80067c0 <TIM_OC1_SetConfig+0x110>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00b      	beq.n	8006772 <TIM_OC1_SetConfig+0xc2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a19      	ldr	r2, [pc, #100]	; (80067c4 <TIM_OC1_SetConfig+0x114>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d007      	beq.n	8006772 <TIM_OC1_SetConfig+0xc2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a18      	ldr	r2, [pc, #96]	; (80067c8 <TIM_OC1_SetConfig+0x118>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d003      	beq.n	8006772 <TIM_OC1_SetConfig+0xc2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a17      	ldr	r2, [pc, #92]	; (80067cc <TIM_OC1_SetConfig+0x11c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d111      	bne.n	8006796 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	621a      	str	r2, [r3, #32]
}
 80067b0:	bf00      	nop
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	40012c00 	.word	0x40012c00
 80067c0:	40013400 	.word	0x40013400
 80067c4:	40014000 	.word	0x40014000
 80067c8:	40014400 	.word	0x40014400
 80067cc:	40014800 	.word	0x40014800

080067d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f023 0210 	bic.w	r2, r3, #16
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f023 0320 	bic.w	r3, r3, #32
 800681e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a28      	ldr	r2, [pc, #160]	; (80068d0 <TIM_OC2_SetConfig+0x100>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_OC2_SetConfig+0x6c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a27      	ldr	r2, [pc, #156]	; (80068d4 <TIM_OC2_SetConfig+0x104>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d10d      	bne.n	8006858 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4313      	orrs	r3, r2
 800684e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006856:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <TIM_OC2_SetConfig+0x100>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00f      	beq.n	8006880 <TIM_OC2_SetConfig+0xb0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <TIM_OC2_SetConfig+0x104>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00b      	beq.n	8006880 <TIM_OC2_SetConfig+0xb0>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a1b      	ldr	r2, [pc, #108]	; (80068d8 <TIM_OC2_SetConfig+0x108>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d007      	beq.n	8006880 <TIM_OC2_SetConfig+0xb0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a1a      	ldr	r2, [pc, #104]	; (80068dc <TIM_OC2_SetConfig+0x10c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d003      	beq.n	8006880 <TIM_OC2_SetConfig+0xb0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a19      	ldr	r2, [pc, #100]	; (80068e0 <TIM_OC2_SetConfig+0x110>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d113      	bne.n	80068a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800688e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40013400 	.word	0x40013400
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40014400 	.word	0x40014400
 80068e0:	40014800 	.word	0x40014800

080068e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a27      	ldr	r2, [pc, #156]	; (80069e0 <TIM_OC3_SetConfig+0xfc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC3_SetConfig+0x6a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a26      	ldr	r2, [pc, #152]	; (80069e4 <TIM_OC3_SetConfig+0x100>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10d      	bne.n	800696a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1c      	ldr	r2, [pc, #112]	; (80069e0 <TIM_OC3_SetConfig+0xfc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00f      	beq.n	8006992 <TIM_OC3_SetConfig+0xae>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <TIM_OC3_SetConfig+0x100>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00b      	beq.n	8006992 <TIM_OC3_SetConfig+0xae>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1a      	ldr	r2, [pc, #104]	; (80069e8 <TIM_OC3_SetConfig+0x104>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d007      	beq.n	8006992 <TIM_OC3_SetConfig+0xae>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a19      	ldr	r2, [pc, #100]	; (80069ec <TIM_OC3_SetConfig+0x108>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d003      	beq.n	8006992 <TIM_OC3_SetConfig+0xae>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a18      	ldr	r2, [pc, #96]	; (80069f0 <TIM_OC3_SetConfig+0x10c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d113      	bne.n	80069ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	621a      	str	r2, [r3, #32]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40013400 	.word	0x40013400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40014400 	.word	0x40014400
 80069f0:	40014800 	.word	0x40014800

080069f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	031b      	lsls	r3, r3, #12
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a28      	ldr	r2, [pc, #160]	; (8006af4 <TIM_OC4_SetConfig+0x100>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_OC4_SetConfig+0x6c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a27      	ldr	r2, [pc, #156]	; (8006af8 <TIM_OC4_SetConfig+0x104>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10d      	bne.n	8006a7c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	031b      	lsls	r3, r3, #12
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <TIM_OC4_SetConfig+0x100>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00f      	beq.n	8006aa4 <TIM_OC4_SetConfig+0xb0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1c      	ldr	r2, [pc, #112]	; (8006af8 <TIM_OC4_SetConfig+0x104>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00b      	beq.n	8006aa4 <TIM_OC4_SetConfig+0xb0>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1b      	ldr	r2, [pc, #108]	; (8006afc <TIM_OC4_SetConfig+0x108>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d007      	beq.n	8006aa4 <TIM_OC4_SetConfig+0xb0>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1a      	ldr	r2, [pc, #104]	; (8006b00 <TIM_OC4_SetConfig+0x10c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <TIM_OC4_SetConfig+0xb0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a19      	ldr	r2, [pc, #100]	; (8006b04 <TIM_OC4_SetConfig+0x110>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d113      	bne.n	8006acc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ab2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	019b      	lsls	r3, r3, #6
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	019b      	lsls	r3, r3, #6
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800

08006b08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	041b      	lsls	r3, r3, #16
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <TIM_OC5_SetConfig+0xb4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00f      	beq.n	8006b82 <TIM_OC5_SetConfig+0x7a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <TIM_OC5_SetConfig+0xb8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00b      	beq.n	8006b82 <TIM_OC5_SetConfig+0x7a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <TIM_OC5_SetConfig+0xbc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d007      	beq.n	8006b82 <TIM_OC5_SetConfig+0x7a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <TIM_OC5_SetConfig+0xc0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_OC5_SetConfig+0x7a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <TIM_OC5_SetConfig+0xc4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d109      	bne.n	8006b96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40013400 	.word	0x40013400
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800

08006bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	051b      	lsls	r3, r3, #20
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <TIM_OC6_SetConfig+0xb8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00f      	beq.n	8006c4c <TIM_OC6_SetConfig+0x7c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <TIM_OC6_SetConfig+0xbc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00b      	beq.n	8006c4c <TIM_OC6_SetConfig+0x7c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a16      	ldr	r2, [pc, #88]	; (8006c90 <TIM_OC6_SetConfig+0xc0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_OC6_SetConfig+0x7c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <TIM_OC6_SetConfig+0xc4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_OC6_SetConfig+0x7c>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a14      	ldr	r2, [pc, #80]	; (8006c98 <TIM_OC6_SetConfig+0xc8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d109      	bne.n	8006c60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	029b      	lsls	r3, r3, #10
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	621a      	str	r2, [r3, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40013400 	.word	0x40013400
 8006c90:	40014000 	.word	0x40014000
 8006c94:	40014400 	.word	0x40014400
 8006c98:	40014800 	.word	0x40014800

08006c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f023 0201 	bic.w	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f023 030a 	bic.w	r3, r3, #10
 8006cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b087      	sub	sp, #28
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f023 0210 	bic.w	r2, r3, #16
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	031b      	lsls	r3, r3, #12
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f043 0307 	orr.w	r3, r3, #7
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	609a      	str	r2, [r3, #8]
}
 8006d88:	bf00      	nop
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	021a      	lsls	r2, r3, #8
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	2201      	movs	r2, #1
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1a      	ldr	r2, [r3, #32]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	401a      	ands	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a1a      	ldr	r2, [r3, #32]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	621a      	str	r2, [r3, #32]
}
 8006e12:	bf00      	nop
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
	...

08006e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e047      	b.n	8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1c      	ldr	r2, [pc, #112]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d108      	bne.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e9a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40013400 	.word	0x40013400

08006edc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e087      	b.n	8007008 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	041b      	lsls	r3, r3, #16
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a27      	ldr	r2, [pc, #156]	; (8007014 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a25      	ldr	r2, [pc, #148]	; (8007018 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d106      	bne.n	8006f94 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1e      	ldr	r2, [pc, #120]	; (8007014 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1d      	ldr	r2, [pc, #116]	; (8007018 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d126      	bne.n	8006ff6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	051b      	lsls	r3, r3, #20
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a0e      	ldr	r2, [pc, #56]	; (8007014 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a0d      	ldr	r2, [pc, #52]	; (8007018 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d106      	bne.n	8006ff6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	40012c00 	.word	0x40012c00
 8007018:	40013400 	.word	0x40013400

0800701c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e042      	b.n	80070b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7fa fa47 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2224      	movs	r2, #36	; 0x24
 800704a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f82e 	bl	80070c0 <UART_SetConfig>
 8007064:	4603      	mov	r3, r0
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e022      	b.n	80070b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fa10 	bl	800849c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800708a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800709a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 fa97 	bl	80085e0 <UART_CheckIdleState>
 80070b2:	4603      	mov	r3, r0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	0000      	movs	r0, r0
	...

080070c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80070c4:	b08a      	sub	sp, #40	; 0x28
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f4:	4313      	orrs	r3, r2
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4baa      	ldr	r3, [pc, #680]	; (80073a8 <UART_SetConfig+0x2e8>)
 8007100:	4013      	ands	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007108:	430b      	orrs	r3, r1
 800710a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a9f      	ldr	r2, [pc, #636]	; (80073ac <UART_SetConfig+0x2ec>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007138:	4313      	orrs	r3, r2
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007146:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007150:	430b      	orrs	r3, r1
 8007152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	f023 010f 	bic.w	r1, r3, #15
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a90      	ldr	r2, [pc, #576]	; (80073b0 <UART_SetConfig+0x2f0>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d126      	bne.n	80071c2 <UART_SetConfig+0x102>
 8007174:	4b8f      	ldr	r3, [pc, #572]	; (80073b4 <UART_SetConfig+0x2f4>)
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	2b03      	cmp	r3, #3
 8007180:	d81a      	bhi.n	80071b8 <UART_SetConfig+0xf8>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0xc8>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	08007199 	.word	0x08007199
 800718c:	080071a9 	.word	0x080071a9
 8007190:	080071a1 	.word	0x080071a1
 8007194:	080071b1 	.word	0x080071b1
 8007198:	2301      	movs	r3, #1
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800719e:	e116      	b.n	80073ce <UART_SetConfig+0x30e>
 80071a0:	2302      	movs	r3, #2
 80071a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071a6:	e112      	b.n	80073ce <UART_SetConfig+0x30e>
 80071a8:	2304      	movs	r3, #4
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ae:	e10e      	b.n	80073ce <UART_SetConfig+0x30e>
 80071b0:	2308      	movs	r3, #8
 80071b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071b6:	e10a      	b.n	80073ce <UART_SetConfig+0x30e>
 80071b8:	2310      	movs	r3, #16
 80071ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071be:	bf00      	nop
 80071c0:	e105      	b.n	80073ce <UART_SetConfig+0x30e>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a7c      	ldr	r2, [pc, #496]	; (80073b8 <UART_SetConfig+0x2f8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d138      	bne.n	800723e <UART_SetConfig+0x17e>
 80071cc:	4b79      	ldr	r3, [pc, #484]	; (80073b4 <UART_SetConfig+0x2f4>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d2:	f003 030c 	and.w	r3, r3, #12
 80071d6:	2b0c      	cmp	r3, #12
 80071d8:	d82c      	bhi.n	8007234 <UART_SetConfig+0x174>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <UART_SetConfig+0x120>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007215 	.word	0x08007215
 80071e4:	08007235 	.word	0x08007235
 80071e8:	08007235 	.word	0x08007235
 80071ec:	08007235 	.word	0x08007235
 80071f0:	08007225 	.word	0x08007225
 80071f4:	08007235 	.word	0x08007235
 80071f8:	08007235 	.word	0x08007235
 80071fc:	08007235 	.word	0x08007235
 8007200:	0800721d 	.word	0x0800721d
 8007204:	08007235 	.word	0x08007235
 8007208:	08007235 	.word	0x08007235
 800720c:	08007235 	.word	0x08007235
 8007210:	0800722d 	.word	0x0800722d
 8007214:	2300      	movs	r3, #0
 8007216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800721a:	e0d8      	b.n	80073ce <UART_SetConfig+0x30e>
 800721c:	2302      	movs	r3, #2
 800721e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007222:	e0d4      	b.n	80073ce <UART_SetConfig+0x30e>
 8007224:	2304      	movs	r3, #4
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800722a:	e0d0      	b.n	80073ce <UART_SetConfig+0x30e>
 800722c:	2308      	movs	r3, #8
 800722e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007232:	e0cc      	b.n	80073ce <UART_SetConfig+0x30e>
 8007234:	2310      	movs	r3, #16
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723a:	bf00      	nop
 800723c:	e0c7      	b.n	80073ce <UART_SetConfig+0x30e>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a5e      	ldr	r2, [pc, #376]	; (80073bc <UART_SetConfig+0x2fc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d125      	bne.n	8007294 <UART_SetConfig+0x1d4>
 8007248:	4b5a      	ldr	r3, [pc, #360]	; (80073b4 <UART_SetConfig+0x2f4>)
 800724a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007252:	2b10      	cmp	r3, #16
 8007254:	d011      	beq.n	800727a <UART_SetConfig+0x1ba>
 8007256:	2b10      	cmp	r3, #16
 8007258:	d802      	bhi.n	8007260 <UART_SetConfig+0x1a0>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <UART_SetConfig+0x1aa>
 800725e:	e014      	b.n	800728a <UART_SetConfig+0x1ca>
 8007260:	2b20      	cmp	r3, #32
 8007262:	d006      	beq.n	8007272 <UART_SetConfig+0x1b2>
 8007264:	2b30      	cmp	r3, #48	; 0x30
 8007266:	d00c      	beq.n	8007282 <UART_SetConfig+0x1c2>
 8007268:	e00f      	b.n	800728a <UART_SetConfig+0x1ca>
 800726a:	2300      	movs	r3, #0
 800726c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007270:	e0ad      	b.n	80073ce <UART_SetConfig+0x30e>
 8007272:	2302      	movs	r3, #2
 8007274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007278:	e0a9      	b.n	80073ce <UART_SetConfig+0x30e>
 800727a:	2304      	movs	r3, #4
 800727c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007280:	e0a5      	b.n	80073ce <UART_SetConfig+0x30e>
 8007282:	2308      	movs	r3, #8
 8007284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007288:	e0a1      	b.n	80073ce <UART_SetConfig+0x30e>
 800728a:	2310      	movs	r3, #16
 800728c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007290:	bf00      	nop
 8007292:	e09c      	b.n	80073ce <UART_SetConfig+0x30e>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a49      	ldr	r2, [pc, #292]	; (80073c0 <UART_SetConfig+0x300>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d125      	bne.n	80072ea <UART_SetConfig+0x22a>
 800729e:	4b45      	ldr	r3, [pc, #276]	; (80073b4 <UART_SetConfig+0x2f4>)
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d011      	beq.n	80072d0 <UART_SetConfig+0x210>
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d802      	bhi.n	80072b6 <UART_SetConfig+0x1f6>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <UART_SetConfig+0x200>
 80072b4:	e014      	b.n	80072e0 <UART_SetConfig+0x220>
 80072b6:	2b80      	cmp	r3, #128	; 0x80
 80072b8:	d006      	beq.n	80072c8 <UART_SetConfig+0x208>
 80072ba:	2bc0      	cmp	r3, #192	; 0xc0
 80072bc:	d00c      	beq.n	80072d8 <UART_SetConfig+0x218>
 80072be:	e00f      	b.n	80072e0 <UART_SetConfig+0x220>
 80072c0:	2300      	movs	r3, #0
 80072c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c6:	e082      	b.n	80073ce <UART_SetConfig+0x30e>
 80072c8:	2302      	movs	r3, #2
 80072ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ce:	e07e      	b.n	80073ce <UART_SetConfig+0x30e>
 80072d0:	2304      	movs	r3, #4
 80072d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d6:	e07a      	b.n	80073ce <UART_SetConfig+0x30e>
 80072d8:	2308      	movs	r3, #8
 80072da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072de:	e076      	b.n	80073ce <UART_SetConfig+0x30e>
 80072e0:	2310      	movs	r3, #16
 80072e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e6:	bf00      	nop
 80072e8:	e071      	b.n	80073ce <UART_SetConfig+0x30e>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a35      	ldr	r2, [pc, #212]	; (80073c4 <UART_SetConfig+0x304>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d129      	bne.n	8007348 <UART_SetConfig+0x288>
 80072f4:	4b2f      	ldr	r3, [pc, #188]	; (80073b4 <UART_SetConfig+0x2f4>)
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007302:	d014      	beq.n	800732e <UART_SetConfig+0x26e>
 8007304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007308:	d802      	bhi.n	8007310 <UART_SetConfig+0x250>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <UART_SetConfig+0x25e>
 800730e:	e016      	b.n	800733e <UART_SetConfig+0x27e>
 8007310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007314:	d007      	beq.n	8007326 <UART_SetConfig+0x266>
 8007316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800731a:	d00c      	beq.n	8007336 <UART_SetConfig+0x276>
 800731c:	e00f      	b.n	800733e <UART_SetConfig+0x27e>
 800731e:	2300      	movs	r3, #0
 8007320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007324:	e053      	b.n	80073ce <UART_SetConfig+0x30e>
 8007326:	2302      	movs	r3, #2
 8007328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800732c:	e04f      	b.n	80073ce <UART_SetConfig+0x30e>
 800732e:	2304      	movs	r3, #4
 8007330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007334:	e04b      	b.n	80073ce <UART_SetConfig+0x30e>
 8007336:	2308      	movs	r3, #8
 8007338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733c:	e047      	b.n	80073ce <UART_SetConfig+0x30e>
 800733e:	2310      	movs	r3, #16
 8007340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007344:	bf00      	nop
 8007346:	e042      	b.n	80073ce <UART_SetConfig+0x30e>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a17      	ldr	r2, [pc, #92]	; (80073ac <UART_SetConfig+0x2ec>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d13a      	bne.n	80073c8 <UART_SetConfig+0x308>
 8007352:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <UART_SetConfig+0x2f4>)
 8007354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800735c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007360:	d014      	beq.n	800738c <UART_SetConfig+0x2cc>
 8007362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007366:	d802      	bhi.n	800736e <UART_SetConfig+0x2ae>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d007      	beq.n	800737c <UART_SetConfig+0x2bc>
 800736c:	e016      	b.n	800739c <UART_SetConfig+0x2dc>
 800736e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007372:	d007      	beq.n	8007384 <UART_SetConfig+0x2c4>
 8007374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007378:	d00c      	beq.n	8007394 <UART_SetConfig+0x2d4>
 800737a:	e00f      	b.n	800739c <UART_SetConfig+0x2dc>
 800737c:	2300      	movs	r3, #0
 800737e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007382:	e024      	b.n	80073ce <UART_SetConfig+0x30e>
 8007384:	2302      	movs	r3, #2
 8007386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738a:	e020      	b.n	80073ce <UART_SetConfig+0x30e>
 800738c:	2304      	movs	r3, #4
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007392:	e01c      	b.n	80073ce <UART_SetConfig+0x30e>
 8007394:	2308      	movs	r3, #8
 8007396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800739a:	e018      	b.n	80073ce <UART_SetConfig+0x30e>
 800739c:	2310      	movs	r3, #16
 800739e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073a2:	bf00      	nop
 80073a4:	e013      	b.n	80073ce <UART_SetConfig+0x30e>
 80073a6:	bf00      	nop
 80073a8:	cfff69f3 	.word	0xcfff69f3
 80073ac:	40008000 	.word	0x40008000
 80073b0:	40013800 	.word	0x40013800
 80073b4:	40021000 	.word	0x40021000
 80073b8:	40004400 	.word	0x40004400
 80073bc:	40004800 	.word	0x40004800
 80073c0:	40004c00 	.word	0x40004c00
 80073c4:	40005000 	.word	0x40005000
 80073c8:	2310      	movs	r3, #16
 80073ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a86      	ldr	r2, [pc, #536]	; (80075ec <UART_SetConfig+0x52c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	f040 8422 	bne.w	8007c1e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073de:	2b08      	cmp	r3, #8
 80073e0:	f200 8173 	bhi.w	80076ca <UART_SetConfig+0x60a>
 80073e4:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <UART_SetConfig+0x32c>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	08007411 	.word	0x08007411
 80073f0:	080076cb 	.word	0x080076cb
 80073f4:	080074b3 	.word	0x080074b3
 80073f8:	080076cb 	.word	0x080076cb
 80073fc:	0800754b 	.word	0x0800754b
 8007400:	080076cb 	.word	0x080076cb
 8007404:	080076cb 	.word	0x080076cb
 8007408:	080076cb 	.word	0x080076cb
 800740c:	0800761d 	.word	0x0800761d
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007410:	f7fe fb5c 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 8007414:	4602      	mov	r2, r0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	2b00      	cmp	r3, #0
 800741c:	d044      	beq.n	80074a8 <UART_SetConfig+0x3e8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	2b01      	cmp	r3, #1
 8007424:	d03e      	beq.n	80074a4 <UART_SetConfig+0x3e4>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	2b02      	cmp	r3, #2
 800742c:	d038      	beq.n	80074a0 <UART_SetConfig+0x3e0>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2b03      	cmp	r3, #3
 8007434:	d032      	beq.n	800749c <UART_SetConfig+0x3dc>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b04      	cmp	r3, #4
 800743c:	d02c      	beq.n	8007498 <UART_SetConfig+0x3d8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b05      	cmp	r3, #5
 8007444:	d026      	beq.n	8007494 <UART_SetConfig+0x3d4>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	2b06      	cmp	r3, #6
 800744c:	d020      	beq.n	8007490 <UART_SetConfig+0x3d0>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b07      	cmp	r3, #7
 8007454:	d01a      	beq.n	800748c <UART_SetConfig+0x3cc>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b08      	cmp	r3, #8
 800745c:	d014      	beq.n	8007488 <UART_SetConfig+0x3c8>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	2b09      	cmp	r3, #9
 8007464:	d00e      	beq.n	8007484 <UART_SetConfig+0x3c4>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	2b0a      	cmp	r3, #10
 800746c:	d008      	beq.n	8007480 <UART_SetConfig+0x3c0>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	2b0b      	cmp	r3, #11
 8007474:	d102      	bne.n	800747c <UART_SetConfig+0x3bc>
 8007476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800747a:	e016      	b.n	80074aa <UART_SetConfig+0x3ea>
 800747c:	2301      	movs	r3, #1
 800747e:	e014      	b.n	80074aa <UART_SetConfig+0x3ea>
 8007480:	2380      	movs	r3, #128	; 0x80
 8007482:	e012      	b.n	80074aa <UART_SetConfig+0x3ea>
 8007484:	2340      	movs	r3, #64	; 0x40
 8007486:	e010      	b.n	80074aa <UART_SetConfig+0x3ea>
 8007488:	2320      	movs	r3, #32
 800748a:	e00e      	b.n	80074aa <UART_SetConfig+0x3ea>
 800748c:	2310      	movs	r3, #16
 800748e:	e00c      	b.n	80074aa <UART_SetConfig+0x3ea>
 8007490:	230c      	movs	r3, #12
 8007492:	e00a      	b.n	80074aa <UART_SetConfig+0x3ea>
 8007494:	230a      	movs	r3, #10
 8007496:	e008      	b.n	80074aa <UART_SetConfig+0x3ea>
 8007498:	2308      	movs	r3, #8
 800749a:	e006      	b.n	80074aa <UART_SetConfig+0x3ea>
 800749c:	2306      	movs	r3, #6
 800749e:	e004      	b.n	80074aa <UART_SetConfig+0x3ea>
 80074a0:	2304      	movs	r3, #4
 80074a2:	e002      	b.n	80074aa <UART_SetConfig+0x3ea>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e000      	b.n	80074aa <UART_SetConfig+0x3ea>
 80074a8:	2301      	movs	r3, #1
 80074aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ae:	617b      	str	r3, [r7, #20]
        break;
 80074b0:	e10e      	b.n	80076d0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d044      	beq.n	8007544 <UART_SetConfig+0x484>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d03e      	beq.n	8007540 <UART_SetConfig+0x480>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d038      	beq.n	800753c <UART_SetConfig+0x47c>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d032      	beq.n	8007538 <UART_SetConfig+0x478>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d02c      	beq.n	8007534 <UART_SetConfig+0x474>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d026      	beq.n	8007530 <UART_SetConfig+0x470>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b06      	cmp	r3, #6
 80074e8:	d020      	beq.n	800752c <UART_SetConfig+0x46c>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	2b07      	cmp	r3, #7
 80074f0:	d01a      	beq.n	8007528 <UART_SetConfig+0x468>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d014      	beq.n	8007524 <UART_SetConfig+0x464>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	2b09      	cmp	r3, #9
 8007500:	d00e      	beq.n	8007520 <UART_SetConfig+0x460>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	2b0a      	cmp	r3, #10
 8007508:	d008      	beq.n	800751c <UART_SetConfig+0x45c>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	2b0b      	cmp	r3, #11
 8007510:	d102      	bne.n	8007518 <UART_SetConfig+0x458>
 8007512:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007516:	e016      	b.n	8007546 <UART_SetConfig+0x486>
 8007518:	4b35      	ldr	r3, [pc, #212]	; (80075f0 <UART_SetConfig+0x530>)
 800751a:	e014      	b.n	8007546 <UART_SetConfig+0x486>
 800751c:	4b35      	ldr	r3, [pc, #212]	; (80075f4 <UART_SetConfig+0x534>)
 800751e:	e012      	b.n	8007546 <UART_SetConfig+0x486>
 8007520:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <UART_SetConfig+0x538>)
 8007522:	e010      	b.n	8007546 <UART_SetConfig+0x486>
 8007524:	4b35      	ldr	r3, [pc, #212]	; (80075fc <UART_SetConfig+0x53c>)
 8007526:	e00e      	b.n	8007546 <UART_SetConfig+0x486>
 8007528:	4b35      	ldr	r3, [pc, #212]	; (8007600 <UART_SetConfig+0x540>)
 800752a:	e00c      	b.n	8007546 <UART_SetConfig+0x486>
 800752c:	4b35      	ldr	r3, [pc, #212]	; (8007604 <UART_SetConfig+0x544>)
 800752e:	e00a      	b.n	8007546 <UART_SetConfig+0x486>
 8007530:	4b35      	ldr	r3, [pc, #212]	; (8007608 <UART_SetConfig+0x548>)
 8007532:	e008      	b.n	8007546 <UART_SetConfig+0x486>
 8007534:	4b35      	ldr	r3, [pc, #212]	; (800760c <UART_SetConfig+0x54c>)
 8007536:	e006      	b.n	8007546 <UART_SetConfig+0x486>
 8007538:	4b35      	ldr	r3, [pc, #212]	; (8007610 <UART_SetConfig+0x550>)
 800753a:	e004      	b.n	8007546 <UART_SetConfig+0x486>
 800753c:	4b35      	ldr	r3, [pc, #212]	; (8007614 <UART_SetConfig+0x554>)
 800753e:	e002      	b.n	8007546 <UART_SetConfig+0x486>
 8007540:	4b35      	ldr	r3, [pc, #212]	; (8007618 <UART_SetConfig+0x558>)
 8007542:	e000      	b.n	8007546 <UART_SetConfig+0x486>
 8007544:	4b2a      	ldr	r3, [pc, #168]	; (80075f0 <UART_SetConfig+0x530>)
 8007546:	617b      	str	r3, [r7, #20]
        break;
 8007548:	e0c2      	b.n	80076d0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800754a:	f7fe fa51 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 800754e:	4602      	mov	r2, r0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	d044      	beq.n	80075e2 <UART_SetConfig+0x522>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	2b01      	cmp	r3, #1
 800755e:	d03e      	beq.n	80075de <UART_SetConfig+0x51e>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	2b02      	cmp	r3, #2
 8007566:	d038      	beq.n	80075da <UART_SetConfig+0x51a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	2b03      	cmp	r3, #3
 800756e:	d032      	beq.n	80075d6 <UART_SetConfig+0x516>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	2b04      	cmp	r3, #4
 8007576:	d02c      	beq.n	80075d2 <UART_SetConfig+0x512>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	2b05      	cmp	r3, #5
 800757e:	d026      	beq.n	80075ce <UART_SetConfig+0x50e>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	2b06      	cmp	r3, #6
 8007586:	d020      	beq.n	80075ca <UART_SetConfig+0x50a>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	2b07      	cmp	r3, #7
 800758e:	d01a      	beq.n	80075c6 <UART_SetConfig+0x506>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	2b08      	cmp	r3, #8
 8007596:	d014      	beq.n	80075c2 <UART_SetConfig+0x502>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	2b09      	cmp	r3, #9
 800759e:	d00e      	beq.n	80075be <UART_SetConfig+0x4fe>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	2b0a      	cmp	r3, #10
 80075a6:	d008      	beq.n	80075ba <UART_SetConfig+0x4fa>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	2b0b      	cmp	r3, #11
 80075ae:	d102      	bne.n	80075b6 <UART_SetConfig+0x4f6>
 80075b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075b4:	e016      	b.n	80075e4 <UART_SetConfig+0x524>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e014      	b.n	80075e4 <UART_SetConfig+0x524>
 80075ba:	2380      	movs	r3, #128	; 0x80
 80075bc:	e012      	b.n	80075e4 <UART_SetConfig+0x524>
 80075be:	2340      	movs	r3, #64	; 0x40
 80075c0:	e010      	b.n	80075e4 <UART_SetConfig+0x524>
 80075c2:	2320      	movs	r3, #32
 80075c4:	e00e      	b.n	80075e4 <UART_SetConfig+0x524>
 80075c6:	2310      	movs	r3, #16
 80075c8:	e00c      	b.n	80075e4 <UART_SetConfig+0x524>
 80075ca:	230c      	movs	r3, #12
 80075cc:	e00a      	b.n	80075e4 <UART_SetConfig+0x524>
 80075ce:	230a      	movs	r3, #10
 80075d0:	e008      	b.n	80075e4 <UART_SetConfig+0x524>
 80075d2:	2308      	movs	r3, #8
 80075d4:	e006      	b.n	80075e4 <UART_SetConfig+0x524>
 80075d6:	2306      	movs	r3, #6
 80075d8:	e004      	b.n	80075e4 <UART_SetConfig+0x524>
 80075da:	2304      	movs	r3, #4
 80075dc:	e002      	b.n	80075e4 <UART_SetConfig+0x524>
 80075de:	2302      	movs	r3, #2
 80075e0:	e000      	b.n	80075e4 <UART_SetConfig+0x524>
 80075e2:	2301      	movs	r3, #1
 80075e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e8:	617b      	str	r3, [r7, #20]
        break;
 80075ea:	e071      	b.n	80076d0 <UART_SetConfig+0x610>
 80075ec:	40008000 	.word	0x40008000
 80075f0:	00f42400 	.word	0x00f42400
 80075f4:	0001e848 	.word	0x0001e848
 80075f8:	0003d090 	.word	0x0003d090
 80075fc:	0007a120 	.word	0x0007a120
 8007600:	000f4240 	.word	0x000f4240
 8007604:	00145855 	.word	0x00145855
 8007608:	00186a00 	.word	0x00186a00
 800760c:	001e8480 	.word	0x001e8480
 8007610:	0028b0aa 	.word	0x0028b0aa
 8007614:	003d0900 	.word	0x003d0900
 8007618:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d04e      	beq.n	80076c2 <UART_SetConfig+0x602>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	2b01      	cmp	r3, #1
 800762a:	d047      	beq.n	80076bc <UART_SetConfig+0x5fc>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	2b02      	cmp	r3, #2
 8007632:	d040      	beq.n	80076b6 <UART_SetConfig+0x5f6>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	2b03      	cmp	r3, #3
 800763a:	d039      	beq.n	80076b0 <UART_SetConfig+0x5f0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	2b04      	cmp	r3, #4
 8007642:	d032      	beq.n	80076aa <UART_SetConfig+0x5ea>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	2b05      	cmp	r3, #5
 800764a:	d02b      	beq.n	80076a4 <UART_SetConfig+0x5e4>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	2b06      	cmp	r3, #6
 8007652:	d024      	beq.n	800769e <UART_SetConfig+0x5de>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2b07      	cmp	r3, #7
 800765a:	d01d      	beq.n	8007698 <UART_SetConfig+0x5d8>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	2b08      	cmp	r3, #8
 8007662:	d016      	beq.n	8007692 <UART_SetConfig+0x5d2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	2b09      	cmp	r3, #9
 800766a:	d00f      	beq.n	800768c <UART_SetConfig+0x5cc>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	2b0a      	cmp	r3, #10
 8007672:	d008      	beq.n	8007686 <UART_SetConfig+0x5c6>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	2b0b      	cmp	r3, #11
 800767a:	d101      	bne.n	8007680 <UART_SetConfig+0x5c0>
 800767c:	2380      	movs	r3, #128	; 0x80
 800767e:	e022      	b.n	80076c6 <UART_SetConfig+0x606>
 8007680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007684:	e01f      	b.n	80076c6 <UART_SetConfig+0x606>
 8007686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800768a:	e01c      	b.n	80076c6 <UART_SetConfig+0x606>
 800768c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007690:	e019      	b.n	80076c6 <UART_SetConfig+0x606>
 8007692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007696:	e016      	b.n	80076c6 <UART_SetConfig+0x606>
 8007698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800769c:	e013      	b.n	80076c6 <UART_SetConfig+0x606>
 800769e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80076a2:	e010      	b.n	80076c6 <UART_SetConfig+0x606>
 80076a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80076a8:	e00d      	b.n	80076c6 <UART_SetConfig+0x606>
 80076aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076ae:	e00a      	b.n	80076c6 <UART_SetConfig+0x606>
 80076b0:	f241 5355 	movw	r3, #5461	; 0x1555
 80076b4:	e007      	b.n	80076c6 <UART_SetConfig+0x606>
 80076b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076ba:	e004      	b.n	80076c6 <UART_SetConfig+0x606>
 80076bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076c0:	e001      	b.n	80076c6 <UART_SetConfig+0x606>
 80076c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c6:	617b      	str	r3, [r7, #20]
        break;
 80076c8:	e002      	b.n	80076d0 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	76fb      	strb	r3, [r7, #27]
        break;
 80076ce:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 86b7 	beq.w	8008446 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	4413      	add	r3, r2
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d305      	bcc.n	80076f4 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d903      	bls.n	80076fc <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	76fb      	strb	r3, [r7, #27]
 80076f8:	f000 bea5 	b.w	8008446 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80076fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007700:	2b08      	cmp	r3, #8
 8007702:	f200 8277 	bhi.w	8007bf4 <UART_SetConfig+0xb34>
 8007706:	a201      	add	r2, pc, #4	; (adr r2, 800770c <UART_SetConfig+0x64c>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	08007731 	.word	0x08007731
 8007710:	08007bf5 	.word	0x08007bf5
 8007714:	0800786f 	.word	0x0800786f
 8007718:	08007bf5 	.word	0x08007bf5
 800771c:	08007965 	.word	0x08007965
 8007720:	08007bf5 	.word	0x08007bf5
 8007724:	08007bf5 	.word	0x08007bf5
 8007728:	08007bf5 	.word	0x08007bf5
 800772c:	08007aa3 	.word	0x08007aa3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007730:	f7fe f9cc 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 8007734:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4618      	mov	r0, r3
 800773a:	f04f 0100 	mov.w	r1, #0
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	2b00      	cmp	r3, #0
 8007744:	d067      	beq.n	8007816 <UART_SetConfig+0x756>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	2b01      	cmp	r3, #1
 800774c:	d05e      	beq.n	800780c <UART_SetConfig+0x74c>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	2b02      	cmp	r3, #2
 8007754:	d055      	beq.n	8007802 <UART_SetConfig+0x742>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	2b03      	cmp	r3, #3
 800775c:	d04c      	beq.n	80077f8 <UART_SetConfig+0x738>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	2b04      	cmp	r3, #4
 8007764:	d043      	beq.n	80077ee <UART_SetConfig+0x72e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	2b05      	cmp	r3, #5
 800776c:	d03a      	beq.n	80077e4 <UART_SetConfig+0x724>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	2b06      	cmp	r3, #6
 8007774:	d031      	beq.n	80077da <UART_SetConfig+0x71a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	2b07      	cmp	r3, #7
 800777c:	d028      	beq.n	80077d0 <UART_SetConfig+0x710>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	2b08      	cmp	r3, #8
 8007784:	d01f      	beq.n	80077c6 <UART_SetConfig+0x706>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	2b09      	cmp	r3, #9
 800778c:	d016      	beq.n	80077bc <UART_SetConfig+0x6fc>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	2b0a      	cmp	r3, #10
 8007794:	d00d      	beq.n	80077b2 <UART_SetConfig+0x6f2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	2b0b      	cmp	r3, #11
 800779c:	d104      	bne.n	80077a8 <UART_SetConfig+0x6e8>
 800779e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077a2:	f04f 0400 	mov.w	r4, #0
 80077a6:	e03a      	b.n	800781e <UART_SetConfig+0x75e>
 80077a8:	f04f 0301 	mov.w	r3, #1
 80077ac:	f04f 0400 	mov.w	r4, #0
 80077b0:	e035      	b.n	800781e <UART_SetConfig+0x75e>
 80077b2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077b6:	f04f 0400 	mov.w	r4, #0
 80077ba:	e030      	b.n	800781e <UART_SetConfig+0x75e>
 80077bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80077c0:	f04f 0400 	mov.w	r4, #0
 80077c4:	e02b      	b.n	800781e <UART_SetConfig+0x75e>
 80077c6:	f04f 0320 	mov.w	r3, #32
 80077ca:	f04f 0400 	mov.w	r4, #0
 80077ce:	e026      	b.n	800781e <UART_SetConfig+0x75e>
 80077d0:	f04f 0310 	mov.w	r3, #16
 80077d4:	f04f 0400 	mov.w	r4, #0
 80077d8:	e021      	b.n	800781e <UART_SetConfig+0x75e>
 80077da:	f04f 030c 	mov.w	r3, #12
 80077de:	f04f 0400 	mov.w	r4, #0
 80077e2:	e01c      	b.n	800781e <UART_SetConfig+0x75e>
 80077e4:	f04f 030a 	mov.w	r3, #10
 80077e8:	f04f 0400 	mov.w	r4, #0
 80077ec:	e017      	b.n	800781e <UART_SetConfig+0x75e>
 80077ee:	f04f 0308 	mov.w	r3, #8
 80077f2:	f04f 0400 	mov.w	r4, #0
 80077f6:	e012      	b.n	800781e <UART_SetConfig+0x75e>
 80077f8:	f04f 0306 	mov.w	r3, #6
 80077fc:	f04f 0400 	mov.w	r4, #0
 8007800:	e00d      	b.n	800781e <UART_SetConfig+0x75e>
 8007802:	f04f 0304 	mov.w	r3, #4
 8007806:	f04f 0400 	mov.w	r4, #0
 800780a:	e008      	b.n	800781e <UART_SetConfig+0x75e>
 800780c:	f04f 0302 	mov.w	r3, #2
 8007810:	f04f 0400 	mov.w	r4, #0
 8007814:	e003      	b.n	800781e <UART_SetConfig+0x75e>
 8007816:	f04f 0301 	mov.w	r3, #1
 800781a:	f04f 0400 	mov.w	r4, #0
 800781e:	461a      	mov	r2, r3
 8007820:	4623      	mov	r3, r4
 8007822:	f7f8 fcf9 	bl	8000218 <__aeabi_uldivmod>
 8007826:	4603      	mov	r3, r0
 8007828:	460c      	mov	r4, r1
 800782a:	4619      	mov	r1, r3
 800782c:	4622      	mov	r2, r4
 800782e:	f04f 0300 	mov.w	r3, #0
 8007832:	f04f 0400 	mov.w	r4, #0
 8007836:	0214      	lsls	r4, r2, #8
 8007838:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800783c:	020b      	lsls	r3, r1, #8
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6852      	ldr	r2, [r2, #4]
 8007842:	0852      	lsrs	r2, r2, #1
 8007844:	4611      	mov	r1, r2
 8007846:	f04f 0200 	mov.w	r2, #0
 800784a:	eb13 0b01 	adds.w	fp, r3, r1
 800784e:	eb44 0c02 	adc.w	ip, r4, r2
 8007852:	4658      	mov	r0, fp
 8007854:	4661      	mov	r1, ip
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f04f 0400 	mov.w	r4, #0
 800785e:	461a      	mov	r2, r3
 8007860:	4623      	mov	r3, r4
 8007862:	f7f8 fcd9 	bl	8000218 <__aeabi_uldivmod>
 8007866:	4603      	mov	r3, r0
 8007868:	460c      	mov	r4, r1
 800786a:	61fb      	str	r3, [r7, #28]
            break;
 800786c:	e1c5      	b.n	8007bfa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d05b      	beq.n	800792e <UART_SetConfig+0x86e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	2b01      	cmp	r3, #1
 800787c:	d053      	beq.n	8007926 <UART_SetConfig+0x866>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	2b02      	cmp	r3, #2
 8007884:	d04b      	beq.n	800791e <UART_SetConfig+0x85e>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	2b03      	cmp	r3, #3
 800788c:	d043      	beq.n	8007916 <UART_SetConfig+0x856>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	2b04      	cmp	r3, #4
 8007894:	d03b      	beq.n	800790e <UART_SetConfig+0x84e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	2b05      	cmp	r3, #5
 800789c:	d033      	beq.n	8007906 <UART_SetConfig+0x846>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b06      	cmp	r3, #6
 80078a4:	d02b      	beq.n	80078fe <UART_SetConfig+0x83e>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	2b07      	cmp	r3, #7
 80078ac:	d023      	beq.n	80078f6 <UART_SetConfig+0x836>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	d01b      	beq.n	80078ee <UART_SetConfig+0x82e>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	2b09      	cmp	r3, #9
 80078bc:	d013      	beq.n	80078e6 <UART_SetConfig+0x826>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	2b0a      	cmp	r3, #10
 80078c4:	d00b      	beq.n	80078de <UART_SetConfig+0x81e>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	2b0b      	cmp	r3, #11
 80078cc:	d103      	bne.n	80078d6 <UART_SetConfig+0x816>
 80078ce:	4bae      	ldr	r3, [pc, #696]	; (8007b88 <UART_SetConfig+0xac8>)
 80078d0:	f04f 0400 	mov.w	r4, #0
 80078d4:	e02e      	b.n	8007934 <UART_SetConfig+0x874>
 80078d6:	4bad      	ldr	r3, [pc, #692]	; (8007b8c <UART_SetConfig+0xacc>)
 80078d8:	f04f 0400 	mov.w	r4, #0
 80078dc:	e02a      	b.n	8007934 <UART_SetConfig+0x874>
 80078de:	4bac      	ldr	r3, [pc, #688]	; (8007b90 <UART_SetConfig+0xad0>)
 80078e0:	f04f 0400 	mov.w	r4, #0
 80078e4:	e026      	b.n	8007934 <UART_SetConfig+0x874>
 80078e6:	4bab      	ldr	r3, [pc, #684]	; (8007b94 <UART_SetConfig+0xad4>)
 80078e8:	f04f 0400 	mov.w	r4, #0
 80078ec:	e022      	b.n	8007934 <UART_SetConfig+0x874>
 80078ee:	4baa      	ldr	r3, [pc, #680]	; (8007b98 <UART_SetConfig+0xad8>)
 80078f0:	f04f 0400 	mov.w	r4, #0
 80078f4:	e01e      	b.n	8007934 <UART_SetConfig+0x874>
 80078f6:	4ba9      	ldr	r3, [pc, #676]	; (8007b9c <UART_SetConfig+0xadc>)
 80078f8:	f04f 0400 	mov.w	r4, #0
 80078fc:	e01a      	b.n	8007934 <UART_SetConfig+0x874>
 80078fe:	a49e      	add	r4, pc, #632	; (adr r4, 8007b78 <UART_SetConfig+0xab8>)
 8007900:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007904:	e016      	b.n	8007934 <UART_SetConfig+0x874>
 8007906:	4ba6      	ldr	r3, [pc, #664]	; (8007ba0 <UART_SetConfig+0xae0>)
 8007908:	f04f 0400 	mov.w	r4, #0
 800790c:	e012      	b.n	8007934 <UART_SetConfig+0x874>
 800790e:	4ba5      	ldr	r3, [pc, #660]	; (8007ba4 <UART_SetConfig+0xae4>)
 8007910:	f04f 0400 	mov.w	r4, #0
 8007914:	e00e      	b.n	8007934 <UART_SetConfig+0x874>
 8007916:	a49a      	add	r4, pc, #616	; (adr r4, 8007b80 <UART_SetConfig+0xac0>)
 8007918:	e9d4 3400 	ldrd	r3, r4, [r4]
 800791c:	e00a      	b.n	8007934 <UART_SetConfig+0x874>
 800791e:	4ba2      	ldr	r3, [pc, #648]	; (8007ba8 <UART_SetConfig+0xae8>)
 8007920:	f04f 0400 	mov.w	r4, #0
 8007924:	e006      	b.n	8007934 <UART_SetConfig+0x874>
 8007926:	4ba1      	ldr	r3, [pc, #644]	; (8007bac <UART_SetConfig+0xaec>)
 8007928:	f04f 0400 	mov.w	r4, #0
 800792c:	e002      	b.n	8007934 <UART_SetConfig+0x874>
 800792e:	4b97      	ldr	r3, [pc, #604]	; (8007b8c <UART_SetConfig+0xacc>)
 8007930:	f04f 0400 	mov.w	r4, #0
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6852      	ldr	r2, [r2, #4]
 8007938:	0852      	lsrs	r2, r2, #1
 800793a:	4611      	mov	r1, r2
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	eb13 0b01 	adds.w	fp, r3, r1
 8007944:	eb44 0c02 	adc.w	ip, r4, r2
 8007948:	4658      	mov	r0, fp
 800794a:	4661      	mov	r1, ip
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f04f 0400 	mov.w	r4, #0
 8007954:	461a      	mov	r2, r3
 8007956:	4623      	mov	r3, r4
 8007958:	f7f8 fc5e 	bl	8000218 <__aeabi_uldivmod>
 800795c:	4603      	mov	r3, r0
 800795e:	460c      	mov	r4, r1
 8007960:	61fb      	str	r3, [r7, #28]
            break;
 8007962:	e14a      	b.n	8007bfa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007964:	f7fe f844 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8007968:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	4618      	mov	r0, r3
 800796e:	f04f 0100 	mov.w	r1, #0
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	2b00      	cmp	r3, #0
 8007978:	d067      	beq.n	8007a4a <UART_SetConfig+0x98a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	2b01      	cmp	r3, #1
 8007980:	d05e      	beq.n	8007a40 <UART_SetConfig+0x980>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	2b02      	cmp	r3, #2
 8007988:	d055      	beq.n	8007a36 <UART_SetConfig+0x976>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	2b03      	cmp	r3, #3
 8007990:	d04c      	beq.n	8007a2c <UART_SetConfig+0x96c>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	2b04      	cmp	r3, #4
 8007998:	d043      	beq.n	8007a22 <UART_SetConfig+0x962>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d03a      	beq.n	8007a18 <UART_SetConfig+0x958>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	2b06      	cmp	r3, #6
 80079a8:	d031      	beq.n	8007a0e <UART_SetConfig+0x94e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	2b07      	cmp	r3, #7
 80079b0:	d028      	beq.n	8007a04 <UART_SetConfig+0x944>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	2b08      	cmp	r3, #8
 80079b8:	d01f      	beq.n	80079fa <UART_SetConfig+0x93a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b09      	cmp	r3, #9
 80079c0:	d016      	beq.n	80079f0 <UART_SetConfig+0x930>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	2b0a      	cmp	r3, #10
 80079c8:	d00d      	beq.n	80079e6 <UART_SetConfig+0x926>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	2b0b      	cmp	r3, #11
 80079d0:	d104      	bne.n	80079dc <UART_SetConfig+0x91c>
 80079d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079d6:	f04f 0400 	mov.w	r4, #0
 80079da:	e03a      	b.n	8007a52 <UART_SetConfig+0x992>
 80079dc:	f04f 0301 	mov.w	r3, #1
 80079e0:	f04f 0400 	mov.w	r4, #0
 80079e4:	e035      	b.n	8007a52 <UART_SetConfig+0x992>
 80079e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80079ea:	f04f 0400 	mov.w	r4, #0
 80079ee:	e030      	b.n	8007a52 <UART_SetConfig+0x992>
 80079f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80079f4:	f04f 0400 	mov.w	r4, #0
 80079f8:	e02b      	b.n	8007a52 <UART_SetConfig+0x992>
 80079fa:	f04f 0320 	mov.w	r3, #32
 80079fe:	f04f 0400 	mov.w	r4, #0
 8007a02:	e026      	b.n	8007a52 <UART_SetConfig+0x992>
 8007a04:	f04f 0310 	mov.w	r3, #16
 8007a08:	f04f 0400 	mov.w	r4, #0
 8007a0c:	e021      	b.n	8007a52 <UART_SetConfig+0x992>
 8007a0e:	f04f 030c 	mov.w	r3, #12
 8007a12:	f04f 0400 	mov.w	r4, #0
 8007a16:	e01c      	b.n	8007a52 <UART_SetConfig+0x992>
 8007a18:	f04f 030a 	mov.w	r3, #10
 8007a1c:	f04f 0400 	mov.w	r4, #0
 8007a20:	e017      	b.n	8007a52 <UART_SetConfig+0x992>
 8007a22:	f04f 0308 	mov.w	r3, #8
 8007a26:	f04f 0400 	mov.w	r4, #0
 8007a2a:	e012      	b.n	8007a52 <UART_SetConfig+0x992>
 8007a2c:	f04f 0306 	mov.w	r3, #6
 8007a30:	f04f 0400 	mov.w	r4, #0
 8007a34:	e00d      	b.n	8007a52 <UART_SetConfig+0x992>
 8007a36:	f04f 0304 	mov.w	r3, #4
 8007a3a:	f04f 0400 	mov.w	r4, #0
 8007a3e:	e008      	b.n	8007a52 <UART_SetConfig+0x992>
 8007a40:	f04f 0302 	mov.w	r3, #2
 8007a44:	f04f 0400 	mov.w	r4, #0
 8007a48:	e003      	b.n	8007a52 <UART_SetConfig+0x992>
 8007a4a:	f04f 0301 	mov.w	r3, #1
 8007a4e:	f04f 0400 	mov.w	r4, #0
 8007a52:	461a      	mov	r2, r3
 8007a54:	4623      	mov	r3, r4
 8007a56:	f7f8 fbdf 	bl	8000218 <__aeabi_uldivmod>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4622      	mov	r2, r4
 8007a62:	f04f 0300 	mov.w	r3, #0
 8007a66:	f04f 0400 	mov.w	r4, #0
 8007a6a:	0214      	lsls	r4, r2, #8
 8007a6c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007a70:	020b      	lsls	r3, r1, #8
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6852      	ldr	r2, [r2, #4]
 8007a76:	0852      	lsrs	r2, r2, #1
 8007a78:	4611      	mov	r1, r2
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	eb13 0b01 	adds.w	fp, r3, r1
 8007a82:	eb44 0c02 	adc.w	ip, r4, r2
 8007a86:	4658      	mov	r0, fp
 8007a88:	4661      	mov	r1, ip
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f04f 0400 	mov.w	r4, #0
 8007a92:	461a      	mov	r2, r3
 8007a94:	4623      	mov	r3, r4
 8007a96:	f7f8 fbbf 	bl	8000218 <__aeabi_uldivmod>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	61fb      	str	r3, [r7, #28]
            break;
 8007aa0:	e0ab      	b.n	8007bfa <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 8088 	beq.w	8007bbc <UART_SetConfig+0xafc>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d05b      	beq.n	8007b6c <UART_SetConfig+0xaac>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d052      	beq.n	8007b62 <UART_SetConfig+0xaa2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d04a      	beq.n	8007b5a <UART_SetConfig+0xa9a>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d041      	beq.n	8007b50 <UART_SetConfig+0xa90>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b05      	cmp	r3, #5
 8007ad2:	d039      	beq.n	8007b48 <UART_SetConfig+0xa88>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b06      	cmp	r3, #6
 8007ada:	d031      	beq.n	8007b40 <UART_SetConfig+0xa80>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b07      	cmp	r3, #7
 8007ae2:	d028      	beq.n	8007b36 <UART_SetConfig+0xa76>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d01f      	beq.n	8007b2c <UART_SetConfig+0xa6c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2b09      	cmp	r3, #9
 8007af2:	d016      	beq.n	8007b22 <UART_SetConfig+0xa62>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b0a      	cmp	r3, #10
 8007afa:	d00d      	beq.n	8007b18 <UART_SetConfig+0xa58>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	2b0b      	cmp	r3, #11
 8007b02:	d104      	bne.n	8007b0e <UART_SetConfig+0xa4e>
 8007b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b08:	f04f 0400 	mov.w	r4, #0
 8007b0c:	e05a      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b12:	f04f 0400 	mov.w	r4, #0
 8007b16:	e055      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b1c:	f04f 0400 	mov.w	r4, #0
 8007b20:	e050      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b26:	f04f 0400 	mov.w	r4, #0
 8007b2a:	e04b      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b30:	f04f 0400 	mov.w	r4, #0
 8007b34:	e046      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b3a:	f04f 0400 	mov.w	r4, #0
 8007b3e:	e041      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b40:	4b1b      	ldr	r3, [pc, #108]	; (8007bb0 <UART_SetConfig+0xaf0>)
 8007b42:	f04f 0400 	mov.w	r4, #0
 8007b46:	e03d      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b48:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <UART_SetConfig+0xaf4>)
 8007b4a:	f04f 0400 	mov.w	r4, #0
 8007b4e:	e039      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b54:	f04f 0400 	mov.w	r4, #0
 8007b58:	e034      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b5a:	4b17      	ldr	r3, [pc, #92]	; (8007bb8 <UART_SetConfig+0xaf8>)
 8007b5c:	f04f 0400 	mov.w	r4, #0
 8007b60:	e030      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b66:	f04f 0400 	mov.w	r4, #0
 8007b6a:	e02b      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b70:	f04f 0400 	mov.w	r4, #0
 8007b74:	e026      	b.n	8007bc4 <UART_SetConfig+0xb04>
 8007b76:	bf00      	nop
 8007b78:	14585500 	.word	0x14585500
 8007b7c:	00000000 	.word	0x00000000
 8007b80:	28b0aa00 	.word	0x28b0aa00
 8007b84:	00000000 	.word	0x00000000
 8007b88:	00f42400 	.word	0x00f42400
 8007b8c:	f4240000 	.word	0xf4240000
 8007b90:	01e84800 	.word	0x01e84800
 8007b94:	03d09000 	.word	0x03d09000
 8007b98:	07a12000 	.word	0x07a12000
 8007b9c:	0f424000 	.word	0x0f424000
 8007ba0:	186a0000 	.word	0x186a0000
 8007ba4:	1e848000 	.word	0x1e848000
 8007ba8:	3d090000 	.word	0x3d090000
 8007bac:	7a120000 	.word	0x7a120000
 8007bb0:	000aaa00 	.word	0x000aaa00
 8007bb4:	000ccc00 	.word	0x000ccc00
 8007bb8:	00155500 	.word	0x00155500
 8007bbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007bc0:	f04f 0400 	mov.w	r4, #0
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6852      	ldr	r2, [r2, #4]
 8007bc8:	0852      	lsrs	r2, r2, #1
 8007bca:	4611      	mov	r1, r2
 8007bcc:	f04f 0200 	mov.w	r2, #0
 8007bd0:	eb13 0b01 	adds.w	fp, r3, r1
 8007bd4:	eb44 0c02 	adc.w	ip, r4, r2
 8007bd8:	4658      	mov	r0, fp
 8007bda:	4661      	mov	r1, ip
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f04f 0400 	mov.w	r4, #0
 8007be4:	461a      	mov	r2, r3
 8007be6:	4623      	mov	r3, r4
 8007be8:	f7f8 fb16 	bl	8000218 <__aeabi_uldivmod>
 8007bec:	4603      	mov	r3, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	61fb      	str	r3, [r7, #28]
            break;
 8007bf2:	e002      	b.n	8007bfa <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	76fb      	strb	r3, [r7, #27]
            break;
 8007bf8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c00:	d309      	bcc.n	8007c16 <UART_SetConfig+0xb56>
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c08:	d205      	bcs.n	8007c16 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	f000 bc18 	b.w	8008446 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	76fb      	strb	r3, [r7, #27]
 8007c1a:	f000 bc14 	b.w	8008446 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c26:	f040 8204 	bne.w	8008032 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8007c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c2e:	2b08      	cmp	r3, #8
 8007c30:	f200 81df 	bhi.w	8007ff2 <UART_SetConfig+0xf32>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <UART_SetConfig+0xb7c>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c61 	.word	0x08007c61
 8007c40:	08007d19 	.word	0x08007d19
 8007c44:	08007dd1 	.word	0x08007dd1
 8007c48:	08007ff3 	.word	0x08007ff3
 8007c4c:	08007e79 	.word	0x08007e79
 8007c50:	08007ff3 	.word	0x08007ff3
 8007c54:	08007ff3 	.word	0x08007ff3
 8007c58:	08007ff3 	.word	0x08007ff3
 8007c5c:	08007f31 	.word	0x08007f31
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c60:	f7fd ff34 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 8007c64:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d044      	beq.n	8007cf8 <UART_SetConfig+0xc38>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d03e      	beq.n	8007cf4 <UART_SetConfig+0xc34>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d038      	beq.n	8007cf0 <UART_SetConfig+0xc30>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d032      	beq.n	8007cec <UART_SetConfig+0xc2c>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d02c      	beq.n	8007ce8 <UART_SetConfig+0xc28>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	d026      	beq.n	8007ce4 <UART_SetConfig+0xc24>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	2b06      	cmp	r3, #6
 8007c9c:	d020      	beq.n	8007ce0 <UART_SetConfig+0xc20>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	2b07      	cmp	r3, #7
 8007ca4:	d01a      	beq.n	8007cdc <UART_SetConfig+0xc1c>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	2b08      	cmp	r3, #8
 8007cac:	d014      	beq.n	8007cd8 <UART_SetConfig+0xc18>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	2b09      	cmp	r3, #9
 8007cb4:	d00e      	beq.n	8007cd4 <UART_SetConfig+0xc14>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	2b0a      	cmp	r3, #10
 8007cbc:	d008      	beq.n	8007cd0 <UART_SetConfig+0xc10>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2b0b      	cmp	r3, #11
 8007cc4:	d102      	bne.n	8007ccc <UART_SetConfig+0xc0c>
 8007cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cca:	e016      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e014      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007cd0:	2380      	movs	r3, #128	; 0x80
 8007cd2:	e012      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	e010      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007cd8:	2320      	movs	r3, #32
 8007cda:	e00e      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	e00c      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007ce0:	230c      	movs	r3, #12
 8007ce2:	e00a      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007ce4:	230a      	movs	r3, #10
 8007ce6:	e008      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007ce8:	2308      	movs	r3, #8
 8007cea:	e006      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007cec:	2306      	movs	r3, #6
 8007cee:	e004      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007cf0:	2304      	movs	r3, #4
 8007cf2:	e002      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e000      	b.n	8007cfa <UART_SetConfig+0xc3a>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d00:	005a      	lsls	r2, r3, #1
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	085b      	lsrs	r3, r3, #1
 8007d08:	441a      	add	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	61fb      	str	r3, [r7, #28]
        break;
 8007d16:	e16f      	b.n	8007ff8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d18:	f7fd feee 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 8007d1c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d044      	beq.n	8007db0 <UART_SetConfig+0xcf0>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d03e      	beq.n	8007dac <UART_SetConfig+0xcec>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d038      	beq.n	8007da8 <UART_SetConfig+0xce8>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d032      	beq.n	8007da4 <UART_SetConfig+0xce4>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d02c      	beq.n	8007da0 <UART_SetConfig+0xce0>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	2b05      	cmp	r3, #5
 8007d4c:	d026      	beq.n	8007d9c <UART_SetConfig+0xcdc>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	2b06      	cmp	r3, #6
 8007d54:	d020      	beq.n	8007d98 <UART_SetConfig+0xcd8>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	2b07      	cmp	r3, #7
 8007d5c:	d01a      	beq.n	8007d94 <UART_SetConfig+0xcd4>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d014      	beq.n	8007d90 <UART_SetConfig+0xcd0>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	d00e      	beq.n	8007d8c <UART_SetConfig+0xccc>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	2b0a      	cmp	r3, #10
 8007d74:	d008      	beq.n	8007d88 <UART_SetConfig+0xcc8>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	2b0b      	cmp	r3, #11
 8007d7c:	d102      	bne.n	8007d84 <UART_SetConfig+0xcc4>
 8007d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d82:	e016      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e014      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007d88:	2380      	movs	r3, #128	; 0x80
 8007d8a:	e012      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007d8c:	2340      	movs	r3, #64	; 0x40
 8007d8e:	e010      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007d90:	2320      	movs	r3, #32
 8007d92:	e00e      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007d94:	2310      	movs	r3, #16
 8007d96:	e00c      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007d98:	230c      	movs	r3, #12
 8007d9a:	e00a      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007d9c:	230a      	movs	r3, #10
 8007d9e:	e008      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007da0:	2308      	movs	r3, #8
 8007da2:	e006      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007da4:	2306      	movs	r3, #6
 8007da6:	e004      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007da8:	2304      	movs	r3, #4
 8007daa:	e002      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e000      	b.n	8007db2 <UART_SetConfig+0xcf2>
 8007db0:	2301      	movs	r3, #1
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db8:	005a      	lsls	r2, r3, #1
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	441a      	add	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	61fb      	str	r3, [r7, #28]
        break;
 8007dce:	e113      	b.n	8007ff8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d043      	beq.n	8007e60 <UART_SetConfig+0xda0>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d03d      	beq.n	8007e5c <UART_SetConfig+0xd9c>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d037      	beq.n	8007e58 <UART_SetConfig+0xd98>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d031      	beq.n	8007e54 <UART_SetConfig+0xd94>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d02b      	beq.n	8007e50 <UART_SetConfig+0xd90>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	2b05      	cmp	r3, #5
 8007dfe:	d025      	beq.n	8007e4c <UART_SetConfig+0xd8c>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	2b06      	cmp	r3, #6
 8007e06:	d01f      	beq.n	8007e48 <UART_SetConfig+0xd88>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	2b07      	cmp	r3, #7
 8007e0e:	d019      	beq.n	8007e44 <UART_SetConfig+0xd84>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d013      	beq.n	8007e40 <UART_SetConfig+0xd80>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	2b09      	cmp	r3, #9
 8007e1e:	d00d      	beq.n	8007e3c <UART_SetConfig+0xd7c>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	2b0a      	cmp	r3, #10
 8007e26:	d007      	beq.n	8007e38 <UART_SetConfig+0xd78>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	2b0b      	cmp	r3, #11
 8007e2e:	d101      	bne.n	8007e34 <UART_SetConfig+0xd74>
 8007e30:	4b8d      	ldr	r3, [pc, #564]	; (8008068 <UART_SetConfig+0xfa8>)
 8007e32:	e016      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e34:	4b8d      	ldr	r3, [pc, #564]	; (800806c <UART_SetConfig+0xfac>)
 8007e36:	e014      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e38:	4b8d      	ldr	r3, [pc, #564]	; (8008070 <UART_SetConfig+0xfb0>)
 8007e3a:	e012      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e3c:	4b8d      	ldr	r3, [pc, #564]	; (8008074 <UART_SetConfig+0xfb4>)
 8007e3e:	e010      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e40:	4b8d      	ldr	r3, [pc, #564]	; (8008078 <UART_SetConfig+0xfb8>)
 8007e42:	e00e      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e44:	4b8d      	ldr	r3, [pc, #564]	; (800807c <UART_SetConfig+0xfbc>)
 8007e46:	e00c      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e48:	4b8d      	ldr	r3, [pc, #564]	; (8008080 <UART_SetConfig+0xfc0>)
 8007e4a:	e00a      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e4c:	4b8d      	ldr	r3, [pc, #564]	; (8008084 <UART_SetConfig+0xfc4>)
 8007e4e:	e008      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e50:	4b8d      	ldr	r3, [pc, #564]	; (8008088 <UART_SetConfig+0xfc8>)
 8007e52:	e006      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e54:	4b8d      	ldr	r3, [pc, #564]	; (800808c <UART_SetConfig+0xfcc>)
 8007e56:	e004      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e58:	4b8d      	ldr	r3, [pc, #564]	; (8008090 <UART_SetConfig+0xfd0>)
 8007e5a:	e002      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e5c:	4b8d      	ldr	r3, [pc, #564]	; (8008094 <UART_SetConfig+0xfd4>)
 8007e5e:	e000      	b.n	8007e62 <UART_SetConfig+0xda2>
 8007e60:	4b82      	ldr	r3, [pc, #520]	; (800806c <UART_SetConfig+0xfac>)
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6852      	ldr	r2, [r2, #4]
 8007e66:	0852      	lsrs	r2, r2, #1
 8007e68:	441a      	add	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	61fb      	str	r3, [r7, #28]
        break;
 8007e76:	e0bf      	b.n	8007ff8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e78:	f7fd fdba 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 8007e7c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d044      	beq.n	8007f10 <UART_SetConfig+0xe50>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d03e      	beq.n	8007f0c <UART_SetConfig+0xe4c>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d038      	beq.n	8007f08 <UART_SetConfig+0xe48>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d032      	beq.n	8007f04 <UART_SetConfig+0xe44>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d02c      	beq.n	8007f00 <UART_SetConfig+0xe40>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b05      	cmp	r3, #5
 8007eac:	d026      	beq.n	8007efc <UART_SetConfig+0xe3c>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b06      	cmp	r3, #6
 8007eb4:	d020      	beq.n	8007ef8 <UART_SetConfig+0xe38>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b07      	cmp	r3, #7
 8007ebc:	d01a      	beq.n	8007ef4 <UART_SetConfig+0xe34>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2b08      	cmp	r3, #8
 8007ec4:	d014      	beq.n	8007ef0 <UART_SetConfig+0xe30>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	2b09      	cmp	r3, #9
 8007ecc:	d00e      	beq.n	8007eec <UART_SetConfig+0xe2c>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	2b0a      	cmp	r3, #10
 8007ed4:	d008      	beq.n	8007ee8 <UART_SetConfig+0xe28>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	2b0b      	cmp	r3, #11
 8007edc:	d102      	bne.n	8007ee4 <UART_SetConfig+0xe24>
 8007ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ee2:	e016      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e014      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007ee8:	2380      	movs	r3, #128	; 0x80
 8007eea:	e012      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007eec:	2340      	movs	r3, #64	; 0x40
 8007eee:	e010      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007ef0:	2320      	movs	r3, #32
 8007ef2:	e00e      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007ef4:	2310      	movs	r3, #16
 8007ef6:	e00c      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007ef8:	230c      	movs	r3, #12
 8007efa:	e00a      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007efc:	230a      	movs	r3, #10
 8007efe:	e008      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007f00:	2308      	movs	r3, #8
 8007f02:	e006      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007f04:	2306      	movs	r3, #6
 8007f06:	e004      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007f08:	2304      	movs	r3, #4
 8007f0a:	e002      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e000      	b.n	8007f12 <UART_SetConfig+0xe52>
 8007f10:	2301      	movs	r3, #1
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f18:	005a      	lsls	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	085b      	lsrs	r3, r3, #1
 8007f20:	441a      	add	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	61fb      	str	r3, [r7, #28]
        break;
 8007f2e:	e063      	b.n	8007ff8 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d04f      	beq.n	8007fd8 <UART_SetConfig+0xf18>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d048      	beq.n	8007fd2 <UART_SetConfig+0xf12>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d041      	beq.n	8007fcc <UART_SetConfig+0xf0c>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d03a      	beq.n	8007fc6 <UART_SetConfig+0xf06>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d033      	beq.n	8007fc0 <UART_SetConfig+0xf00>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	2b05      	cmp	r3, #5
 8007f5e:	d02c      	beq.n	8007fba <UART_SetConfig+0xefa>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	2b06      	cmp	r3, #6
 8007f66:	d025      	beq.n	8007fb4 <UART_SetConfig+0xef4>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	d01e      	beq.n	8007fae <UART_SetConfig+0xeee>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d017      	beq.n	8007fa8 <UART_SetConfig+0xee8>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2b09      	cmp	r3, #9
 8007f7e:	d010      	beq.n	8007fa2 <UART_SetConfig+0xee2>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	2b0a      	cmp	r3, #10
 8007f86:	d009      	beq.n	8007f9c <UART_SetConfig+0xedc>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	2b0b      	cmp	r3, #11
 8007f8e:	d102      	bne.n	8007f96 <UART_SetConfig+0xed6>
 8007f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f94:	e022      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f9a:	e01f      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fa0:	e01c      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa6:	e019      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fac:	e016      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fb2:	e013      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fb4:	f241 5354 	movw	r3, #5460	; 0x1554
 8007fb8:	e010      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fba:	f641 1398 	movw	r3, #6552	; 0x1998
 8007fbe:	e00d      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fc4:	e00a      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fc6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007fca:	e007      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fd0:	e004      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fd6:	e001      	b.n	8007fdc <UART_SetConfig+0xf1c>
 8007fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6852      	ldr	r2, [r2, #4]
 8007fe0:	0852      	lsrs	r2, r2, #1
 8007fe2:	441a      	add	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	61fb      	str	r3, [r7, #28]
        break;
 8007ff0:	e002      	b.n	8007ff8 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	76fb      	strb	r3, [r7, #27]
        break;
 8007ff6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	2b0f      	cmp	r3, #15
 8007ffc:	d916      	bls.n	800802c <UART_SetConfig+0xf6c>
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008004:	d212      	bcs.n	800802c <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	b29b      	uxth	r3, r3
 800800a:	f023 030f 	bic.w	r3, r3, #15
 800800e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	085b      	lsrs	r3, r3, #1
 8008014:	b29b      	uxth	r3, r3
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	b29a      	uxth	r2, r3
 800801c:	89fb      	ldrh	r3, [r7, #14]
 800801e:	4313      	orrs	r3, r2
 8008020:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	89fa      	ldrh	r2, [r7, #14]
 8008028:	60da      	str	r2, [r3, #12]
 800802a:	e20c      	b.n	8008446 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	76fb      	strb	r3, [r7, #27]
 8008030:	e209      	b.n	8008446 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8008032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008036:	2b08      	cmp	r3, #8
 8008038:	f200 81f4 	bhi.w	8008424 <UART_SetConfig+0x1364>
 800803c:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <UART_SetConfig+0xf84>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	08008099 	.word	0x08008099
 8008048:	0800814f 	.word	0x0800814f
 800804c:	08008205 	.word	0x08008205
 8008050:	08008425 	.word	0x08008425
 8008054:	080082af 	.word	0x080082af
 8008058:	08008425 	.word	0x08008425
 800805c:	08008425 	.word	0x08008425
 8008060:	08008425 	.word	0x08008425
 8008064:	08008365 	.word	0x08008365
 8008068:	0001e848 	.word	0x0001e848
 800806c:	01e84800 	.word	0x01e84800
 8008070:	0003d090 	.word	0x0003d090
 8008074:	0007a120 	.word	0x0007a120
 8008078:	000f4240 	.word	0x000f4240
 800807c:	001e8480 	.word	0x001e8480
 8008080:	0028b0aa 	.word	0x0028b0aa
 8008084:	0030d400 	.word	0x0030d400
 8008088:	003d0900 	.word	0x003d0900
 800808c:	00516154 	.word	0x00516154
 8008090:	007a1200 	.word	0x007a1200
 8008094:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008098:	f7fd fd18 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 800809c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d044      	beq.n	8008130 <UART_SetConfig+0x1070>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d03e      	beq.n	800812c <UART_SetConfig+0x106c>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d038      	beq.n	8008128 <UART_SetConfig+0x1068>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d032      	beq.n	8008124 <UART_SetConfig+0x1064>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d02c      	beq.n	8008120 <UART_SetConfig+0x1060>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b05      	cmp	r3, #5
 80080cc:	d026      	beq.n	800811c <UART_SetConfig+0x105c>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b06      	cmp	r3, #6
 80080d4:	d020      	beq.n	8008118 <UART_SetConfig+0x1058>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	2b07      	cmp	r3, #7
 80080dc:	d01a      	beq.n	8008114 <UART_SetConfig+0x1054>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d014      	beq.n	8008110 <UART_SetConfig+0x1050>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d00e      	beq.n	800810c <UART_SetConfig+0x104c>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	2b0a      	cmp	r3, #10
 80080f4:	d008      	beq.n	8008108 <UART_SetConfig+0x1048>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b0b      	cmp	r3, #11
 80080fc:	d102      	bne.n	8008104 <UART_SetConfig+0x1044>
 80080fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008102:	e016      	b.n	8008132 <UART_SetConfig+0x1072>
 8008104:	2301      	movs	r3, #1
 8008106:	e014      	b.n	8008132 <UART_SetConfig+0x1072>
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	e012      	b.n	8008132 <UART_SetConfig+0x1072>
 800810c:	2340      	movs	r3, #64	; 0x40
 800810e:	e010      	b.n	8008132 <UART_SetConfig+0x1072>
 8008110:	2320      	movs	r3, #32
 8008112:	e00e      	b.n	8008132 <UART_SetConfig+0x1072>
 8008114:	2310      	movs	r3, #16
 8008116:	e00c      	b.n	8008132 <UART_SetConfig+0x1072>
 8008118:	230c      	movs	r3, #12
 800811a:	e00a      	b.n	8008132 <UART_SetConfig+0x1072>
 800811c:	230a      	movs	r3, #10
 800811e:	e008      	b.n	8008132 <UART_SetConfig+0x1072>
 8008120:	2308      	movs	r3, #8
 8008122:	e006      	b.n	8008132 <UART_SetConfig+0x1072>
 8008124:	2306      	movs	r3, #6
 8008126:	e004      	b.n	8008132 <UART_SetConfig+0x1072>
 8008128:	2304      	movs	r3, #4
 800812a:	e002      	b.n	8008132 <UART_SetConfig+0x1072>
 800812c:	2302      	movs	r3, #2
 800812e:	e000      	b.n	8008132 <UART_SetConfig+0x1072>
 8008130:	2301      	movs	r3, #1
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	fbb2 f2f3 	udiv	r2, r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	441a      	add	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	fbb2 f3f3 	udiv	r3, r2, r3
 8008148:	b29b      	uxth	r3, r3
 800814a:	61fb      	str	r3, [r7, #28]
        break;
 800814c:	e16d      	b.n	800842a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800814e:	f7fd fcd3 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 8008152:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008158:	2b00      	cmp	r3, #0
 800815a:	d044      	beq.n	80081e6 <UART_SetConfig+0x1126>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b01      	cmp	r3, #1
 8008162:	d03e      	beq.n	80081e2 <UART_SetConfig+0x1122>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	2b02      	cmp	r3, #2
 800816a:	d038      	beq.n	80081de <UART_SetConfig+0x111e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	2b03      	cmp	r3, #3
 8008172:	d032      	beq.n	80081da <UART_SetConfig+0x111a>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b04      	cmp	r3, #4
 800817a:	d02c      	beq.n	80081d6 <UART_SetConfig+0x1116>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	2b05      	cmp	r3, #5
 8008182:	d026      	beq.n	80081d2 <UART_SetConfig+0x1112>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	2b06      	cmp	r3, #6
 800818a:	d020      	beq.n	80081ce <UART_SetConfig+0x110e>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	2b07      	cmp	r3, #7
 8008192:	d01a      	beq.n	80081ca <UART_SetConfig+0x110a>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	2b08      	cmp	r3, #8
 800819a:	d014      	beq.n	80081c6 <UART_SetConfig+0x1106>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b09      	cmp	r3, #9
 80081a2:	d00e      	beq.n	80081c2 <UART_SetConfig+0x1102>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	2b0a      	cmp	r3, #10
 80081aa:	d008      	beq.n	80081be <UART_SetConfig+0x10fe>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b0b      	cmp	r3, #11
 80081b2:	d102      	bne.n	80081ba <UART_SetConfig+0x10fa>
 80081b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081b8:	e016      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081ba:	2301      	movs	r3, #1
 80081bc:	e014      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081be:	2380      	movs	r3, #128	; 0x80
 80081c0:	e012      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081c2:	2340      	movs	r3, #64	; 0x40
 80081c4:	e010      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081c6:	2320      	movs	r3, #32
 80081c8:	e00e      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081ca:	2310      	movs	r3, #16
 80081cc:	e00c      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081ce:	230c      	movs	r3, #12
 80081d0:	e00a      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081d2:	230a      	movs	r3, #10
 80081d4:	e008      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081d6:	2308      	movs	r3, #8
 80081d8:	e006      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081da:	2306      	movs	r3, #6
 80081dc:	e004      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081de:	2304      	movs	r3, #4
 80081e0:	e002      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081e2:	2302      	movs	r3, #2
 80081e4:	e000      	b.n	80081e8 <UART_SetConfig+0x1128>
 80081e6:	2301      	movs	r3, #1
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	085b      	lsrs	r3, r3, #1
 80081f4:	441a      	add	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fe:	b29b      	uxth	r3, r3
 8008200:	61fb      	str	r3, [r7, #28]
        break;
 8008202:	e112      	b.n	800842a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	2b00      	cmp	r3, #0
 800820a:	d044      	beq.n	8008296 <UART_SetConfig+0x11d6>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	2b01      	cmp	r3, #1
 8008212:	d03e      	beq.n	8008292 <UART_SetConfig+0x11d2>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	2b02      	cmp	r3, #2
 800821a:	d038      	beq.n	800828e <UART_SetConfig+0x11ce>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	2b03      	cmp	r3, #3
 8008222:	d032      	beq.n	800828a <UART_SetConfig+0x11ca>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	2b04      	cmp	r3, #4
 800822a:	d02c      	beq.n	8008286 <UART_SetConfig+0x11c6>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	2b05      	cmp	r3, #5
 8008232:	d026      	beq.n	8008282 <UART_SetConfig+0x11c2>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	2b06      	cmp	r3, #6
 800823a:	d020      	beq.n	800827e <UART_SetConfig+0x11be>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	2b07      	cmp	r3, #7
 8008242:	d01a      	beq.n	800827a <UART_SetConfig+0x11ba>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b08      	cmp	r3, #8
 800824a:	d014      	beq.n	8008276 <UART_SetConfig+0x11b6>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	2b09      	cmp	r3, #9
 8008252:	d00e      	beq.n	8008272 <UART_SetConfig+0x11b2>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	2b0a      	cmp	r3, #10
 800825a:	d008      	beq.n	800826e <UART_SetConfig+0x11ae>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b0b      	cmp	r3, #11
 8008262:	d102      	bne.n	800826a <UART_SetConfig+0x11aa>
 8008264:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008268:	e016      	b.n	8008298 <UART_SetConfig+0x11d8>
 800826a:	4b81      	ldr	r3, [pc, #516]	; (8008470 <UART_SetConfig+0x13b0>)
 800826c:	e014      	b.n	8008298 <UART_SetConfig+0x11d8>
 800826e:	4b81      	ldr	r3, [pc, #516]	; (8008474 <UART_SetConfig+0x13b4>)
 8008270:	e012      	b.n	8008298 <UART_SetConfig+0x11d8>
 8008272:	4b81      	ldr	r3, [pc, #516]	; (8008478 <UART_SetConfig+0x13b8>)
 8008274:	e010      	b.n	8008298 <UART_SetConfig+0x11d8>
 8008276:	4b81      	ldr	r3, [pc, #516]	; (800847c <UART_SetConfig+0x13bc>)
 8008278:	e00e      	b.n	8008298 <UART_SetConfig+0x11d8>
 800827a:	4b81      	ldr	r3, [pc, #516]	; (8008480 <UART_SetConfig+0x13c0>)
 800827c:	e00c      	b.n	8008298 <UART_SetConfig+0x11d8>
 800827e:	4b81      	ldr	r3, [pc, #516]	; (8008484 <UART_SetConfig+0x13c4>)
 8008280:	e00a      	b.n	8008298 <UART_SetConfig+0x11d8>
 8008282:	4b81      	ldr	r3, [pc, #516]	; (8008488 <UART_SetConfig+0x13c8>)
 8008284:	e008      	b.n	8008298 <UART_SetConfig+0x11d8>
 8008286:	4b81      	ldr	r3, [pc, #516]	; (800848c <UART_SetConfig+0x13cc>)
 8008288:	e006      	b.n	8008298 <UART_SetConfig+0x11d8>
 800828a:	4b81      	ldr	r3, [pc, #516]	; (8008490 <UART_SetConfig+0x13d0>)
 800828c:	e004      	b.n	8008298 <UART_SetConfig+0x11d8>
 800828e:	4b81      	ldr	r3, [pc, #516]	; (8008494 <UART_SetConfig+0x13d4>)
 8008290:	e002      	b.n	8008298 <UART_SetConfig+0x11d8>
 8008292:	4b81      	ldr	r3, [pc, #516]	; (8008498 <UART_SetConfig+0x13d8>)
 8008294:	e000      	b.n	8008298 <UART_SetConfig+0x11d8>
 8008296:	4b76      	ldr	r3, [pc, #472]	; (8008470 <UART_SetConfig+0x13b0>)
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6852      	ldr	r2, [r2, #4]
 800829c:	0852      	lsrs	r2, r2, #1
 800829e:	441a      	add	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	61fb      	str	r3, [r7, #28]
        break;
 80082ac:	e0bd      	b.n	800842a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ae:	f7fd fb9f 	bl	80059f0 <HAL_RCC_GetSysClockFreq>
 80082b2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d044      	beq.n	8008346 <UART_SetConfig+0x1286>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d03e      	beq.n	8008342 <UART_SetConfig+0x1282>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d038      	beq.n	800833e <UART_SetConfig+0x127e>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d032      	beq.n	800833a <UART_SetConfig+0x127a>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d02c      	beq.n	8008336 <UART_SetConfig+0x1276>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b05      	cmp	r3, #5
 80082e2:	d026      	beq.n	8008332 <UART_SetConfig+0x1272>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b06      	cmp	r3, #6
 80082ea:	d020      	beq.n	800832e <UART_SetConfig+0x126e>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b07      	cmp	r3, #7
 80082f2:	d01a      	beq.n	800832a <UART_SetConfig+0x126a>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	d014      	beq.n	8008326 <UART_SetConfig+0x1266>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	2b09      	cmp	r3, #9
 8008302:	d00e      	beq.n	8008322 <UART_SetConfig+0x1262>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2b0a      	cmp	r3, #10
 800830a:	d008      	beq.n	800831e <UART_SetConfig+0x125e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	2b0b      	cmp	r3, #11
 8008312:	d102      	bne.n	800831a <UART_SetConfig+0x125a>
 8008314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008318:	e016      	b.n	8008348 <UART_SetConfig+0x1288>
 800831a:	2301      	movs	r3, #1
 800831c:	e014      	b.n	8008348 <UART_SetConfig+0x1288>
 800831e:	2380      	movs	r3, #128	; 0x80
 8008320:	e012      	b.n	8008348 <UART_SetConfig+0x1288>
 8008322:	2340      	movs	r3, #64	; 0x40
 8008324:	e010      	b.n	8008348 <UART_SetConfig+0x1288>
 8008326:	2320      	movs	r3, #32
 8008328:	e00e      	b.n	8008348 <UART_SetConfig+0x1288>
 800832a:	2310      	movs	r3, #16
 800832c:	e00c      	b.n	8008348 <UART_SetConfig+0x1288>
 800832e:	230c      	movs	r3, #12
 8008330:	e00a      	b.n	8008348 <UART_SetConfig+0x1288>
 8008332:	230a      	movs	r3, #10
 8008334:	e008      	b.n	8008348 <UART_SetConfig+0x1288>
 8008336:	2308      	movs	r3, #8
 8008338:	e006      	b.n	8008348 <UART_SetConfig+0x1288>
 800833a:	2306      	movs	r3, #6
 800833c:	e004      	b.n	8008348 <UART_SetConfig+0x1288>
 800833e:	2304      	movs	r3, #4
 8008340:	e002      	b.n	8008348 <UART_SetConfig+0x1288>
 8008342:	2302      	movs	r3, #2
 8008344:	e000      	b.n	8008348 <UART_SetConfig+0x1288>
 8008346:	2301      	movs	r3, #1
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	fbb2 f2f3 	udiv	r2, r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	441a      	add	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	fbb2 f3f3 	udiv	r3, r2, r3
 800835e:	b29b      	uxth	r3, r3
 8008360:	61fb      	str	r3, [r7, #28]
        break;
 8008362:	e062      	b.n	800842a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d04e      	beq.n	800840a <UART_SetConfig+0x134a>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b01      	cmp	r3, #1
 8008372:	d047      	beq.n	8008404 <UART_SetConfig+0x1344>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	2b02      	cmp	r3, #2
 800837a:	d040      	beq.n	80083fe <UART_SetConfig+0x133e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	2b03      	cmp	r3, #3
 8008382:	d039      	beq.n	80083f8 <UART_SetConfig+0x1338>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	2b04      	cmp	r3, #4
 800838a:	d032      	beq.n	80083f2 <UART_SetConfig+0x1332>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	2b05      	cmp	r3, #5
 8008392:	d02b      	beq.n	80083ec <UART_SetConfig+0x132c>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	2b06      	cmp	r3, #6
 800839a:	d024      	beq.n	80083e6 <UART_SetConfig+0x1326>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	2b07      	cmp	r3, #7
 80083a2:	d01d      	beq.n	80083e0 <UART_SetConfig+0x1320>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d016      	beq.n	80083da <UART_SetConfig+0x131a>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	2b09      	cmp	r3, #9
 80083b2:	d00f      	beq.n	80083d4 <UART_SetConfig+0x1314>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	2b0a      	cmp	r3, #10
 80083ba:	d008      	beq.n	80083ce <UART_SetConfig+0x130e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2b0b      	cmp	r3, #11
 80083c2:	d101      	bne.n	80083c8 <UART_SetConfig+0x1308>
 80083c4:	2380      	movs	r3, #128	; 0x80
 80083c6:	e022      	b.n	800840e <UART_SetConfig+0x134e>
 80083c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083cc:	e01f      	b.n	800840e <UART_SetConfig+0x134e>
 80083ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083d2:	e01c      	b.n	800840e <UART_SetConfig+0x134e>
 80083d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083d8:	e019      	b.n	800840e <UART_SetConfig+0x134e>
 80083da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083de:	e016      	b.n	800840e <UART_SetConfig+0x134e>
 80083e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083e4:	e013      	b.n	800840e <UART_SetConfig+0x134e>
 80083e6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80083ea:	e010      	b.n	800840e <UART_SetConfig+0x134e>
 80083ec:	f640 43cc 	movw	r3, #3276	; 0xccc
 80083f0:	e00d      	b.n	800840e <UART_SetConfig+0x134e>
 80083f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083f6:	e00a      	b.n	800840e <UART_SetConfig+0x134e>
 80083f8:	f241 5355 	movw	r3, #5461	; 0x1555
 80083fc:	e007      	b.n	800840e <UART_SetConfig+0x134e>
 80083fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008402:	e004      	b.n	800840e <UART_SetConfig+0x134e>
 8008404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008408:	e001      	b.n	800840e <UART_SetConfig+0x134e>
 800840a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6852      	ldr	r2, [r2, #4]
 8008412:	0852      	lsrs	r2, r2, #1
 8008414:	441a      	add	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	fbb2 f3f3 	udiv	r3, r2, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	61fb      	str	r3, [r7, #28]
        break;
 8008422:	e002      	b.n	800842a <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	76fb      	strb	r3, [r7, #27]
        break;
 8008428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	2b0f      	cmp	r3, #15
 800842e:	d908      	bls.n	8008442 <UART_SetConfig+0x1382>
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008436:	d204      	bcs.n	8008442 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	60da      	str	r2, [r3, #12]
 8008440:	e001      	b.n	8008446 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008462:	7efb      	ldrb	r3, [r7, #27]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3728      	adds	r7, #40	; 0x28
 8008468:	46bd      	mov	sp, r7
 800846a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800846e:	bf00      	nop
 8008470:	00f42400 	.word	0x00f42400
 8008474:	0001e848 	.word	0x0001e848
 8008478:	0003d090 	.word	0x0003d090
 800847c:	0007a120 	.word	0x0007a120
 8008480:	000f4240 	.word	0x000f4240
 8008484:	00145855 	.word	0x00145855
 8008488:	00186a00 	.word	0x00186a00
 800848c:	001e8480 	.word	0x001e8480
 8008490:	0028b0aa 	.word	0x0028b0aa
 8008494:	003d0900 	.word	0x003d0900
 8008498:	007a1200 	.word	0x007a1200

0800849c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00a      	beq.n	80084c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00a      	beq.n	80084e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	f003 0310 	and.w	r3, r3, #16
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01a      	beq.n	80085b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800859a:	d10a      	bne.n	80085b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]
  }
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80085f0:	f7f9 f8fa 	bl	80017e8 <HAL_GetTick>
 80085f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b08      	cmp	r3, #8
 8008602:	d10e      	bne.n	8008622 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f82c 	bl	8008670 <UART_WaitOnFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e022      	b.n	8008668 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b04      	cmp	r3, #4
 800862e:	d10e      	bne.n	800864e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f816 	bl	8008670 <UART_WaitOnFlagUntilTimeout>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e00c      	b.n	8008668 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2220      	movs	r2, #32
 8008652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2220      	movs	r2, #32
 800865a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	4613      	mov	r3, r2
 800867e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008680:	e02c      	b.n	80086dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d028      	beq.n	80086dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800868a:	f7f9 f8ad 	bl	80017e8 <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	429a      	cmp	r2, r3
 8008698:	d302      	bcc.n	80086a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d11d      	bne.n	80086dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80086ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689a      	ldr	r2, [r3, #8]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0201 	bic.w	r2, r2, #1
 80086be:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e00f      	b.n	80086fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69da      	ldr	r2, [r3, #28]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	4013      	ands	r3, r2
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	bf0c      	ite	eq
 80086ec:	2301      	moveq	r3, #1
 80086ee:	2300      	movne	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d0c3      	beq.n	8008682 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_UARTEx_DisableFifoMode+0x16>
 8008716:	2302      	movs	r3, #2
 8008718:	e027      	b.n	800876a <HAL_UARTEx_DisableFifoMode+0x66>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2224      	movs	r2, #36	; 0x24
 8008726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0201 	bic.w	r2, r2, #1
 8008740:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008748:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2220      	movs	r2, #32
 800875c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800878a:	2302      	movs	r3, #2
 800878c:	e02d      	b.n	80087ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2224      	movs	r2, #36	; 0x24
 800879a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0201 	bic.w	r2, r2, #1
 80087b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f850 	bl	8008870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008806:	2302      	movs	r3, #2
 8008808:	e02d      	b.n	8008866 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2224      	movs	r2, #36	; 0x24
 8008816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0201 	bic.w	r2, r2, #1
 8008830:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f812 	bl	8008870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b089      	sub	sp, #36	; 0x24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008878:	4a2f      	ldr	r2, [pc, #188]	; (8008938 <UARTEx_SetNbDataToProcess+0xc8>)
 800887a:	f107 0314 	add.w	r3, r7, #20
 800887e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008882:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008886:	4a2d      	ldr	r2, [pc, #180]	; (800893c <UARTEx_SetNbDataToProcess+0xcc>)
 8008888:	f107 030c 	add.w	r3, r7, #12
 800888c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008890:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008898:	2b00      	cmp	r3, #0
 800889a:	d108      	bne.n	80088ae <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088ac:	e03d      	b.n	800892a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088ae:	2308      	movs	r3, #8
 80088b0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088b2:	2308      	movs	r3, #8
 80088b4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	0e5b      	lsrs	r3, r3, #25
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	f003 0307 	and.w	r3, r3, #7
 80088c4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	0f5b      	lsrs	r3, r3, #29
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	f003 0307 	and.w	r3, r3, #7
 80088d4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80088d6:	7fbb      	ldrb	r3, [r7, #30]
 80088d8:	7f3a      	ldrb	r2, [r7, #28]
 80088da:	f107 0120 	add.w	r1, r7, #32
 80088de:	440a      	add	r2, r1
 80088e0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80088e4:	fb02 f303 	mul.w	r3, r2, r3
 80088e8:	7f3a      	ldrb	r2, [r7, #28]
 80088ea:	f107 0120 	add.w	r1, r7, #32
 80088ee:	440a      	add	r2, r1
 80088f0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80088f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008900:	7ffb      	ldrb	r3, [r7, #31]
 8008902:	7f7a      	ldrb	r2, [r7, #29]
 8008904:	f107 0120 	add.w	r1, r7, #32
 8008908:	440a      	add	r2, r1
 800890a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800890e:	fb02 f303 	mul.w	r3, r2, r3
 8008912:	7f7a      	ldrb	r2, [r7, #29]
 8008914:	f107 0120 	add.w	r1, r7, #32
 8008918:	440a      	add	r2, r1
 800891a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800891e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008922:	b29a      	uxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800892a:	bf00      	nop
 800892c:	3724      	adds	r7, #36	; 0x24
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	0800bc58 	.word	0x0800bc58
 800893c:	0800bc60 	.word	0x0800bc60

08008940 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008948:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800894c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008954:	b29a      	uxth	r2, r3
 8008956:	89fb      	ldrh	r3, [r7, #14]
 8008958:	4313      	orrs	r3, r2
 800895a:	b29a      	uxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008978:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800897c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008984:	b29b      	uxth	r3, r3
 8008986:	b21a      	sxth	r2, r3
 8008988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800898c:	43db      	mvns	r3, r3
 800898e:	b21b      	sxth	r3, r3
 8008990:	4013      	ands	r3, r2
 8008992:	b21b      	sxth	r3, r3
 8008994:	b29a      	uxth	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80089aa:	b084      	sub	sp, #16
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	f107 0014 	add.w	r0, r7, #20
 80089b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff ffaf 	bl	8008940 <USB_EnableGlobalInt>

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089ee:	b004      	add	sp, #16
 80089f0:	4770      	bx	lr
	...

080089f4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089f4:	b490      	push	{r4, r7}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a18:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	78db      	ldrb	r3, [r3, #3]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d819      	bhi.n	8008a56 <USB_ActivateEndpoint+0x62>
 8008a22:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <USB_ActivateEndpoint+0x34>)
 8008a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a28:	08008a39 	.word	0x08008a39
 8008a2c:	08008a4d 	.word	0x08008a4d
 8008a30:	08008a5d 	.word	0x08008a5d
 8008a34:	08008a43 	.word	0x08008a43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a38:	89bb      	ldrh	r3, [r7, #12]
 8008a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a3e:	81bb      	strh	r3, [r7, #12]
      break;
 8008a40:	e00d      	b.n	8008a5e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a42:	89bb      	ldrh	r3, [r7, #12]
 8008a44:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008a48:	81bb      	strh	r3, [r7, #12]
      break;
 8008a4a:	e008      	b.n	8008a5e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a4c:	89bb      	ldrh	r3, [r7, #12]
 8008a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a52:	81bb      	strh	r3, [r7, #12]
      break;
 8008a54:	e003      	b.n	8008a5e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5a:	e000      	b.n	8008a5e <USB_ActivateEndpoint+0x6a>
      break;
 8008a5c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	441a      	add	r2, r3
 8008a68:	89bb      	ldrh	r3, [r7, #12]
 8008a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	b21b      	sxth	r3, r3
 8008a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a96:	b21a      	sxth	r2, r3
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	b21b      	sxth	r3, r3
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	b21b      	sxth	r3, r3
 8008aa2:	b29c      	uxth	r4, r3
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	441a      	add	r2, r3
 8008aae:	4b8a      	ldr	r3, [pc, #552]	; (8008cd8 <USB_ActivateEndpoint+0x2e4>)
 8008ab0:	4323      	orrs	r3, r4
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	7b1b      	ldrb	r3, [r3, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 8112 	bne.w	8008ce4 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d067      	beq.n	8008b98 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ac8:	687c      	ldr	r4, [r7, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	441c      	add	r4, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	4423      	add	r3, r4
 8008adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ae0:	461c      	mov	r4, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	88db      	ldrh	r3, [r3, #6]
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	b29c      	uxth	r4, r3
 8008afe:	4623      	mov	r3, r4
 8008b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d014      	beq.n	8008b32 <USB_ActivateEndpoint+0x13e>
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1e:	b29c      	uxth	r4, r3
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	441a      	add	r2, r3
 8008b2a:	4b6c      	ldr	r3, [pc, #432]	; (8008cdc <USB_ActivateEndpoint+0x2e8>)
 8008b2c:	4323      	orrs	r3, r4
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	78db      	ldrb	r3, [r3, #3]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d018      	beq.n	8008b6c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b50:	b29c      	uxth	r4, r3
 8008b52:	f084 0320 	eor.w	r3, r4, #32
 8008b56:	b29c      	uxth	r4, r3
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	441a      	add	r2, r3
 8008b62:	4b5d      	ldr	r3, [pc, #372]	; (8008cd8 <USB_ActivateEndpoint+0x2e4>)
 8008b64:	4323      	orrs	r3, r4
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	8013      	strh	r3, [r2, #0]
 8008b6a:	e22b      	b.n	8008fc4 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b82:	b29c      	uxth	r4, r3
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	441a      	add	r2, r3
 8008b8e:	4b52      	ldr	r3, [pc, #328]	; (8008cd8 <USB_ActivateEndpoint+0x2e4>)
 8008b90:	4323      	orrs	r3, r4
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	8013      	strh	r3, [r2, #0]
 8008b96:	e215      	b.n	8008fc4 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b98:	687c      	ldr	r4, [r7, #4]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	441c      	add	r4, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	4423      	add	r3, r4
 8008bac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bb0:	461c      	mov	r4, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	88db      	ldrh	r3, [r3, #6]
 8008bb6:	085b      	lsrs	r3, r3, #1
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008bc0:	687c      	ldr	r4, [r7, #4]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	441c      	add	r4, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	4423      	add	r3, r4
 8008bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bd8:	461c      	mov	r4, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10e      	bne.n	8008c00 <USB_ActivateEndpoint+0x20c>
 8008be2:	8823      	ldrh	r3, [r4, #0]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	8023      	strh	r3, [r4, #0]
 8008bee:	8823      	ldrh	r3, [r4, #0]
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	8023      	strh	r3, [r4, #0]
 8008bfe:	e02d      	b.n	8008c5c <USB_ActivateEndpoint+0x268>
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	2b3e      	cmp	r3, #62	; 0x3e
 8008c06:	d812      	bhi.n	8008c2e <USB_ActivateEndpoint+0x23a>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	085b      	lsrs	r3, r3, #1
 8008c0e:	60bb      	str	r3, [r7, #8]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <USB_ActivateEndpoint+0x22e>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60bb      	str	r3, [r7, #8]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	029b      	lsls	r3, r3, #10
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	8023      	strh	r3, [r4, #0]
 8008c2c:	e016      	b.n	8008c5c <USB_ActivateEndpoint+0x268>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	095b      	lsrs	r3, r3, #5
 8008c34:	60bb      	str	r3, [r7, #8]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	f003 031f 	and.w	r3, r3, #31
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d102      	bne.n	8008c48 <USB_ActivateEndpoint+0x254>
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	60bb      	str	r3, [r7, #8]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	029b      	lsls	r3, r3, #10
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	b29c      	uxth	r4, r3
 8008c6a:	4623      	mov	r3, r4
 8008c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d014      	beq.n	8008c9e <USB_ActivateEndpoint+0x2aa>
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4413      	add	r3, r2
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8a:	b29c      	uxth	r4, r3
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	441a      	add	r2, r3
 8008c96:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <USB_ActivateEndpoint+0x2ec>)
 8008c98:	4323      	orrs	r3, r4
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb4:	b29c      	uxth	r4, r3
 8008cb6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008cba:	b29c      	uxth	r4, r3
 8008cbc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008cc0:	b29c      	uxth	r4, r3
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	441a      	add	r2, r3
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <USB_ActivateEndpoint+0x2e4>)
 8008cce:	4323      	orrs	r3, r4
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	8013      	strh	r3, [r2, #0]
 8008cd4:	e176      	b.n	8008fc4 <USB_ActivateEndpoint+0x5d0>
 8008cd6:	bf00      	nop
 8008cd8:	ffff8080 	.word	0xffff8080
 8008cdc:	ffff80c0 	.word	0xffff80c0
 8008ce0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfa:	b29c      	uxth	r4, r3
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	441a      	add	r2, r3
 8008d06:	4b96      	ldr	r3, [pc, #600]	; (8008f60 <USB_ActivateEndpoint+0x56c>)
 8008d08:	4323      	orrs	r3, r4
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008d0e:	687c      	ldr	r4, [r7, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	441c      	add	r4, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	4423      	add	r3, r4
 8008d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d26:	461c      	mov	r4, r3
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	891b      	ldrh	r3, [r3, #8]
 8008d2c:	085b      	lsrs	r3, r3, #1
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	8023      	strh	r3, [r4, #0]
 8008d36:	687c      	ldr	r4, [r7, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	441c      	add	r4, r3
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	4423      	add	r3, r4
 8008d4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d4e:	461c      	mov	r4, r3
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	895b      	ldrh	r3, [r3, #10]
 8008d54:	085b      	lsrs	r3, r3, #1
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	785b      	ldrb	r3, [r3, #1]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f040 8088 	bne.w	8008e78 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	b29c      	uxth	r4, r3
 8008d76:	4623      	mov	r3, r4
 8008d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d014      	beq.n	8008daa <USB_ActivateEndpoint+0x3b6>
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d96:	b29c      	uxth	r4, r3
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	441a      	add	r2, r3
 8008da2:	4b70      	ldr	r3, [pc, #448]	; (8008f64 <USB_ActivateEndpoint+0x570>)
 8008da4:	4323      	orrs	r3, r4
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29c      	uxth	r4, r3
 8008db8:	4623      	mov	r3, r4
 8008dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d014      	beq.n	8008dec <USB_ActivateEndpoint+0x3f8>
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd8:	b29c      	uxth	r4, r3
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	441a      	add	r2, r3
 8008de4:	4b60      	ldr	r3, [pc, #384]	; (8008f68 <USB_ActivateEndpoint+0x574>)
 8008de6:	4323      	orrs	r3, r4
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e02:	b29c      	uxth	r4, r3
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	441a      	add	r2, r3
 8008e0e:	4b56      	ldr	r3, [pc, #344]	; (8008f68 <USB_ActivateEndpoint+0x574>)
 8008e10:	4323      	orrs	r3, r4
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2c:	b29c      	uxth	r4, r3
 8008e2e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008e32:	b29c      	uxth	r4, r3
 8008e34:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008e38:	b29c      	uxth	r4, r3
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	441a      	add	r2, r3
 8008e44:	4b49      	ldr	r3, [pc, #292]	; (8008f6c <USB_ActivateEndpoint+0x578>)
 8008e46:	4323      	orrs	r3, r4
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e62:	b29c      	uxth	r4, r3
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	441a      	add	r2, r3
 8008e6e:	4b3f      	ldr	r3, [pc, #252]	; (8008f6c <USB_ActivateEndpoint+0x578>)
 8008e70:	4323      	orrs	r3, r4
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	8013      	strh	r3, [r2, #0]
 8008e76:	e0a5      	b.n	8008fc4 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29c      	uxth	r4, r3
 8008e86:	4623      	mov	r3, r4
 8008e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d014      	beq.n	8008eba <USB_ActivateEndpoint+0x4c6>
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea6:	b29c      	uxth	r4, r3
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	441a      	add	r2, r3
 8008eb2:	4b2c      	ldr	r3, [pc, #176]	; (8008f64 <USB_ActivateEndpoint+0x570>)
 8008eb4:	4323      	orrs	r3, r4
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	b29c      	uxth	r4, r3
 8008ec8:	4623      	mov	r3, r4
 8008eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d014      	beq.n	8008efc <USB_ActivateEndpoint+0x508>
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee8:	b29c      	uxth	r4, r3
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	441a      	add	r2, r3
 8008ef4:	4b1c      	ldr	r3, [pc, #112]	; (8008f68 <USB_ActivateEndpoint+0x574>)
 8008ef6:	4323      	orrs	r3, r4
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f12:	b29c      	uxth	r4, r3
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	441a      	add	r2, r3
 8008f1e:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <USB_ActivateEndpoint+0x570>)
 8008f20:	4323      	orrs	r3, r4
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	78db      	ldrb	r3, [r3, #3]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d020      	beq.n	8008f70 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f44:	b29c      	uxth	r4, r3
 8008f46:	f084 0320 	eor.w	r3, r4, #32
 8008f4a:	b29c      	uxth	r4, r3
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	441a      	add	r2, r3
 8008f56:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <USB_ActivateEndpoint+0x578>)
 8008f58:	4323      	orrs	r3, r4
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	8013      	strh	r3, [r2, #0]
 8008f5e:	e01c      	b.n	8008f9a <USB_ActivateEndpoint+0x5a6>
 8008f60:	ffff8180 	.word	0xffff8180
 8008f64:	ffffc080 	.word	0xffffc080
 8008f68:	ffff80c0 	.word	0xffff80c0
 8008f6c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f86:	b29c      	uxth	r4, r3
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	441a      	add	r2, r3
 8008f92:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <USB_ActivateEndpoint+0x5dc>)
 8008f94:	4323      	orrs	r3, r4
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb0:	b29c      	uxth	r4, r3
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	441a      	add	r2, r3
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <USB_ActivateEndpoint+0x5dc>)
 8008fbe:	4323      	orrs	r3, r4
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc90      	pop	{r4, r7}
 8008fce:	4770      	bx	lr
 8008fd0:	ffff8080 	.word	0xffff8080

08008fd4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fd4:	b490      	push	{r4, r7}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	7b1b      	ldrb	r3, [r3, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d171      	bne.n	80090ca <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	785b      	ldrb	r3, [r3, #1]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d036      	beq.n	800905c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b29c      	uxth	r4, r3
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009002:	2b00      	cmp	r3, #0
 8009004:	d014      	beq.n	8009030 <USB_DeactivateEndpoint+0x5c>
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b29b      	uxth	r3, r3
 8009014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901c:	b29c      	uxth	r4, r3
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	441a      	add	r2, r3
 8009028:	4b6b      	ldr	r3, [pc, #428]	; (80091d8 <USB_DeactivateEndpoint+0x204>)
 800902a:	4323      	orrs	r3, r4
 800902c:	b29b      	uxth	r3, r3
 800902e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	b29b      	uxth	r3, r3
 800903e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009046:	b29c      	uxth	r4, r3
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	441a      	add	r2, r3
 8009052:	4b62      	ldr	r3, [pc, #392]	; (80091dc <USB_DeactivateEndpoint+0x208>)
 8009054:	4323      	orrs	r3, r4
 8009056:	b29b      	uxth	r3, r3
 8009058:	8013      	strh	r3, [r2, #0]
 800905a:	e144      	b.n	80092e6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29c      	uxth	r4, r3
 800906a:	4623      	mov	r3, r4
 800906c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d014      	beq.n	800909e <USB_DeactivateEndpoint+0xca>
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	b29b      	uxth	r3, r3
 8009082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800908a:	b29c      	uxth	r4, r3
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	441a      	add	r2, r3
 8009096:	4b52      	ldr	r3, [pc, #328]	; (80091e0 <USB_DeactivateEndpoint+0x20c>)
 8009098:	4323      	orrs	r3, r4
 800909a:	b29b      	uxth	r3, r3
 800909c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b4:	b29c      	uxth	r4, r3
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	441a      	add	r2, r3
 80090c0:	4b46      	ldr	r3, [pc, #280]	; (80091dc <USB_DeactivateEndpoint+0x208>)
 80090c2:	4323      	orrs	r3, r4
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	8013      	strh	r3, [r2, #0]
 80090c8:	e10d      	b.n	80092e6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f040 8088 	bne.w	80091e4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29c      	uxth	r4, r3
 80090e2:	4623      	mov	r3, r4
 80090e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d014      	beq.n	8009116 <USB_DeactivateEndpoint+0x142>
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009102:	b29c      	uxth	r4, r3
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	441a      	add	r2, r3
 800910e:	4b34      	ldr	r3, [pc, #208]	; (80091e0 <USB_DeactivateEndpoint+0x20c>)
 8009110:	4323      	orrs	r3, r4
 8009112:	b29b      	uxth	r3, r3
 8009114:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	b29c      	uxth	r4, r3
 8009124:	4623      	mov	r3, r4
 8009126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	d014      	beq.n	8009158 <USB_DeactivateEndpoint+0x184>
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009144:	b29c      	uxth	r4, r3
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	441a      	add	r2, r3
 8009150:	4b21      	ldr	r3, [pc, #132]	; (80091d8 <USB_DeactivateEndpoint+0x204>)
 8009152:	4323      	orrs	r3, r4
 8009154:	b29b      	uxth	r3, r3
 8009156:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800916a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916e:	b29c      	uxth	r4, r3
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	441a      	add	r2, r3
 800917a:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <USB_DeactivateEndpoint+0x204>)
 800917c:	4323      	orrs	r3, r4
 800917e:	b29b      	uxth	r3, r3
 8009180:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	b29b      	uxth	r3, r3
 8009190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009198:	b29c      	uxth	r4, r3
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	441a      	add	r2, r3
 80091a4:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <USB_DeactivateEndpoint+0x208>)
 80091a6:	4323      	orrs	r3, r4
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091c2:	b29c      	uxth	r4, r3
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	441a      	add	r2, r3
 80091ce:	4b03      	ldr	r3, [pc, #12]	; (80091dc <USB_DeactivateEndpoint+0x208>)
 80091d0:	4323      	orrs	r3, r4
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]
 80091d6:	e086      	b.n	80092e6 <USB_DeactivateEndpoint+0x312>
 80091d8:	ffff80c0 	.word	0xffff80c0
 80091dc:	ffff8080 	.word	0xffff8080
 80091e0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	b29c      	uxth	r4, r3
 80091f2:	4623      	mov	r3, r4
 80091f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d014      	beq.n	8009226 <USB_DeactivateEndpoint+0x252>
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	b29b      	uxth	r3, r3
 800920a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800920e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009212:	b29c      	uxth	r4, r3
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	441a      	add	r2, r3
 800921e:	4b35      	ldr	r3, [pc, #212]	; (80092f4 <USB_DeactivateEndpoint+0x320>)
 8009220:	4323      	orrs	r3, r4
 8009222:	b29b      	uxth	r3, r3
 8009224:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	b29c      	uxth	r4, r3
 8009234:	4623      	mov	r3, r4
 8009236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d014      	beq.n	8009268 <USB_DeactivateEndpoint+0x294>
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	b29b      	uxth	r3, r3
 800924c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009254:	b29c      	uxth	r4, r3
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	441a      	add	r2, r3
 8009260:	4b25      	ldr	r3, [pc, #148]	; (80092f8 <USB_DeactivateEndpoint+0x324>)
 8009262:	4323      	orrs	r3, r4
 8009264:	b29b      	uxth	r3, r3
 8009266:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	b29c      	uxth	r4, r3
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	441a      	add	r2, r3
 800928a:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <USB_DeactivateEndpoint+0x320>)
 800928c:	4323      	orrs	r3, r4
 800928e:	b29b      	uxth	r3, r3
 8009290:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092a8:	b29c      	uxth	r4, r3
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	441a      	add	r2, r3
 80092b4:	4b11      	ldr	r3, [pc, #68]	; (80092fc <USB_DeactivateEndpoint+0x328>)
 80092b6:	4323      	orrs	r3, r4
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d2:	b29c      	uxth	r4, r3
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	441a      	add	r2, r3
 80092de:	4b07      	ldr	r3, [pc, #28]	; (80092fc <USB_DeactivateEndpoint+0x328>)
 80092e0:	4323      	orrs	r3, r4
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bc90      	pop	{r4, r7}
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	ffffc080 	.word	0xffffc080
 80092f8:	ffff80c0 	.word	0xffff80c0
 80092fc:	ffff8080 	.word	0xffff8080

08009300 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009300:	b590      	push	{r4, r7, lr}
 8009302:	b08d      	sub	sp, #52	; 0x34
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	2b01      	cmp	r3, #1
 8009310:	f040 8160 	bne.w	80095d4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	699a      	ldr	r2, [r3, #24]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	429a      	cmp	r2, r3
 800931e:	d909      	bls.n	8009334 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	699a      	ldr	r2, [r3, #24]
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	1ad2      	subs	r2, r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	619a      	str	r2, [r3, #24]
 8009332:	e005      	b.n	8009340 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2200      	movs	r2, #0
 800933e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	7b1b      	ldrb	r3, [r3, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d119      	bne.n	800937c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	6959      	ldr	r1, [r3, #20]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	88da      	ldrh	r2, [r3, #6]
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	b29b      	uxth	r3, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fba8 	bl	8009aaa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800935a:	687c      	ldr	r4, [r7, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009362:	b29b      	uxth	r3, r3
 8009364:	441c      	add	r4, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	4423      	add	r3, r4
 800936e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009372:	461c      	mov	r4, r3
 8009374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009376:	b29b      	uxth	r3, r3
 8009378:	8023      	strh	r3, [r4, #0]
 800937a:	e10f      	b.n	800959c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	b29b      	uxth	r3, r3
 800938a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938e:	2b00      	cmp	r3, #0
 8009390:	d065      	beq.n	800945e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009392:	687c      	ldr	r4, [r7, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d148      	bne.n	800942e <USB_EPStartXfer+0x12e>
 800939c:	687c      	ldr	r4, [r7, #4]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	441c      	add	r4, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	00db      	lsls	r3, r3, #3
 80093ae:	4423      	add	r3, r4
 80093b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093b4:	461c      	mov	r4, r3
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10e      	bne.n	80093da <USB_EPStartXfer+0xda>
 80093bc:	8823      	ldrh	r3, [r4, #0]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	8023      	strh	r3, [r4, #0]
 80093c8:	8823      	ldrh	r3, [r4, #0]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	8023      	strh	r3, [r4, #0]
 80093d8:	e03d      	b.n	8009456 <USB_EPStartXfer+0x156>
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	2b3e      	cmp	r3, #62	; 0x3e
 80093de:	d810      	bhi.n	8009402 <USB_EPStartXfer+0x102>
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	085b      	lsrs	r3, r3, #1
 80093e4:	627b      	str	r3, [r7, #36]	; 0x24
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <USB_EPStartXfer+0xf6>
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	3301      	adds	r3, #1
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	029b      	lsls	r3, r3, #10
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	8023      	strh	r3, [r4, #0]
 8009400:	e029      	b.n	8009456 <USB_EPStartXfer+0x156>
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	627b      	str	r3, [r7, #36]	; 0x24
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	f003 031f 	and.w	r3, r3, #31
 800940e:	2b00      	cmp	r3, #0
 8009410:	d102      	bne.n	8009418 <USB_EPStartXfer+0x118>
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	3b01      	subs	r3, #1
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	b29b      	uxth	r3, r3
 800941c:	029b      	lsls	r3, r3, #10
 800941e:	b29b      	uxth	r3, r3
 8009420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009428:	b29b      	uxth	r3, r3
 800942a:	8023      	strh	r3, [r4, #0]
 800942c:	e013      	b.n	8009456 <USB_EPStartXfer+0x156>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	785b      	ldrb	r3, [r3, #1]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d10f      	bne.n	8009456 <USB_EPStartXfer+0x156>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800943c:	b29b      	uxth	r3, r3
 800943e:	441c      	add	r4, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	00db      	lsls	r3, r3, #3
 8009446:	4423      	add	r3, r4
 8009448:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	b29a      	uxth	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	895b      	ldrh	r3, [r3, #10]
 800945a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800945c:	e063      	b.n	8009526 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	785b      	ldrb	r3, [r3, #1]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d148      	bne.n	80094f8 <USB_EPStartXfer+0x1f8>
 8009466:	687c      	ldr	r4, [r7, #4]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800946e:	b29b      	uxth	r3, r3
 8009470:	441c      	add	r4, r3
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	4423      	add	r3, r4
 800947a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800947e:	461c      	mov	r4, r3
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10e      	bne.n	80094a4 <USB_EPStartXfer+0x1a4>
 8009486:	8823      	ldrh	r3, [r4, #0]
 8009488:	b29b      	uxth	r3, r3
 800948a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800948e:	b29b      	uxth	r3, r3
 8009490:	8023      	strh	r3, [r4, #0]
 8009492:	8823      	ldrh	r3, [r4, #0]
 8009494:	b29b      	uxth	r3, r3
 8009496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800949a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800949e:	b29b      	uxth	r3, r3
 80094a0:	8023      	strh	r3, [r4, #0]
 80094a2:	e03d      	b.n	8009520 <USB_EPStartXfer+0x220>
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	2b3e      	cmp	r3, #62	; 0x3e
 80094a8:	d810      	bhi.n	80094cc <USB_EPStartXfer+0x1cc>
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	085b      	lsrs	r3, r3, #1
 80094ae:	623b      	str	r3, [r7, #32]
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <USB_EPStartXfer+0x1c0>
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	3301      	adds	r3, #1
 80094be:	623b      	str	r3, [r7, #32]
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	029b      	lsls	r3, r3, #10
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	8023      	strh	r3, [r4, #0]
 80094ca:	e029      	b.n	8009520 <USB_EPStartXfer+0x220>
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	095b      	lsrs	r3, r3, #5
 80094d0:	623b      	str	r3, [r7, #32]
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	f003 031f 	and.w	r3, r3, #31
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <USB_EPStartXfer+0x1e2>
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	3b01      	subs	r3, #1
 80094e0:	623b      	str	r3, [r7, #32]
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	029b      	lsls	r3, r3, #10
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	8023      	strh	r3, [r4, #0]
 80094f6:	e013      	b.n	8009520 <USB_EPStartXfer+0x220>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d10f      	bne.n	8009520 <USB_EPStartXfer+0x220>
 8009500:	687c      	ldr	r4, [r7, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009508:	b29b      	uxth	r3, r3
 800950a:	441c      	add	r4, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	4423      	add	r3, r4
 8009514:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009518:	461c      	mov	r4, r3
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	b29b      	uxth	r3, r3
 800951e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	891b      	ldrh	r3, [r3, #8]
 8009524:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	6959      	ldr	r1, [r3, #20]
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	b29b      	uxth	r3, r3
 800952e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 faba 	bl	8009aaa <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d115      	bne.n	800956a <USB_EPStartXfer+0x26a>
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009554:	b29c      	uxth	r4, r3
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	441a      	add	r2, r3
 8009560:	4b9a      	ldr	r3, [pc, #616]	; (80097cc <USB_EPStartXfer+0x4cc>)
 8009562:	4323      	orrs	r3, r4
 8009564:	b29b      	uxth	r3, r3
 8009566:	8013      	strh	r3, [r2, #0]
 8009568:	e018      	b.n	800959c <USB_EPStartXfer+0x29c>
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d114      	bne.n	800959c <USB_EPStartXfer+0x29c>
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	4413      	add	r3, r2
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	b29b      	uxth	r3, r3
 8009580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009588:	b29c      	uxth	r4, r3
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	441a      	add	r2, r3
 8009594:	4b8e      	ldr	r3, [pc, #568]	; (80097d0 <USB_EPStartXfer+0x4d0>)
 8009596:	4323      	orrs	r3, r4
 8009598:	b29b      	uxth	r3, r3
 800959a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095b2:	b29c      	uxth	r4, r3
 80095b4:	f084 0310 	eor.w	r3, r4, #16
 80095b8:	b29c      	uxth	r4, r3
 80095ba:	f084 0320 	eor.w	r3, r4, #32
 80095be:	b29c      	uxth	r4, r3
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	441a      	add	r2, r3
 80095ca:	4b82      	ldr	r3, [pc, #520]	; (80097d4 <USB_EPStartXfer+0x4d4>)
 80095cc:	4323      	orrs	r3, r4
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	8013      	strh	r3, [r2, #0]
 80095d2:	e146      	b.n	8009862 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	699a      	ldr	r2, [r3, #24]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d909      	bls.n	80095f4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	699a      	ldr	r2, [r3, #24]
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	1ad2      	subs	r2, r2, r3
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	619a      	str	r2, [r3, #24]
 80095f2:	e005      	b.n	8009600 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2200      	movs	r2, #0
 80095fe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	7b1b      	ldrb	r3, [r3, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d148      	bne.n	800969a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009608:	687c      	ldr	r4, [r7, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009610:	b29b      	uxth	r3, r3
 8009612:	441c      	add	r4, r3
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	00db      	lsls	r3, r3, #3
 800961a:	4423      	add	r3, r4
 800961c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009620:	461c      	mov	r4, r3
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10e      	bne.n	8009646 <USB_EPStartXfer+0x346>
 8009628:	8823      	ldrh	r3, [r4, #0]
 800962a:	b29b      	uxth	r3, r3
 800962c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009630:	b29b      	uxth	r3, r3
 8009632:	8023      	strh	r3, [r4, #0]
 8009634:	8823      	ldrh	r3, [r4, #0]
 8009636:	b29b      	uxth	r3, r3
 8009638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800963c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009640:	b29b      	uxth	r3, r3
 8009642:	8023      	strh	r3, [r4, #0]
 8009644:	e0f2      	b.n	800982c <USB_EPStartXfer+0x52c>
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	2b3e      	cmp	r3, #62	; 0x3e
 800964a:	d810      	bhi.n	800966e <USB_EPStartXfer+0x36e>
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	085b      	lsrs	r3, r3, #1
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <USB_EPStartXfer+0x362>
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	3301      	adds	r3, #1
 8009660:	61fb      	str	r3, [r7, #28]
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	b29b      	uxth	r3, r3
 8009666:	029b      	lsls	r3, r3, #10
 8009668:	b29b      	uxth	r3, r3
 800966a:	8023      	strh	r3, [r4, #0]
 800966c:	e0de      	b.n	800982c <USB_EPStartXfer+0x52c>
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	095b      	lsrs	r3, r3, #5
 8009672:	61fb      	str	r3, [r7, #28]
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	f003 031f 	and.w	r3, r3, #31
 800967a:	2b00      	cmp	r3, #0
 800967c:	d102      	bne.n	8009684 <USB_EPStartXfer+0x384>
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	3b01      	subs	r3, #1
 8009682:	61fb      	str	r3, [r7, #28]
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	b29b      	uxth	r3, r3
 8009688:	029b      	lsls	r3, r3, #10
 800968a:	b29b      	uxth	r3, r3
 800968c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009694:	b29b      	uxth	r3, r3
 8009696:	8023      	strh	r3, [r4, #0]
 8009698:	e0c8      	b.n	800982c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	785b      	ldrb	r3, [r3, #1]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d148      	bne.n	8009734 <USB_EPStartXfer+0x434>
 80096a2:	687c      	ldr	r4, [r7, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	441c      	add	r4, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	4423      	add	r3, r4
 80096b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096ba:	461c      	mov	r4, r3
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10e      	bne.n	80096e0 <USB_EPStartXfer+0x3e0>
 80096c2:	8823      	ldrh	r3, [r4, #0]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	8023      	strh	r3, [r4, #0]
 80096ce:	8823      	ldrh	r3, [r4, #0]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096da:	b29b      	uxth	r3, r3
 80096dc:	8023      	strh	r3, [r4, #0]
 80096de:	e03d      	b.n	800975c <USB_EPStartXfer+0x45c>
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	2b3e      	cmp	r3, #62	; 0x3e
 80096e4:	d810      	bhi.n	8009708 <USB_EPStartXfer+0x408>
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	085b      	lsrs	r3, r3, #1
 80096ea:	61bb      	str	r3, [r7, #24]
 80096ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <USB_EPStartXfer+0x3fc>
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	3301      	adds	r3, #1
 80096fa:	61bb      	str	r3, [r7, #24]
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	029b      	lsls	r3, r3, #10
 8009702:	b29b      	uxth	r3, r3
 8009704:	8023      	strh	r3, [r4, #0]
 8009706:	e029      	b.n	800975c <USB_EPStartXfer+0x45c>
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	61bb      	str	r3, [r7, #24]
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	f003 031f 	and.w	r3, r3, #31
 8009714:	2b00      	cmp	r3, #0
 8009716:	d102      	bne.n	800971e <USB_EPStartXfer+0x41e>
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	3b01      	subs	r3, #1
 800971c:	61bb      	str	r3, [r7, #24]
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	b29b      	uxth	r3, r3
 8009722:	029b      	lsls	r3, r3, #10
 8009724:	b29b      	uxth	r3, r3
 8009726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800972a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800972e:	b29b      	uxth	r3, r3
 8009730:	8023      	strh	r3, [r4, #0]
 8009732:	e013      	b.n	800975c <USB_EPStartXfer+0x45c>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d10f      	bne.n	800975c <USB_EPStartXfer+0x45c>
 800973c:	687c      	ldr	r4, [r7, #4]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009744:	b29b      	uxth	r3, r3
 8009746:	441c      	add	r4, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	4423      	add	r3, r4
 8009750:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009754:	461c      	mov	r4, r3
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	b29b      	uxth	r3, r3
 800975a:	8023      	strh	r3, [r4, #0]
 800975c:	687c      	ldr	r4, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	785b      	ldrb	r3, [r3, #1]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d14e      	bne.n	8009804 <USB_EPStartXfer+0x504>
 8009766:	687c      	ldr	r4, [r7, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800976e:	b29b      	uxth	r3, r3
 8009770:	441c      	add	r4, r3
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	4423      	add	r3, r4
 800977a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800977e:	461c      	mov	r4, r3
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10e      	bne.n	80097a4 <USB_EPStartXfer+0x4a4>
 8009786:	8823      	ldrh	r3, [r4, #0]
 8009788:	b29b      	uxth	r3, r3
 800978a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800978e:	b29b      	uxth	r3, r3
 8009790:	8023      	strh	r3, [r4, #0]
 8009792:	8823      	ldrh	r3, [r4, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800979a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800979e:	b29b      	uxth	r3, r3
 80097a0:	8023      	strh	r3, [r4, #0]
 80097a2:	e043      	b.n	800982c <USB_EPStartXfer+0x52c>
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	2b3e      	cmp	r3, #62	; 0x3e
 80097a8:	d816      	bhi.n	80097d8 <USB_EPStartXfer+0x4d8>
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	085b      	lsrs	r3, r3, #1
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <USB_EPStartXfer+0x4c0>
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	3301      	adds	r3, #1
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	029b      	lsls	r3, r3, #10
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	8023      	strh	r3, [r4, #0]
 80097ca:	e02f      	b.n	800982c <USB_EPStartXfer+0x52c>
 80097cc:	ffff80c0 	.word	0xffff80c0
 80097d0:	ffffc080 	.word	0xffffc080
 80097d4:	ffff8080 	.word	0xffff8080
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	095b      	lsrs	r3, r3, #5
 80097dc:	617b      	str	r3, [r7, #20]
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	f003 031f 	and.w	r3, r3, #31
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d102      	bne.n	80097ee <USB_EPStartXfer+0x4ee>
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	029b      	lsls	r3, r3, #10
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097fe:	b29b      	uxth	r3, r3
 8009800:	8023      	strh	r3, [r4, #0]
 8009802:	e013      	b.n	800982c <USB_EPStartXfer+0x52c>
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	785b      	ldrb	r3, [r3, #1]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d10f      	bne.n	800982c <USB_EPStartXfer+0x52c>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009812:	b29b      	uxth	r3, r3
 8009814:	441c      	add	r4, r3
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	4423      	add	r3, r4
 800981e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	b29a      	uxth	r2, r3
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	b29b      	uxth	r3, r3
 800983a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800983e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009842:	b29c      	uxth	r4, r3
 8009844:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009848:	b29c      	uxth	r4, r3
 800984a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800984e:	b29c      	uxth	r4, r3
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	441a      	add	r2, r3
 800985a:	4b04      	ldr	r3, [pc, #16]	; (800986c <USB_EPStartXfer+0x56c>)
 800985c:	4323      	orrs	r3, r4
 800985e:	b29b      	uxth	r3, r3
 8009860:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3734      	adds	r7, #52	; 0x34
 8009868:	46bd      	mov	sp, r7
 800986a:	bd90      	pop	{r4, r7, pc}
 800986c:	ffff8080 	.word	0xffff8080

08009870 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009870:	b490      	push	{r4, r7}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	785b      	ldrb	r3, [r3, #1]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d018      	beq.n	80098b4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	b29b      	uxth	r3, r3
 8009890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009898:	b29c      	uxth	r4, r3
 800989a:	f084 0310 	eor.w	r3, r4, #16
 800989e:	b29c      	uxth	r4, r3
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	441a      	add	r2, r3
 80098aa:	4b11      	ldr	r3, [pc, #68]	; (80098f0 <USB_EPSetStall+0x80>)
 80098ac:	4323      	orrs	r3, r4
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	8013      	strh	r3, [r2, #0]
 80098b2:	e017      	b.n	80098e4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ca:	b29c      	uxth	r4, r3
 80098cc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80098d0:	b29c      	uxth	r4, r3
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	441a      	add	r2, r3
 80098dc:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <USB_EPSetStall+0x80>)
 80098de:	4323      	orrs	r3, r4
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bc90      	pop	{r4, r7}
 80098ee:	4770      	bx	lr
 80098f0:	ffff8080 	.word	0xffff8080

080098f4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098f4:	b490      	push	{r4, r7}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	7b1b      	ldrb	r3, [r3, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d17d      	bne.n	8009a02 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	785b      	ldrb	r3, [r3, #1]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d03d      	beq.n	800998a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	b29c      	uxth	r4, r3
 800991c:	4623      	mov	r3, r4
 800991e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009922:	2b00      	cmp	r3, #0
 8009924:	d014      	beq.n	8009950 <USB_EPClearStall+0x5c>
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993c:	b29c      	uxth	r4, r3
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	441a      	add	r2, r3
 8009948:	4b31      	ldr	r3, [pc, #196]	; (8009a10 <USB_EPClearStall+0x11c>)
 800994a:	4323      	orrs	r3, r4
 800994c:	b29b      	uxth	r3, r3
 800994e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	78db      	ldrb	r3, [r3, #3]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d054      	beq.n	8009a02 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	b29b      	uxth	r3, r3
 8009966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800996a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800996e:	b29c      	uxth	r4, r3
 8009970:	f084 0320 	eor.w	r3, r4, #32
 8009974:	b29c      	uxth	r4, r3
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	441a      	add	r2, r3
 8009980:	4b24      	ldr	r3, [pc, #144]	; (8009a14 <USB_EPClearStall+0x120>)
 8009982:	4323      	orrs	r3, r4
 8009984:	b29b      	uxth	r3, r3
 8009986:	8013      	strh	r3, [r2, #0]
 8009988:	e03b      	b.n	8009a02 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	b29c      	uxth	r4, r3
 8009998:	4623      	mov	r3, r4
 800999a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d014      	beq.n	80099cc <USB_EPClearStall+0xd8>
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b8:	b29c      	uxth	r4, r3
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	441a      	add	r2, r3
 80099c4:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <USB_EPClearStall+0x124>)
 80099c6:	4323      	orrs	r3, r4
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	b29c      	uxth	r4, r3
 80099e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80099e8:	b29c      	uxth	r4, r3
 80099ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80099ee:	b29c      	uxth	r4, r3
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	441a      	add	r2, r3
 80099fa:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <USB_EPClearStall+0x120>)
 80099fc:	4323      	orrs	r3, r4
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bc90      	pop	{r4, r7}
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	ffff80c0 	.word	0xffff80c0
 8009a14:	ffff8080 	.word	0xffff8080
 8009a18:	ffffc080 	.word	0xffffc080

08009a1c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d103      	bne.n	8009a36 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2280      	movs	r2, #128	; 0x80
 8009a32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b085      	sub	sp, #20
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a84:	68fb      	ldr	r3, [r7, #12]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b08d      	sub	sp, #52	; 0x34
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	60b9      	str	r1, [r7, #8]
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	460b      	mov	r3, r1
 8009aba:	80fb      	strh	r3, [r7, #6]
 8009abc:	4613      	mov	r3, r2
 8009abe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009ac0:	88bb      	ldrh	r3, [r7, #4]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	085b      	lsrs	r3, r3, #1
 8009ac6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ad0:	88fa      	ldrh	r2, [r7, #6]
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ada:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ae0:	e01b      	b.n	8009b1a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	3301      	adds	r3, #1
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	021b      	lsls	r3, r3, #8
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	461a      	mov	r2, r3
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b06:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	3302      	adds	r3, #2
 8009b0c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	3301      	adds	r3, #1
 8009b12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b16:	3b01      	subs	r3, #1
 8009b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e0      	bne.n	8009ae2 <USB_WritePMA+0x38>
  }
}
 8009b20:	bf00      	nop
 8009b22:	3734      	adds	r7, #52	; 0x34
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b08b      	sub	sp, #44	; 0x2c
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	4611      	mov	r1, r2
 8009b38:	461a      	mov	r2, r3
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	80fb      	strh	r3, [r7, #6]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b42:	88bb      	ldrh	r3, [r7, #4]
 8009b44:	085b      	lsrs	r3, r3, #1
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b52:	88fa      	ldrh	r2, [r7, #6]
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b5c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	627b      	str	r3, [r7, #36]	; 0x24
 8009b62:	e018      	b.n	8009b96 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	3302      	adds	r3, #2
 8009b70:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	0a1b      	lsrs	r3, r3, #8
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	3b01      	subs	r3, #1
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e3      	bne.n	8009b64 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009b9c:	88bb      	ldrh	r3, [r7, #4]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d007      	beq.n	8009bb8 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	701a      	strb	r2, [r3, #0]
  }
}
 8009bb8:	bf00      	nop
 8009bba:	372c      	adds	r7, #44	; 0x2c
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	7c1b      	ldrb	r3, [r3, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d115      	bne.n	8009c08 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009be0:	2202      	movs	r2, #2
 8009be2:	2181      	movs	r1, #129	; 0x81
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 fe5e 	bl	800b8a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 fe54 	bl	800b8a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009c06:	e012      	b.n	8009c2e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c08:	2340      	movs	r3, #64	; 0x40
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	2181      	movs	r1, #129	; 0x81
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 fe49 	bl	800b8a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c1a:	2340      	movs	r3, #64	; 0x40
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	2101      	movs	r1, #1
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f001 fe40 	bl	800b8a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c2e:	2308      	movs	r3, #8
 8009c30:	2203      	movs	r2, #3
 8009c32:	2182      	movs	r1, #130	; 0x82
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 fe36 	bl	800b8a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009c44:	f001 ff86 	bl	800bb54 <USBD_static_malloc>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	73fb      	strb	r3, [r7, #15]
 8009c5e:	e026      	b.n	8009cae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c66:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	7c1b      	ldrb	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c94:	2101      	movs	r1, #1
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 fef0 	bl	800ba7c <USBD_LL_PrepareReceive>
 8009c9c:	e007      	b.n	8009cae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ca4:	2340      	movs	r3, #64	; 0x40
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 fee7 	bl	800ba7c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009cc8:	2181      	movs	r1, #129	; 0x81
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 fe11 	bl	800b8f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f001 fe0a 	bl	800b8f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ce6:	2182      	movs	r1, #130	; 0x82
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 fe02 	bl	800b8f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00e      	beq.n	8009d1c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 ff2e 	bl	800bb70 <USBD_static_free>
    pdev->pClassData = NULL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b086      	sub	sp, #24
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d36:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d039      	beq.n	8009dc4 <USBD_CDC_Setup+0x9e>
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d17c      	bne.n	8009e4e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	88db      	ldrh	r3, [r3, #6]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d029      	beq.n	8009db0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	b25b      	sxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	da11      	bge.n	8009d8a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009d72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	88d2      	ldrh	r2, [r2, #6]
 8009d78:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009d7a:	6939      	ldr	r1, [r7, #16]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	88db      	ldrh	r3, [r3, #6]
 8009d80:	461a      	mov	r2, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f001 f9fa 	bl	800b17c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009d88:	e068      	b.n	8009e5c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	785a      	ldrb	r2, [r3, #1]
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	88db      	ldrh	r3, [r3, #6]
 8009d98:	b2da      	uxtb	r2, r3
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009da0:	6939      	ldr	r1, [r7, #16]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	88db      	ldrh	r3, [r3, #6]
 8009da6:	461a      	mov	r2, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 fa15 	bl	800b1d8 <USBD_CtlPrepareRx>
      break;
 8009dae:	e055      	b.n	8009e5c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	7850      	ldrb	r0, [r2, #1]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	4798      	blx	r3
      break;
 8009dc2:	e04b      	b.n	8009e5c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	785b      	ldrb	r3, [r3, #1]
 8009dc8:	2b0a      	cmp	r3, #10
 8009dca:	d017      	beq.n	8009dfc <USBD_CDC_Setup+0xd6>
 8009dcc:	2b0b      	cmp	r3, #11
 8009dce:	d029      	beq.n	8009e24 <USBD_CDC_Setup+0xfe>
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d133      	bne.n	8009e3c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d107      	bne.n	8009dee <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009dde:	f107 030c 	add.w	r3, r7, #12
 8009de2:	2202      	movs	r2, #2
 8009de4:	4619      	mov	r1, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f001 f9c8 	bl	800b17c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009dec:	e02e      	b.n	8009e4c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 f958 	bl	800b0a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009df6:	2302      	movs	r3, #2
 8009df8:	75fb      	strb	r3, [r7, #23]
          break;
 8009dfa:	e027      	b.n	8009e4c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d107      	bne.n	8009e16 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e06:	f107 030f 	add.w	r3, r7, #15
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 f9b4 	bl	800b17c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e14:	e01a      	b.n	8009e4c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 f944 	bl	800b0a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e1e:	2302      	movs	r3, #2
 8009e20:	75fb      	strb	r3, [r7, #23]
          break;
 8009e22:	e013      	b.n	8009e4c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d00d      	beq.n	8009e4a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 f938 	bl	800b0a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e36:	2302      	movs	r3, #2
 8009e38:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e3a:	e006      	b.n	8009e4a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f001 f931 	bl	800b0a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e44:	2302      	movs	r3, #2
 8009e46:	75fb      	strb	r3, [r7, #23]
          break;
 8009e48:	e000      	b.n	8009e4c <USBD_CDC_Setup+0x126>
          break;
 8009e4a:	bf00      	nop
      }
      break;
 8009e4c:	e006      	b.n	8009e5c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 f928 	bl	800b0a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009e56:	2302      	movs	r3, #2
 8009e58:	75fb      	strb	r3, [r7, #23]
      break;
 8009e5a:	bf00      	nop
  }

  return ret;
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e78:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e80:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d037      	beq.n	8009efc <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009e8c:	78fa      	ldrb	r2, [r7, #3]
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	4613      	mov	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	440b      	add	r3, r1
 8009e9a:	331c      	adds	r3, #28
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d026      	beq.n	8009ef0 <USBD_CDC_DataIn+0x8a>
 8009ea2:	78fa      	ldrb	r2, [r7, #3]
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	331c      	adds	r3, #28
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	78fa      	ldrb	r2, [r7, #3]
 8009eb6:	68b9      	ldr	r1, [r7, #8]
 8009eb8:	0152      	lsls	r2, r2, #5
 8009eba:	440a      	add	r2, r1
 8009ebc:	3238      	adds	r2, #56	; 0x38
 8009ebe:	6812      	ldr	r2, [r2, #0]
 8009ec0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ec4:	fb02 f201 	mul.w	r2, r2, r1
 8009ec8:	1a9b      	subs	r3, r3, r2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d110      	bne.n	8009ef0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009ece:	78fa      	ldrb	r2, [r7, #3]
 8009ed0:	6879      	ldr	r1, [r7, #4]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	440b      	add	r3, r1
 8009edc:	331c      	adds	r3, #28
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ee2:	78f9      	ldrb	r1, [r7, #3]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 fda4 	bl	800ba36 <USBD_LL_Transmit>
 8009eee:	e003      	b.n	8009ef8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e000      	b.n	8009efe <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009efc:	2302      	movs	r3, #2
  }
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f18:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f1a:	78fb      	ldrb	r3, [r7, #3]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 fdcf 	bl	800bac2 <USBD_LL_GetRxDataSize>
 8009f24:	4602      	mov	r2, r0
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00d      	beq.n	8009f52 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4798      	blx	r3

    return USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e000      	b.n	8009f54 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009f52:	2302      	movs	r3, #2
  }
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d015      	beq.n	8009fa2 <USBD_CDC_EP0_RxReady+0x46>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f7c:	2bff      	cmp	r3, #255	; 0xff
 8009f7e:	d010      	beq.n	8009fa2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009f8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009f96:	b292      	uxth	r2, r2
 8009f98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	22ff      	movs	r2, #255	; 0xff
 8009f9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2243      	movs	r2, #67	; 0x43
 8009fb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009fba:	4b03      	ldr	r3, [pc, #12]	; (8009fc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	20000094 	.word	0x20000094

08009fcc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2243      	movs	r2, #67	; 0x43
 8009fd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009fda:	4b03      	ldr	r3, [pc, #12]	; (8009fe8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	20000050 	.word	0x20000050

08009fec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2243      	movs	r2, #67	; 0x43
 8009ff8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009ffa:	4b03      	ldr	r3, [pc, #12]	; (800a008 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	200000d8 	.word	0x200000d8

0800a00c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	220a      	movs	r2, #10
 800a018:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a01a:	4b03      	ldr	r3, [pc, #12]	; (800a028 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	2000000c 	.word	0x2000000c

0800a02c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a036:	2302      	movs	r3, #2
 800a038:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b087      	sub	sp, #28
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	4613      	mov	r3, r2
 800a066:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a078:	88fa      	ldrh	r2, [r7, #6]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	371c      	adds	r7, #28
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a08e:	b480      	push	{r7}
 800a090:	b085      	sub	sp, #20
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d017      	beq.n	800a100 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	7c1b      	ldrb	r3, [r3, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d109      	bne.n	800a0ec <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f001 fcc9 	bl	800ba7c <USBD_LL_PrepareReceive>
 800a0ea:	e007      	b.n	800a0fc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0f2:	2340      	movs	r3, #64	; 0x40
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f001 fcc0 	bl	800ba7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	e000      	b.n	800a102 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a100:	2302      	movs	r3, #2
  }
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	60b9      	str	r1, [r7, #8]
 800a114:	4613      	mov	r3, r2
 800a116:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a11e:	2302      	movs	r3, #2
 800a120:	e01a      	b.n	800a158 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	79fa      	ldrb	r2, [r7, #7]
 800a14e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f001 fb2d 	bl	800b7b0 <USBD_LL_Init>

  return USBD_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d006      	beq.n	800a182 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	73fb      	strb	r3, [r7, #15]
 800a180:	e001      	b.n	800a186 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a182:	2302      	movs	r3, #2
 800a184:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f001 fb67 	bl	800b870 <USBD_LL_Start>

  return USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00c      	beq.n	800a1f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	78fa      	ldrb	r2, [r7, #3]
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	4798      	blx	r3
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	78fa      	ldrb	r2, [r7, #3]
 800a216:	4611      	mov	r1, r2
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	4798      	blx	r3

  return USBD_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 fef7 	bl	800b02c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a24c:	461a      	mov	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a25a:	f003 031f 	and.w	r3, r3, #31
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d00c      	beq.n	800a27c <USBD_LL_SetupStage+0x56>
 800a262:	2b01      	cmp	r3, #1
 800a264:	d302      	bcc.n	800a26c <USBD_LL_SetupStage+0x46>
 800a266:	2b02      	cmp	r3, #2
 800a268:	d010      	beq.n	800a28c <USBD_LL_SetupStage+0x66>
 800a26a:	e017      	b.n	800a29c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a272:	4619      	mov	r1, r3
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f9cd 	bl	800a614 <USBD_StdDevReq>
      break;
 800a27a:	e01a      	b.n	800a2b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fa2f 	bl	800a6e8 <USBD_StdItfReq>
      break;
 800a28a:	e012      	b.n	800a2b2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fa6d 	bl	800a774 <USBD_StdEPReq>
      break;
 800a29a:	e00a      	b.n	800a2b2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a2a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f001 fb40 	bl	800b930 <USBD_LL_StallEP>
      break;
 800a2b0:	bf00      	nop
  }

  return USBD_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d14b      	bne.n	800a368 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a2d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d134      	bne.n	800a34c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	68da      	ldr	r2, [r3, #12]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d919      	bls.n	800a322 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	68da      	ldr	r2, [r3, #12]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	1ad2      	subs	r2, r2, r3
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	68da      	ldr	r2, [r3, #12]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a304:	429a      	cmp	r2, r3
 800a306:	d203      	bcs.n	800a310 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	e002      	b.n	800a316 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a314:	b29b      	uxth	r3, r3
 800a316:	461a      	mov	r2, r3
 800a318:	6879      	ldr	r1, [r7, #4]
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 ff7a 	bl	800b214 <USBD_CtlContinueRx>
 800a320:	e038      	b.n	800a394 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a334:	2b03      	cmp	r3, #3
 800a336:	d105      	bne.n	800a344 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f000 ff77 	bl	800b238 <USBD_CtlSendStatus>
 800a34a:	e023      	b.n	800a394 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a352:	2b05      	cmp	r3, #5
 800a354:	d11e      	bne.n	800a394 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a35e:	2100      	movs	r1, #0
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f001 fae5 	bl	800b930 <USBD_LL_StallEP>
 800a366:	e015      	b.n	800a394 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00d      	beq.n	800a390 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d108      	bne.n	800a390 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	7afa      	ldrb	r2, [r7, #11]
 800a388:	4611      	mov	r1, r2
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	4798      	blx	r3
 800a38e:	e001      	b.n	800a394 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a390:	2302      	movs	r3, #2
 800a392:	e000      	b.n	800a396 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b086      	sub	sp, #24
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	60f8      	str	r0, [r7, #12]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	607a      	str	r2, [r7, #4]
 800a3aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a3ac:	7afb      	ldrb	r3, [r7, #11]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d17f      	bne.n	800a4b2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3314      	adds	r3, #20
 800a3b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d15c      	bne.n	800a47c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	68da      	ldr	r2, [r3, #12]
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d915      	bls.n	800a3fa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	1ad2      	subs	r2, r2, r3
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f000 fee4 	bl	800b1b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f001 fb42 	bl	800ba7c <USBD_LL_PrepareReceive>
 800a3f8:	e04e      	b.n	800a498 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	6912      	ldr	r2, [r2, #16]
 800a402:	fbb3 f1f2 	udiv	r1, r3, r2
 800a406:	fb02 f201 	mul.w	r2, r2, r1
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d11c      	bne.n	800a44a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a418:	429a      	cmp	r2, r3
 800a41a:	d316      	bcc.n	800a44a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a426:	429a      	cmp	r2, r3
 800a428:	d20f      	bcs.n	800a44a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a42a:	2200      	movs	r2, #0
 800a42c:	2100      	movs	r1, #0
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 fec0 	bl	800b1b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a43c:	2300      	movs	r3, #0
 800a43e:	2200      	movs	r2, #0
 800a440:	2100      	movs	r1, #0
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f001 fb1a 	bl	800ba7c <USBD_LL_PrepareReceive>
 800a448:	e026      	b.n	800a498 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d105      	bne.n	800a46c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a46c:	2180      	movs	r1, #128	; 0x80
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f001 fa5e 	bl	800b930 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f000 fef2 	bl	800b25e <USBD_CtlReceiveStatus>
 800a47a:	e00d      	b.n	800a498 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a482:	2b04      	cmp	r3, #4
 800a484:	d004      	beq.n	800a490 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d103      	bne.n	800a498 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a490:	2180      	movs	r1, #128	; 0x80
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f001 fa4c 	bl	800b930 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d11d      	bne.n	800a4de <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7ff fe82 	bl	800a1ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a4b0:	e015      	b.n	800a4de <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00d      	beq.n	800a4da <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d108      	bne.n	800a4da <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	7afa      	ldrb	r2, [r7, #11]
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	4798      	blx	r3
 800a4d8:	e001      	b.n	800a4de <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a4da:	2302      	movs	r3, #2
 800a4dc:	e000      	b.n	800a4e0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4f0:	2340      	movs	r3, #64	; 0x40
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f001 f9d5 	bl	800b8a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2240      	movs	r2, #64	; 0x40
 800a508:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	2200      	movs	r2, #0
 800a510:	2180      	movs	r1, #128	; 0x80
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f001 f9c7 	bl	800b8a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2240      	movs	r2, #64	; 0x40
 800a522:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d009      	beq.n	800a560 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	6852      	ldr	r2, [r2, #4]
 800a558:	b2d2      	uxtb	r2, r2
 800a55a:	4611      	mov	r1, r2
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	4798      	blx	r3
  }

  return USBD_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	460b      	mov	r3, r1
 800a574:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	78fa      	ldrb	r2, [r7, #3]
 800a57a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d105      	bne.n	800a5d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	d10b      	bne.n	800a60a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5f8:	69db      	ldr	r3, [r3, #28]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d005      	beq.n	800a60a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	d004      	beq.n	800a638 <USBD_StdDevReq+0x24>
 800a62e:	2b40      	cmp	r3, #64	; 0x40
 800a630:	d002      	beq.n	800a638 <USBD_StdDevReq+0x24>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d008      	beq.n	800a648 <USBD_StdDevReq+0x34>
 800a636:	e04c      	b.n	800a6d2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	4798      	blx	r3
      break;
 800a646:	e049      	b.n	800a6dc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	785b      	ldrb	r3, [r3, #1]
 800a64c:	2b09      	cmp	r3, #9
 800a64e:	d83a      	bhi.n	800a6c6 <USBD_StdDevReq+0xb2>
 800a650:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <USBD_StdDevReq+0x44>)
 800a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a6a9 	.word	0x0800a6a9
 800a65c:	0800a6bd 	.word	0x0800a6bd
 800a660:	0800a6c7 	.word	0x0800a6c7
 800a664:	0800a6b3 	.word	0x0800a6b3
 800a668:	0800a6c7 	.word	0x0800a6c7
 800a66c:	0800a68b 	.word	0x0800a68b
 800a670:	0800a681 	.word	0x0800a681
 800a674:	0800a6c7 	.word	0x0800a6c7
 800a678:	0800a69f 	.word	0x0800a69f
 800a67c:	0800a695 	.word	0x0800a695
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f9d4 	bl	800aa30 <USBD_GetDescriptor>
          break;
 800a688:	e022      	b.n	800a6d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fb61 	bl	800ad54 <USBD_SetAddress>
          break;
 800a692:	e01d      	b.n	800a6d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fb9e 	bl	800add8 <USBD_SetConfig>
          break;
 800a69c:	e018      	b.n	800a6d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fc27 	bl	800aef4 <USBD_GetConfig>
          break;
 800a6a6:	e013      	b.n	800a6d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fc56 	bl	800af5c <USBD_GetStatus>
          break;
 800a6b0:	e00e      	b.n	800a6d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fc84 	bl	800afc2 <USBD_SetFeature>
          break;
 800a6ba:	e009      	b.n	800a6d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fc93 	bl	800afea <USBD_ClrFeature>
          break;
 800a6c4:	e004      	b.n	800a6d0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fcec 	bl	800b0a6 <USBD_CtlError>
          break;
 800a6ce:	bf00      	nop
      }
      break;
 800a6d0:	e004      	b.n	800a6dc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fce6 	bl	800b0a6 <USBD_CtlError>
      break;
 800a6da:	bf00      	nop
  }

  return ret;
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop

0800a6e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6fe:	2b20      	cmp	r3, #32
 800a700:	d003      	beq.n	800a70a <USBD_StdItfReq+0x22>
 800a702:	2b40      	cmp	r3, #64	; 0x40
 800a704:	d001      	beq.n	800a70a <USBD_StdItfReq+0x22>
 800a706:	2b00      	cmp	r3, #0
 800a708:	d12a      	bne.n	800a760 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a710:	3b01      	subs	r3, #1
 800a712:	2b02      	cmp	r3, #2
 800a714:	d81d      	bhi.n	800a752 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	889b      	ldrh	r3, [r3, #4]
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d813      	bhi.n	800a748 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	4798      	blx	r3
 800a72e:	4603      	mov	r3, r0
 800a730:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	88db      	ldrh	r3, [r3, #6]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d110      	bne.n	800a75c <USBD_StdItfReq+0x74>
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10d      	bne.n	800a75c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fd79 	bl	800b238 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a746:	e009      	b.n	800a75c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fcab 	bl	800b0a6 <USBD_CtlError>
          break;
 800a750:	e004      	b.n	800a75c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fca6 	bl	800b0a6 <USBD_CtlError>
          break;
 800a75a:	e000      	b.n	800a75e <USBD_StdItfReq+0x76>
          break;
 800a75c:	bf00      	nop
      }
      break;
 800a75e:	e004      	b.n	800a76a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fc9f 	bl	800b0a6 <USBD_CtlError>
      break;
 800a768:	bf00      	nop
  }

  return USBD_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	889b      	ldrh	r3, [r3, #4]
 800a786:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a790:	2b20      	cmp	r3, #32
 800a792:	d004      	beq.n	800a79e <USBD_StdEPReq+0x2a>
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	d002      	beq.n	800a79e <USBD_StdEPReq+0x2a>
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d008      	beq.n	800a7ae <USBD_StdEPReq+0x3a>
 800a79c:	e13d      	b.n	800aa1a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
      break;
 800a7ac:	e13a      	b.n	800aa24 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7b6:	2b20      	cmp	r3, #32
 800a7b8:	d10a      	bne.n	800a7d0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	4798      	blx	r3
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
 800a7ce:	e12a      	b.n	800aa26 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	785b      	ldrb	r3, [r3, #1]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d03e      	beq.n	800a856 <USBD_StdEPReq+0xe2>
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d002      	beq.n	800a7e2 <USBD_StdEPReq+0x6e>
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d070      	beq.n	800a8c2 <USBD_StdEPReq+0x14e>
 800a7e0:	e115      	b.n	800aa0e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d002      	beq.n	800a7f2 <USBD_StdEPReq+0x7e>
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d015      	beq.n	800a81c <USBD_StdEPReq+0xa8>
 800a7f0:	e02b      	b.n	800a84a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7f2:	7bbb      	ldrb	r3, [r7, #14]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00c      	beq.n	800a812 <USBD_StdEPReq+0x9e>
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
 800a7fa:	2b80      	cmp	r3, #128	; 0x80
 800a7fc:	d009      	beq.n	800a812 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a7fe:	7bbb      	ldrb	r3, [r7, #14]
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 f894 	bl	800b930 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a808:	2180      	movs	r1, #128	; 0x80
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 f890 	bl	800b930 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a810:	e020      	b.n	800a854 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fc46 	bl	800b0a6 <USBD_CtlError>
              break;
 800a81a:	e01b      	b.n	800a854 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	885b      	ldrh	r3, [r3, #2]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10e      	bne.n	800a842 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00b      	beq.n	800a842 <USBD_StdEPReq+0xce>
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	2b80      	cmp	r3, #128	; 0x80
 800a82e:	d008      	beq.n	800a842 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	88db      	ldrh	r3, [r3, #6]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d104      	bne.n	800a842 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f001 f877 	bl	800b930 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fcf8 	bl	800b238 <USBD_CtlSendStatus>

              break;
 800a848:	e004      	b.n	800a854 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fc2a 	bl	800b0a6 <USBD_CtlError>
              break;
 800a852:	bf00      	nop
          }
          break;
 800a854:	e0e0      	b.n	800aa18 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d002      	beq.n	800a866 <USBD_StdEPReq+0xf2>
 800a860:	2b03      	cmp	r3, #3
 800a862:	d015      	beq.n	800a890 <USBD_StdEPReq+0x11c>
 800a864:	e026      	b.n	800a8b4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00c      	beq.n	800a886 <USBD_StdEPReq+0x112>
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	2b80      	cmp	r3, #128	; 0x80
 800a870:	d009      	beq.n	800a886 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 f85a 	bl	800b930 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a87c:	2180      	movs	r1, #128	; 0x80
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 f856 	bl	800b930 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a884:	e01c      	b.n	800a8c0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fc0c 	bl	800b0a6 <USBD_CtlError>
              break;
 800a88e:	e017      	b.n	800a8c0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	885b      	ldrh	r3, [r3, #2]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d112      	bne.n	800a8be <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d004      	beq.n	800a8ac <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f001 f861 	bl	800b96e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fcc3 	bl	800b238 <USBD_CtlSendStatus>
              }
              break;
 800a8b2:	e004      	b.n	800a8be <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fbf5 	bl	800b0a6 <USBD_CtlError>
              break;
 800a8bc:	e000      	b.n	800a8c0 <USBD_StdEPReq+0x14c>
              break;
 800a8be:	bf00      	nop
          }
          break;
 800a8c0:	e0aa      	b.n	800aa18 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d002      	beq.n	800a8d2 <USBD_StdEPReq+0x15e>
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d032      	beq.n	800a936 <USBD_StdEPReq+0x1c2>
 800a8d0:	e097      	b.n	800aa02 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d007      	beq.n	800a8e8 <USBD_StdEPReq+0x174>
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	2b80      	cmp	r3, #128	; 0x80
 800a8dc:	d004      	beq.n	800a8e8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fbe0 	bl	800b0a6 <USBD_CtlError>
                break;
 800a8e6:	e091      	b.n	800aa0c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	da0b      	bge.n	800a908 <USBD_StdEPReq+0x194>
 800a8f0:	7bbb      	ldrb	r3, [r7, #14]
 800a8f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	3310      	adds	r3, #16
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	4413      	add	r3, r2
 800a904:	3304      	adds	r3, #4
 800a906:	e00b      	b.n	800a920 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a908:	7bbb      	ldrb	r3, [r7, #14]
 800a90a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	4413      	add	r3, r2
 800a91e:	3304      	adds	r3, #4
 800a920:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2200      	movs	r2, #0
 800a926:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2202      	movs	r2, #2
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fc24 	bl	800b17c <USBD_CtlSendData>
              break;
 800a934:	e06a      	b.n	800aa0c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da11      	bge.n	800a962 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	f003 020f 	and.w	r2, r3, #15
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	4613      	mov	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	440b      	add	r3, r1
 800a950:	3318      	adds	r3, #24
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d117      	bne.n	800a988 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fba3 	bl	800b0a6 <USBD_CtlError>
                  break;
 800a960:	e054      	b.n	800aa0c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	f003 020f 	and.w	r2, r3, #15
 800a968:	6879      	ldr	r1, [r7, #4]
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	440b      	add	r3, r1
 800a974:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d104      	bne.n	800a988 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fb90 	bl	800b0a6 <USBD_CtlError>
                  break;
 800a986:	e041      	b.n	800aa0c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	da0b      	bge.n	800a9a8 <USBD_StdEPReq+0x234>
 800a990:	7bbb      	ldrb	r3, [r7, #14]
 800a992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a996:	4613      	mov	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	3310      	adds	r3, #16
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	e00b      	b.n	800a9c0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	4413      	add	r3, r2
 800a9be:	3304      	adds	r3, #4
 800a9c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9c2:	7bbb      	ldrb	r3, [r7, #14]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <USBD_StdEPReq+0x25a>
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	2b80      	cmp	r3, #128	; 0x80
 800a9cc:	d103      	bne.n	800a9d6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	e00e      	b.n	800a9f4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 ffe6 	bl	800b9ac <USBD_LL_IsStallEP>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	e002      	b.n	800a9f4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fbbe 	bl	800b17c <USBD_CtlSendData>
              break;
 800aa00:	e004      	b.n	800aa0c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800aa02:	6839      	ldr	r1, [r7, #0]
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fb4e 	bl	800b0a6 <USBD_CtlError>
              break;
 800aa0a:	bf00      	nop
          }
          break;
 800aa0c:	e004      	b.n	800aa18 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fb48 	bl	800b0a6 <USBD_CtlError>
          break;
 800aa16:	bf00      	nop
      }
      break;
 800aa18:	e004      	b.n	800aa24 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fb42 	bl	800b0a6 <USBD_CtlError>
      break;
 800aa22:	bf00      	nop
  }

  return ret;
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa42:	2300      	movs	r3, #0
 800aa44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	885b      	ldrh	r3, [r3, #2]
 800aa4a:	0a1b      	lsrs	r3, r3, #8
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	2b0e      	cmp	r3, #14
 800aa52:	f200 8152 	bhi.w	800acfa <USBD_GetDescriptor+0x2ca>
 800aa56:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <USBD_GetDescriptor+0x2c>)
 800aa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5c:	0800aacd 	.word	0x0800aacd
 800aa60:	0800aae5 	.word	0x0800aae5
 800aa64:	0800ab25 	.word	0x0800ab25
 800aa68:	0800acfb 	.word	0x0800acfb
 800aa6c:	0800acfb 	.word	0x0800acfb
 800aa70:	0800ac9b 	.word	0x0800ac9b
 800aa74:	0800acc7 	.word	0x0800acc7
 800aa78:	0800acfb 	.word	0x0800acfb
 800aa7c:	0800acfb 	.word	0x0800acfb
 800aa80:	0800acfb 	.word	0x0800acfb
 800aa84:	0800acfb 	.word	0x0800acfb
 800aa88:	0800acfb 	.word	0x0800acfb
 800aa8c:	0800acfb 	.word	0x0800acfb
 800aa90:	0800acfb 	.word	0x0800acfb
 800aa94:	0800aa99 	.word	0x0800aa99
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	7c12      	ldrb	r2, [r2, #16]
 800aab0:	f107 0108 	add.w	r1, r7, #8
 800aab4:	4610      	mov	r0, r2
 800aab6:	4798      	blx	r3
 800aab8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaba:	e126      	b.n	800ad0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 faf1 	bl	800b0a6 <USBD_CtlError>
        err++;
 800aac4:	7afb      	ldrb	r3, [r7, #11]
 800aac6:	3301      	adds	r3, #1
 800aac8:	72fb      	strb	r3, [r7, #11]
      break;
 800aaca:	e11e      	b.n	800ad0a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	7c12      	ldrb	r2, [r2, #16]
 800aad8:	f107 0108 	add.w	r1, r7, #8
 800aadc:	4610      	mov	r0, r2
 800aade:	4798      	blx	r3
 800aae0:	60f8      	str	r0, [r7, #12]
      break;
 800aae2:	e112      	b.n	800ad0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	7c1b      	ldrb	r3, [r3, #16]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10d      	bne.n	800ab08 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf4:	f107 0208 	add.w	r2, r7, #8
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
 800aafc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3301      	adds	r3, #1
 800ab02:	2202      	movs	r2, #2
 800ab04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab06:	e100      	b.n	800ad0a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab10:	f107 0208 	add.w	r2, r7, #8
 800ab14:	4610      	mov	r0, r2
 800ab16:	4798      	blx	r3
 800ab18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	2202      	movs	r2, #2
 800ab20:	701a      	strb	r2, [r3, #0]
      break;
 800ab22:	e0f2      	b.n	800ad0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	885b      	ldrh	r3, [r3, #2]
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b05      	cmp	r3, #5
 800ab2c:	f200 80ac 	bhi.w	800ac88 <USBD_GetDescriptor+0x258>
 800ab30:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <USBD_GetDescriptor+0x108>)
 800ab32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab36:	bf00      	nop
 800ab38:	0800ab51 	.word	0x0800ab51
 800ab3c:	0800ab85 	.word	0x0800ab85
 800ab40:	0800abb9 	.word	0x0800abb9
 800ab44:	0800abed 	.word	0x0800abed
 800ab48:	0800ac21 	.word	0x0800ac21
 800ab4c:	0800ac55 	.word	0x0800ac55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00b      	beq.n	800ab74 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	7c12      	ldrb	r2, [r2, #16]
 800ab68:	f107 0108 	add.w	r1, r7, #8
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4798      	blx	r3
 800ab70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab72:	e091      	b.n	800ac98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fa95 	bl	800b0a6 <USBD_CtlError>
            err++;
 800ab7c:	7afb      	ldrb	r3, [r7, #11]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	72fb      	strb	r3, [r7, #11]
          break;
 800ab82:	e089      	b.n	800ac98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	7c12      	ldrb	r2, [r2, #16]
 800ab9c:	f107 0108 	add.w	r1, r7, #8
 800aba0:	4610      	mov	r0, r2
 800aba2:	4798      	blx	r3
 800aba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aba6:	e077      	b.n	800ac98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fa7b 	bl	800b0a6 <USBD_CtlError>
            err++;
 800abb0:	7afb      	ldrb	r3, [r7, #11]
 800abb2:	3301      	adds	r3, #1
 800abb4:	72fb      	strb	r3, [r7, #11]
          break;
 800abb6:	e06f      	b.n	800ac98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00b      	beq.n	800abdc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	7c12      	ldrb	r2, [r2, #16]
 800abd0:	f107 0108 	add.w	r1, r7, #8
 800abd4:	4610      	mov	r0, r2
 800abd6:	4798      	blx	r3
 800abd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abda:	e05d      	b.n	800ac98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fa61 	bl	800b0a6 <USBD_CtlError>
            err++;
 800abe4:	7afb      	ldrb	r3, [r7, #11]
 800abe6:	3301      	adds	r3, #1
 800abe8:	72fb      	strb	r3, [r7, #11]
          break;
 800abea:	e055      	b.n	800ac98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00b      	beq.n	800ac10 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	7c12      	ldrb	r2, [r2, #16]
 800ac04:	f107 0108 	add.w	r1, r7, #8
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4798      	blx	r3
 800ac0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac0e:	e043      	b.n	800ac98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fa47 	bl	800b0a6 <USBD_CtlError>
            err++;
 800ac18:	7afb      	ldrb	r3, [r7, #11]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac1e:	e03b      	b.n	800ac98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00b      	beq.n	800ac44 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	7c12      	ldrb	r2, [r2, #16]
 800ac38:	f107 0108 	add.w	r1, r7, #8
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4798      	blx	r3
 800ac40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac42:	e029      	b.n	800ac98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fa2d 	bl	800b0a6 <USBD_CtlError>
            err++;
 800ac4c:	7afb      	ldrb	r3, [r7, #11]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	72fb      	strb	r3, [r7, #11]
          break;
 800ac52:	e021      	b.n	800ac98 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00b      	beq.n	800ac78 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	7c12      	ldrb	r2, [r2, #16]
 800ac6c:	f107 0108 	add.w	r1, r7, #8
 800ac70:	4610      	mov	r0, r2
 800ac72:	4798      	blx	r3
 800ac74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac76:	e00f      	b.n	800ac98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fa13 	bl	800b0a6 <USBD_CtlError>
            err++;
 800ac80:	7afb      	ldrb	r3, [r7, #11]
 800ac82:	3301      	adds	r3, #1
 800ac84:	72fb      	strb	r3, [r7, #11]
          break;
 800ac86:	e007      	b.n	800ac98 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fa0b 	bl	800b0a6 <USBD_CtlError>
          err++;
 800ac90:	7afb      	ldrb	r3, [r7, #11]
 800ac92:	3301      	adds	r3, #1
 800ac94:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ac96:	e038      	b.n	800ad0a <USBD_GetDescriptor+0x2da>
 800ac98:	e037      	b.n	800ad0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	7c1b      	ldrb	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d109      	bne.n	800acb6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acaa:	f107 0208 	add.w	r2, r7, #8
 800acae:	4610      	mov	r0, r2
 800acb0:	4798      	blx	r3
 800acb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acb4:	e029      	b.n	800ad0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f9f4 	bl	800b0a6 <USBD_CtlError>
        err++;
 800acbe:	7afb      	ldrb	r3, [r7, #11]
 800acc0:	3301      	adds	r3, #1
 800acc2:	72fb      	strb	r3, [r7, #11]
      break;
 800acc4:	e021      	b.n	800ad0a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	7c1b      	ldrb	r3, [r3, #16]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10d      	bne.n	800acea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd6:	f107 0208 	add.w	r2, r7, #8
 800acda:	4610      	mov	r0, r2
 800acdc:	4798      	blx	r3
 800acde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3301      	adds	r3, #1
 800ace4:	2207      	movs	r2, #7
 800ace6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ace8:	e00f      	b.n	800ad0a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f9da 	bl	800b0a6 <USBD_CtlError>
        err++;
 800acf2:	7afb      	ldrb	r3, [r7, #11]
 800acf4:	3301      	adds	r3, #1
 800acf6:	72fb      	strb	r3, [r7, #11]
      break;
 800acf8:	e007      	b.n	800ad0a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f9d2 	bl	800b0a6 <USBD_CtlError>
      err++;
 800ad02:	7afb      	ldrb	r3, [r7, #11]
 800ad04:	3301      	adds	r3, #1
 800ad06:	72fb      	strb	r3, [r7, #11]
      break;
 800ad08:	bf00      	nop
  }

  if (err != 0U)
 800ad0a:	7afb      	ldrb	r3, [r7, #11]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d11c      	bne.n	800ad4a <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ad10:	893b      	ldrh	r3, [r7, #8]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d011      	beq.n	800ad3a <USBD_GetDescriptor+0x30a>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	88db      	ldrh	r3, [r3, #6]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00d      	beq.n	800ad3a <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	88da      	ldrh	r2, [r3, #6]
 800ad22:	893b      	ldrh	r3, [r7, #8]
 800ad24:	4293      	cmp	r3, r2
 800ad26:	bf28      	it	cs
 800ad28:	4613      	movcs	r3, r2
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad2e:	893b      	ldrh	r3, [r7, #8]
 800ad30:	461a      	mov	r2, r3
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fa21 	bl	800b17c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	88db      	ldrh	r3, [r3, #6]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d104      	bne.n	800ad4c <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa78 	bl	800b238 <USBD_CtlSendStatus>
 800ad48:	e000      	b.n	800ad4c <USBD_GetDescriptor+0x31c>
    return;
 800ad4a:	bf00      	nop
    }
  }
}
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop

0800ad54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	889b      	ldrh	r3, [r3, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d130      	bne.n	800adc8 <USBD_SetAddress+0x74>
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	88db      	ldrh	r3, [r3, #6]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d12c      	bne.n	800adc8 <USBD_SetAddress+0x74>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	885b      	ldrh	r3, [r3, #2]
 800ad72:	2b7f      	cmp	r3, #127	; 0x7f
 800ad74:	d828      	bhi.n	800adc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	885b      	ldrh	r3, [r3, #2]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d104      	bne.n	800ad96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 f989 	bl	800b0a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad94:	e01c      	b.n	800add0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	7bfa      	ldrb	r2, [r7, #15]
 800ad9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fe28 	bl	800b9f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fa45 	bl	800b238 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d004      	beq.n	800adbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2202      	movs	r2, #2
 800adb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adbc:	e008      	b.n	800add0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc6:	e003      	b.n	800add0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f96b 	bl	800b0a6 <USBD_CtlError>
  }
}
 800add0:	bf00      	nop
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	885b      	ldrh	r3, [r3, #2]
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	4b41      	ldr	r3, [pc, #260]	; (800aef0 <USBD_SetConfig+0x118>)
 800adea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800adec:	4b40      	ldr	r3, [pc, #256]	; (800aef0 <USBD_SetConfig+0x118>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d904      	bls.n	800adfe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f955 	bl	800b0a6 <USBD_CtlError>
 800adfc:	e075      	b.n	800aeea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d002      	beq.n	800ae0e <USBD_SetConfig+0x36>
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d023      	beq.n	800ae54 <USBD_SetConfig+0x7c>
 800ae0c:	e062      	b.n	800aed4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ae0e:	4b38      	ldr	r3, [pc, #224]	; (800aef0 <USBD_SetConfig+0x118>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d01a      	beq.n	800ae4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ae16:	4b36      	ldr	r3, [pc, #216]	; (800aef0 <USBD_SetConfig+0x118>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2203      	movs	r2, #3
 800ae24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ae28:	4b31      	ldr	r3, [pc, #196]	; (800aef0 <USBD_SetConfig+0x118>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff f9c7 	bl	800a1c2 <USBD_SetClassConfig>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d104      	bne.n	800ae44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f932 	bl	800b0a6 <USBD_CtlError>
            return;
 800ae42:	e052      	b.n	800aeea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f9f7 	bl	800b238 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ae4a:	e04e      	b.n	800aeea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f9f3 	bl	800b238 <USBD_CtlSendStatus>
        break;
 800ae52:	e04a      	b.n	800aeea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ae54:	4b26      	ldr	r3, [pc, #152]	; (800aef0 <USBD_SetConfig+0x118>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d112      	bne.n	800ae82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ae64:	4b22      	ldr	r3, [pc, #136]	; (800aef0 <USBD_SetConfig+0x118>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ae6e:	4b20      	ldr	r3, [pc, #128]	; (800aef0 <USBD_SetConfig+0x118>)
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff f9c3 	bl	800a200 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f9dc 	bl	800b238 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ae80:	e033      	b.n	800aeea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ae82:	4b1b      	ldr	r3, [pc, #108]	; (800aef0 <USBD_SetConfig+0x118>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d01d      	beq.n	800aecc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7ff f9b1 	bl	800a200 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ae9e:	4b14      	ldr	r3, [pc, #80]	; (800aef0 <USBD_SetConfig+0x118>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aea8:	4b11      	ldr	r3, [pc, #68]	; (800aef0 <USBD_SetConfig+0x118>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff f987 	bl	800a1c2 <USBD_SetClassConfig>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d104      	bne.n	800aec4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f8f2 	bl	800b0a6 <USBD_CtlError>
            return;
 800aec2:	e012      	b.n	800aeea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f9b7 	bl	800b238 <USBD_CtlSendStatus>
        break;
 800aeca:	e00e      	b.n	800aeea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f9b3 	bl	800b238 <USBD_CtlSendStatus>
        break;
 800aed2:	e00a      	b.n	800aeea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f8e5 	bl	800b0a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aedc:	4b04      	ldr	r3, [pc, #16]	; (800aef0 <USBD_SetConfig+0x118>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff f98c 	bl	800a200 <USBD_ClrClassConfig>
        break;
 800aee8:	bf00      	nop
    }
  }
}
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	200001a4 	.word	0x200001a4

0800aef4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	88db      	ldrh	r3, [r3, #6]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d004      	beq.n	800af10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f8cc 	bl	800b0a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af0e:	e021      	b.n	800af54 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af16:	2b01      	cmp	r3, #1
 800af18:	db17      	blt.n	800af4a <USBD_GetConfig+0x56>
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	dd02      	ble.n	800af24 <USBD_GetConfig+0x30>
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d00b      	beq.n	800af3a <USBD_GetConfig+0x46>
 800af22:	e012      	b.n	800af4a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3308      	adds	r3, #8
 800af2e:	2201      	movs	r2, #1
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f922 	bl	800b17c <USBD_CtlSendData>
        break;
 800af38:	e00c      	b.n	800af54 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3304      	adds	r3, #4
 800af3e:	2201      	movs	r2, #1
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f91a 	bl	800b17c <USBD_CtlSendData>
        break;
 800af48:	e004      	b.n	800af54 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f8aa 	bl	800b0a6 <USBD_CtlError>
        break;
 800af52:	bf00      	nop
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6c:	3b01      	subs	r3, #1
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d81e      	bhi.n	800afb0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	88db      	ldrh	r3, [r3, #6]
 800af76:	2b02      	cmp	r3, #2
 800af78:	d004      	beq.n	800af84 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f892 	bl	800b0a6 <USBD_CtlError>
        break;
 800af82:	e01a      	b.n	800afba <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2201      	movs	r2, #1
 800af88:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af90:	2b00      	cmp	r3, #0
 800af92:	d005      	beq.n	800afa0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f043 0202 	orr.w	r2, r3, #2
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	330c      	adds	r3, #12
 800afa4:	2202      	movs	r2, #2
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f8e7 	bl	800b17c <USBD_CtlSendData>
      break;
 800afae:	e004      	b.n	800afba <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f877 	bl	800b0a6 <USBD_CtlError>
      break;
 800afb8:	bf00      	nop
  }
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b082      	sub	sp, #8
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	885b      	ldrh	r3, [r3, #2]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d106      	bne.n	800afe2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f92b 	bl	800b238 <USBD_CtlSendStatus>
  }
}
 800afe2:	bf00      	nop
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b082      	sub	sp, #8
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800affa:	3b01      	subs	r3, #1
 800affc:	2b02      	cmp	r3, #2
 800affe:	d80b      	bhi.n	800b018 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	885b      	ldrh	r3, [r3, #2]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d10c      	bne.n	800b022 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f911 	bl	800b238 <USBD_CtlSendStatus>
      }
      break;
 800b016:	e004      	b.n	800b022 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f843 	bl	800b0a6 <USBD_CtlError>
      break;
 800b020:	e000      	b.n	800b024 <USBD_ClrFeature+0x3a>
      break;
 800b022:	bf00      	nop
  }
}
 800b024:	bf00      	nop
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	781a      	ldrb	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	785a      	ldrb	r2, [r3, #1]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	3302      	adds	r3, #2
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	3303      	adds	r3, #3
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	b29b      	uxth	r3, r3
 800b056:	021b      	lsls	r3, r3, #8
 800b058:	b29b      	uxth	r3, r3
 800b05a:	4413      	add	r3, r2
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	3304      	adds	r3, #4
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	b29a      	uxth	r2, r3
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	3305      	adds	r3, #5
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	b29b      	uxth	r3, r3
 800b072:	021b      	lsls	r3, r3, #8
 800b074:	b29b      	uxth	r3, r3
 800b076:	4413      	add	r3, r2
 800b078:	b29a      	uxth	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	3306      	adds	r3, #6
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	b29a      	uxth	r2, r3
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	3307      	adds	r3, #7
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	021b      	lsls	r3, r3, #8
 800b090:	b29b      	uxth	r3, r3
 800b092:	4413      	add	r3, r2
 800b094:	b29a      	uxth	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	80da      	strh	r2, [r3, #6]

}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b082      	sub	sp, #8
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b0b0:	2180      	movs	r1, #128	; 0x80
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fc3c 	bl	800b930 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fc38 	bl	800b930 <USBD_LL_StallEP>
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d032      	beq.n	800b144 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f000 f834 	bl	800b14c <USBD_GetLen>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	005b      	lsls	r3, r3, #1
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	1c5a      	adds	r2, r3, #1
 800b0f6:	75fa      	strb	r2, [r7, #23]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	7812      	ldrb	r2, [r2, #0]
 800b102:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	1c5a      	adds	r2, r3, #1
 800b108:	75fa      	strb	r2, [r7, #23]
 800b10a:	461a      	mov	r2, r3
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	4413      	add	r3, r2
 800b110:	2203      	movs	r2, #3
 800b112:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b114:	e012      	b.n	800b13c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	60fa      	str	r2, [r7, #12]
 800b11c:	7dfa      	ldrb	r2, [r7, #23]
 800b11e:	1c51      	adds	r1, r2, #1
 800b120:	75f9      	strb	r1, [r7, #23]
 800b122:	4611      	mov	r1, r2
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	440a      	add	r2, r1
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	75fa      	strb	r2, [r7, #23]
 800b132:	461a      	mov	r2, r3
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	4413      	add	r3, r2
 800b138:	2200      	movs	r2, #0
 800b13a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1e8      	bne.n	800b116 <USBD_GetString+0x4e>
    }
  }
}
 800b144:	bf00      	nop
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b158:	e005      	b.n	800b166 <USBD_GetLen+0x1a>
  {
    len++;
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	3301      	adds	r3, #1
 800b15e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3301      	adds	r3, #1
 800b164:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1f5      	bne.n	800b15a <USBD_GetLen+0xe>
  }

  return len;
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	4613      	mov	r3, r2
 800b188:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2202      	movs	r2, #2
 800b18e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b192:	88fa      	ldrh	r2, [r7, #6]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b198:	88fa      	ldrh	r2, [r7, #6]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b19e:	88fb      	ldrh	r3, [r7, #6]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f000 fc46 	bl	800ba36 <USBD_LL_Transmit>

  return USBD_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1c2:	88fb      	ldrh	r3, [r7, #6]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f000 fc34 	bl	800ba36 <USBD_LL_Transmit>

  return USBD_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2203      	movs	r2, #3
 800b1ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1ee:	88fa      	ldrh	r2, [r7, #6]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b1f6:	88fa      	ldrh	r2, [r7, #6]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1fe:	88fb      	ldrh	r3, [r7, #6]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	2100      	movs	r1, #0
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f000 fc39 	bl	800ba7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4613      	mov	r3, r2
 800b220:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b222:	88fb      	ldrh	r3, [r7, #6]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	2100      	movs	r1, #0
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f000 fc27 	bl	800ba7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2204      	movs	r2, #4
 800b244:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b248:	2300      	movs	r3, #0
 800b24a:	2200      	movs	r2, #0
 800b24c:	2100      	movs	r1, #0
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fbf1 	bl	800ba36 <USBD_LL_Transmit>

  return USBD_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b082      	sub	sp, #8
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2205      	movs	r2, #5
 800b26a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b26e:	2300      	movs	r3, #0
 800b270:	2200      	movs	r2, #0
 800b272:	2100      	movs	r1, #0
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 fc01 	bl	800ba7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b288:	2200      	movs	r2, #0
 800b28a:	4912      	ldr	r1, [pc, #72]	; (800b2d4 <MX_USB_Device_Init+0x50>)
 800b28c:	4812      	ldr	r0, [pc, #72]	; (800b2d8 <MX_USB_Device_Init+0x54>)
 800b28e:	f7fe ff3c 	bl	800a10a <USBD_Init>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b298:	f7f5 fe98 	bl	8000fcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b29c:	490f      	ldr	r1, [pc, #60]	; (800b2dc <MX_USB_Device_Init+0x58>)
 800b29e:	480e      	ldr	r0, [pc, #56]	; (800b2d8 <MX_USB_Device_Init+0x54>)
 800b2a0:	f7fe ff5e 	bl	800a160 <USBD_RegisterClass>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b2aa:	f7f5 fe8f 	bl	8000fcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b2ae:	490c      	ldr	r1, [pc, #48]	; (800b2e0 <MX_USB_Device_Init+0x5c>)
 800b2b0:	4809      	ldr	r0, [pc, #36]	; (800b2d8 <MX_USB_Device_Init+0x54>)
 800b2b2:	f7fe febb 	bl	800a02c <USBD_CDC_RegisterInterface>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d001      	beq.n	800b2c0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b2bc:	f7f5 fe86 	bl	8000fcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b2c0:	4805      	ldr	r0, [pc, #20]	; (800b2d8 <MX_USB_Device_Init+0x54>)
 800b2c2:	f7fe ff67 	bl	800a194 <USBD_Start>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b2cc:	f7f5 fe7e 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b2d0:	bf00      	nop
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	2000012c 	.word	0x2000012c
 800b2d8:	200007d8 	.word	0x200007d8
 800b2dc:	20000018 	.word	0x20000018
 800b2e0:	2000011c 	.word	0x2000011c

0800b2e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	4905      	ldr	r1, [pc, #20]	; (800b300 <CDC_Init_FS+0x1c>)
 800b2ec:	4805      	ldr	r0, [pc, #20]	; (800b304 <CDC_Init_FS+0x20>)
 800b2ee:	f7fe feb4 	bl	800a05a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2f2:	4905      	ldr	r1, [pc, #20]	; (800b308 <CDC_Init_FS+0x24>)
 800b2f4:	4803      	ldr	r0, [pc, #12]	; (800b304 <CDC_Init_FS+0x20>)
 800b2f6:	f7fe feca 	bl	800a08e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	2000129c 	.word	0x2000129c
 800b304:	200007d8 	.word	0x200007d8
 800b308:	20000a9c 	.word	0x20000a9c

0800b30c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b30c:	b480      	push	{r7}
 800b30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b310:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b312:	4618      	mov	r0, r3
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	6039      	str	r1, [r7, #0]
 800b326:	71fb      	strb	r3, [r7, #7]
 800b328:	4613      	mov	r3, r2
 800b32a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b32c:	79fb      	ldrb	r3, [r7, #7]
 800b32e:	2b23      	cmp	r3, #35	; 0x23
 800b330:	d84a      	bhi.n	800b3c8 <CDC_Control_FS+0xac>
 800b332:	a201      	add	r2, pc, #4	; (adr r2, 800b338 <CDC_Control_FS+0x1c>)
 800b334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b338:	0800b3c9 	.word	0x0800b3c9
 800b33c:	0800b3c9 	.word	0x0800b3c9
 800b340:	0800b3c9 	.word	0x0800b3c9
 800b344:	0800b3c9 	.word	0x0800b3c9
 800b348:	0800b3c9 	.word	0x0800b3c9
 800b34c:	0800b3c9 	.word	0x0800b3c9
 800b350:	0800b3c9 	.word	0x0800b3c9
 800b354:	0800b3c9 	.word	0x0800b3c9
 800b358:	0800b3c9 	.word	0x0800b3c9
 800b35c:	0800b3c9 	.word	0x0800b3c9
 800b360:	0800b3c9 	.word	0x0800b3c9
 800b364:	0800b3c9 	.word	0x0800b3c9
 800b368:	0800b3c9 	.word	0x0800b3c9
 800b36c:	0800b3c9 	.word	0x0800b3c9
 800b370:	0800b3c9 	.word	0x0800b3c9
 800b374:	0800b3c9 	.word	0x0800b3c9
 800b378:	0800b3c9 	.word	0x0800b3c9
 800b37c:	0800b3c9 	.word	0x0800b3c9
 800b380:	0800b3c9 	.word	0x0800b3c9
 800b384:	0800b3c9 	.word	0x0800b3c9
 800b388:	0800b3c9 	.word	0x0800b3c9
 800b38c:	0800b3c9 	.word	0x0800b3c9
 800b390:	0800b3c9 	.word	0x0800b3c9
 800b394:	0800b3c9 	.word	0x0800b3c9
 800b398:	0800b3c9 	.word	0x0800b3c9
 800b39c:	0800b3c9 	.word	0x0800b3c9
 800b3a0:	0800b3c9 	.word	0x0800b3c9
 800b3a4:	0800b3c9 	.word	0x0800b3c9
 800b3a8:	0800b3c9 	.word	0x0800b3c9
 800b3ac:	0800b3c9 	.word	0x0800b3c9
 800b3b0:	0800b3c9 	.word	0x0800b3c9
 800b3b4:	0800b3c9 	.word	0x0800b3c9
 800b3b8:	0800b3c9 	.word	0x0800b3c9
 800b3bc:	0800b3c9 	.word	0x0800b3c9
 800b3c0:	0800b3c9 	.word	0x0800b3c9
 800b3c4:	0800b3c9 	.word	0x0800b3c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b3c8:	bf00      	nop
  }

  return (USBD_OK);
 800b3ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4805      	ldr	r0, [pc, #20]	; (800b3fc <CDC_Receive_FS+0x24>)
 800b3e6:	f7fe fe52 	bl	800a08e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b3ea:	4804      	ldr	r0, [pc, #16]	; (800b3fc <CDC_Receive_FS+0x24>)
 800b3ec:	f7fe fe63 	bl	800a0b6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b3f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	200007d8 	.word	0x200007d8

0800b400 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	6039      	str	r1, [r7, #0]
 800b40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2212      	movs	r2, #18
 800b410:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b412:	4b03      	ldr	r3, [pc, #12]	; (800b420 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b414:	4618      	mov	r0, r3
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	2000014c 	.word	0x2000014c

0800b424 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4603      	mov	r3, r0
 800b42c:	6039      	str	r1, [r7, #0]
 800b42e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2204      	movs	r2, #4
 800b434:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b436:	4b03      	ldr	r3, [pc, #12]	; (800b444 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	20000160 	.word	0x20000160

0800b448 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	6039      	str	r1, [r7, #0]
 800b452:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b454:	79fb      	ldrb	r3, [r7, #7]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d105      	bne.n	800b466 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	4907      	ldr	r1, [pc, #28]	; (800b47c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b45e:	4808      	ldr	r0, [pc, #32]	; (800b480 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b460:	f7ff fe32 	bl	800b0c8 <USBD_GetString>
 800b464:	e004      	b.n	800b470 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	4904      	ldr	r1, [pc, #16]	; (800b47c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b46a:	4805      	ldr	r0, [pc, #20]	; (800b480 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b46c:	f7ff fe2c 	bl	800b0c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b470:	4b02      	ldr	r3, [pc, #8]	; (800b47c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b472:	4618      	mov	r0, r3
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	20001a9c 	.word	0x20001a9c
 800b480:	0800bc68 	.word	0x0800bc68

0800b484 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	6039      	str	r1, [r7, #0]
 800b48e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	4904      	ldr	r1, [pc, #16]	; (800b4a4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b494:	4804      	ldr	r0, [pc, #16]	; (800b4a8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b496:	f7ff fe17 	bl	800b0c8 <USBD_GetString>
  return USBD_StrDesc;
 800b49a:	4b02      	ldr	r3, [pc, #8]	; (800b4a4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20001a9c 	.word	0x20001a9c
 800b4a8:	0800bc80 	.word	0x0800bc80

0800b4ac <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	6039      	str	r1, [r7, #0]
 800b4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	221a      	movs	r2, #26
 800b4bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4be:	f000 f843 	bl	800b548 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b4c2:	4b02      	ldr	r3, [pc, #8]	; (800b4cc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	20000164 	.word	0x20000164

0800b4d0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	6039      	str	r1, [r7, #0]
 800b4da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4dc:	79fb      	ldrb	r3, [r7, #7]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d105      	bne.n	800b4ee <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	4907      	ldr	r1, [pc, #28]	; (800b504 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b4e6:	4808      	ldr	r0, [pc, #32]	; (800b508 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b4e8:	f7ff fdee 	bl	800b0c8 <USBD_GetString>
 800b4ec:	e004      	b.n	800b4f8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	4904      	ldr	r1, [pc, #16]	; (800b504 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b4f2:	4805      	ldr	r0, [pc, #20]	; (800b508 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b4f4:	f7ff fde8 	bl	800b0c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4f8:	4b02      	ldr	r3, [pc, #8]	; (800b504 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	20001a9c 	.word	0x20001a9c
 800b508:	0800bc94 	.word	0x0800bc94

0800b50c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	4603      	mov	r3, r0
 800b514:	6039      	str	r1, [r7, #0]
 800b516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d105      	bne.n	800b52a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	4907      	ldr	r1, [pc, #28]	; (800b540 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b522:	4808      	ldr	r0, [pc, #32]	; (800b544 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b524:	f7ff fdd0 	bl	800b0c8 <USBD_GetString>
 800b528:	e004      	b.n	800b534 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4904      	ldr	r1, [pc, #16]	; (800b540 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b52e:	4805      	ldr	r0, [pc, #20]	; (800b544 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b530:	f7ff fdca 	bl	800b0c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b534:	4b02      	ldr	r3, [pc, #8]	; (800b540 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20001a9c 	.word	0x20001a9c
 800b544:	0800bca0 	.word	0x0800bca0

0800b548 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b54e:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <Get_SerialNum+0x44>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b554:	4b0e      	ldr	r3, [pc, #56]	; (800b590 <Get_SerialNum+0x48>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b55a:	4b0e      	ldr	r3, [pc, #56]	; (800b594 <Get_SerialNum+0x4c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4413      	add	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d009      	beq.n	800b582 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b56e:	2208      	movs	r2, #8
 800b570:	4909      	ldr	r1, [pc, #36]	; (800b598 <Get_SerialNum+0x50>)
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f000 f814 	bl	800b5a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b578:	2204      	movs	r2, #4
 800b57a:	4908      	ldr	r1, [pc, #32]	; (800b59c <Get_SerialNum+0x54>)
 800b57c:	68b8      	ldr	r0, [r7, #8]
 800b57e:	f000 f80f 	bl	800b5a0 <IntToUnicode>
  }
}
 800b582:	bf00      	nop
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	1fff7590 	.word	0x1fff7590
 800b590:	1fff7594 	.word	0x1fff7594
 800b594:	1fff7598 	.word	0x1fff7598
 800b598:	20000166 	.word	0x20000166
 800b59c:	20000176 	.word	0x20000176

0800b5a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	75fb      	strb	r3, [r7, #23]
 800b5b6:	e027      	b.n	800b608 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	0f1b      	lsrs	r3, r3, #28
 800b5bc:	2b09      	cmp	r3, #9
 800b5be:	d80b      	bhi.n	800b5d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	0f1b      	lsrs	r3, r3, #28
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	440b      	add	r3, r1
 800b5d0:	3230      	adds	r2, #48	; 0x30
 800b5d2:	b2d2      	uxtb	r2, r2
 800b5d4:	701a      	strb	r2, [r3, #0]
 800b5d6:	e00a      	b.n	800b5ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	0f1b      	lsrs	r3, r3, #28
 800b5dc:	b2da      	uxtb	r2, r3
 800b5de:	7dfb      	ldrb	r3, [r7, #23]
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	440b      	add	r3, r1
 800b5e8:	3237      	adds	r2, #55	; 0x37
 800b5ea:	b2d2      	uxtb	r2, r2
 800b5ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	011b      	lsls	r3, r3, #4
 800b5f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	2200      	movs	r2, #0
 800b600:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b602:	7dfb      	ldrb	r3, [r7, #23]
 800b604:	3301      	adds	r3, #1
 800b606:	75fb      	strb	r3, [r7, #23]
 800b608:	7dfa      	ldrb	r2, [r7, #23]
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d3d3      	bcc.n	800b5b8 <IntToUnicode+0x18>
  }
}
 800b610:	bf00      	nop
 800b612:	371c      	adds	r7, #28
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a0d      	ldr	r2, [pc, #52]	; (800b660 <HAL_PCD_MspInit+0x44>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d113      	bne.n	800b656 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b62e:	4b0d      	ldr	r3, [pc, #52]	; (800b664 <HAL_PCD_MspInit+0x48>)
 800b630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b632:	4a0c      	ldr	r2, [pc, #48]	; (800b664 <HAL_PCD_MspInit+0x48>)
 800b634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b638:	6593      	str	r3, [r2, #88]	; 0x58
 800b63a:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <HAL_PCD_MspInit+0x48>)
 800b63c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b63e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b646:	2200      	movs	r2, #0
 800b648:	2100      	movs	r1, #0
 800b64a:	2014      	movs	r0, #20
 800b64c:	f7f7 fd5d 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b650:	2014      	movs	r0, #20
 800b652:	f7f7 fd74 	bl	800313e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b656:	bf00      	nop
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	40005c00 	.word	0x40005c00
 800b664:	40021000 	.word	0x40021000

0800b668 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b67c:	4619      	mov	r1, r3
 800b67e:	4610      	mov	r0, r2
 800b680:	f7fe fdd1 	bl	800a226 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800b69e:	78fb      	ldrb	r3, [r7, #3]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	015b      	lsls	r3, r3, #5
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	78fb      	ldrb	r3, [r7, #3]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	f7fe fe04 	bl	800a2bc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800b6ce:	78fb      	ldrb	r3, [r7, #3]
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	015b      	lsls	r3, r3, #5
 800b6d4:	4413      	add	r3, r2
 800b6d6:	333c      	adds	r3, #60	; 0x3c
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	78fb      	ldrb	r3, [r7, #3]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	f7fe fe5e 	bl	800a39e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b6e2:	bf00      	nop
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fe ff71 	bl	800a5e0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b6fe:	bf00      	nop
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b70e:	2301      	movs	r3, #1
 800b710:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	2b02      	cmp	r3, #2
 800b718:	d001      	beq.n	800b71e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b71a:	f7f5 fc57 	bl	8000fcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b724:	7bfa      	ldrb	r2, [r7, #15]
 800b726:	4611      	mov	r1, r2
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe ff1e 	bl	800a56a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b734:	4618      	mov	r0, r3
 800b736:	f7fe fed7 	bl	800a4e8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b73a:	bf00      	nop
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
	...

0800b744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe ff19 	bl	800a58a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d005      	beq.n	800b76c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b760:	4b04      	ldr	r3, [pc, #16]	; (800b774 <HAL_PCD_SuspendCallback+0x30>)
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	4a03      	ldr	r2, [pc, #12]	; (800b774 <HAL_PCD_SuspendCallback+0x30>)
 800b766:	f043 0306 	orr.w	r3, r3, #6
 800b76a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b76c:	bf00      	nop
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	e000ed00 	.word	0xe000ed00

0800b778 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d007      	beq.n	800b798 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b788:	4b08      	ldr	r3, [pc, #32]	; (800b7ac <HAL_PCD_ResumeCallback+0x34>)
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	4a07      	ldr	r2, [pc, #28]	; (800b7ac <HAL_PCD_ResumeCallback+0x34>)
 800b78e:	f023 0306 	bic.w	r3, r3, #6
 800b792:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b794:	f000 f9f6 	bl	800bb84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe ff08 	bl	800a5b4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	e000ed00 	.word	0xe000ed00

0800b7b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b7b8:	4a2b      	ldr	r2, [pc, #172]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a29      	ldr	r2, [pc, #164]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b7c8:	4b27      	ldr	r3, [pc, #156]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7ca:	4a28      	ldr	r2, [pc, #160]	; (800b86c <USBD_LL_Init+0xbc>)
 800b7cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b7ce:	4b26      	ldr	r3, [pc, #152]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b7d4:	4b24      	ldr	r3, [pc, #144]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b7da:	4b23      	ldr	r3, [pc, #140]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7dc:	2202      	movs	r2, #2
 800b7de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b7e0:	4b21      	ldr	r3, [pc, #132]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b7e6:	4b20      	ldr	r3, [pc, #128]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b7ec:	4b1e      	ldr	r3, [pc, #120]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7f2:	4b1d      	ldr	r3, [pc, #116]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7f8:	481b      	ldr	r0, [pc, #108]	; (800b868 <USBD_LL_Init+0xb8>)
 800b7fa:	f7f8 fcdf 	bl	80041bc <HAL_PCD_Init>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b804:	f7f5 fbe2 	bl	8000fcc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b80e:	2318      	movs	r3, #24
 800b810:	2200      	movs	r2, #0
 800b812:	2100      	movs	r1, #0
 800b814:	f7f9 fb8c 	bl	8004f30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b81e:	2358      	movs	r3, #88	; 0x58
 800b820:	2200      	movs	r2, #0
 800b822:	2180      	movs	r1, #128	; 0x80
 800b824:	f7f9 fb84 	bl	8004f30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b82e:	23c0      	movs	r3, #192	; 0xc0
 800b830:	2200      	movs	r2, #0
 800b832:	2181      	movs	r1, #129	; 0x81
 800b834:	f7f9 fb7c 	bl	8004f30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b83e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b842:	2200      	movs	r2, #0
 800b844:	2101      	movs	r1, #1
 800b846:	f7f9 fb73 	bl	8004f30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b850:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b854:	2200      	movs	r2, #0
 800b856:	2182      	movs	r1, #130	; 0x82
 800b858:	f7f9 fb6a 	bl	8004f30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20001c9c 	.word	0x20001c9c
 800b86c:	40005c00 	.word	0x40005c00

0800b870 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b886:	4618      	mov	r0, r3
 800b888:	f7f8 fd53 	bl	8004332 <HAL_PCD_Start>
 800b88c:	4603      	mov	r3, r0
 800b88e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	4618      	mov	r0, r3
 800b894:	f000 f97c 	bl	800bb90 <USBD_Get_USB_Status>
 800b898:	4603      	mov	r3, r0
 800b89a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b89c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	4608      	mov	r0, r1
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	70fb      	strb	r3, [r7, #3]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	70bb      	strb	r3, [r7, #2]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b8ce:	78bb      	ldrb	r3, [r7, #2]
 800b8d0:	883a      	ldrh	r2, [r7, #0]
 800b8d2:	78f9      	ldrb	r1, [r7, #3]
 800b8d4:	f7f8 fecd 	bl	8004672 <HAL_PCD_EP_Open>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 f956 	bl	800bb90 <USBD_Get_USB_Status>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b084      	sub	sp, #16
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b90c:	78fa      	ldrb	r2, [r7, #3]
 800b90e:	4611      	mov	r1, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f7f8 ff0e 	bl	8004732 <HAL_PCD_EP_Close>
 800b916:	4603      	mov	r3, r0
 800b918:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f000 f937 	bl	800bb90 <USBD_Get_USB_Status>
 800b922:	4603      	mov	r3, r0
 800b924:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800b926:	7bbb      	ldrb	r3, [r7, #14]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b94a:	78fa      	ldrb	r2, [r7, #3]
 800b94c:	4611      	mov	r1, r2
 800b94e:	4618      	mov	r0, r3
 800b950:	f7f8 ffb9 	bl	80048c6 <HAL_PCD_EP_SetStall>
 800b954:	4603      	mov	r3, r0
 800b956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 f918 	bl	800bb90 <USBD_Get_USB_Status>
 800b960:	4603      	mov	r3, r0
 800b962:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b964:	7bbb      	ldrb	r3, [r7, #14]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	460b      	mov	r3, r1
 800b978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b988:	78fa      	ldrb	r2, [r7, #3]
 800b98a:	4611      	mov	r1, r2
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7f8 fff4 	bl	800497a <HAL_PCD_EP_ClrStall>
 800b992:	4603      	mov	r3, r0
 800b994:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b996:	7bfb      	ldrb	r3, [r7, #15]
 800b998:	4618      	mov	r0, r3
 800b99a:	f000 f8f9 	bl	800bb90 <USBD_Get_USB_Status>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800b9a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9be:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b9c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	da08      	bge.n	800b9da <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	015b      	lsls	r3, r3, #5
 800b9d2:	4413      	add	r3, r2
 800b9d4:	332a      	adds	r3, #42	; 0x2a
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	e008      	b.n	800b9ec <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	015b      	lsls	r3, r3, #5
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b9ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	460b      	mov	r3, r1
 800ba02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba12:	78fa      	ldrb	r2, [r7, #3]
 800ba14:	4611      	mov	r1, r2
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7f8 fe06 	bl	8004628 <HAL_PCD_SetAddress>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 f8b4 	bl	800bb90 <USBD_Get_USB_Status>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b086      	sub	sp, #24
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	461a      	mov	r2, r3
 800ba42:	460b      	mov	r3, r1
 800ba44:	72fb      	strb	r3, [r7, #11]
 800ba46:	4613      	mov	r3, r2
 800ba48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba58:	893b      	ldrh	r3, [r7, #8]
 800ba5a:	7af9      	ldrb	r1, [r7, #11]
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	f7f8 fef9 	bl	8004854 <HAL_PCD_EP_Transmit>
 800ba62:	4603      	mov	r3, r0
 800ba64:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f000 f891 	bl	800bb90 <USBD_Get_USB_Status>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800ba72:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	607a      	str	r2, [r7, #4]
 800ba86:	461a      	mov	r2, r3
 800ba88:	460b      	mov	r3, r1
 800ba8a:	72fb      	strb	r3, [r7, #11]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba9e:	893b      	ldrh	r3, [r7, #8]
 800baa0:	7af9      	ldrb	r1, [r7, #11]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	f7f8 fe87 	bl	80047b6 <HAL_PCD_EP_Receive>
 800baa8:	4603      	mov	r3, r0
 800baaa:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800baac:	7dfb      	ldrb	r3, [r7, #23]
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 f86e 	bl	800bb90 <USBD_Get_USB_Status>
 800bab4:	4603      	mov	r3, r0
 800bab6:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800bab8:	7dbb      	ldrb	r3, [r7, #22]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3718      	adds	r7, #24
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b082      	sub	sp, #8
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	460b      	mov	r3, r1
 800bacc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bad4:	78fa      	ldrb	r2, [r7, #3]
 800bad6:	4611      	mov	r1, r2
 800bad8:	4618      	mov	r0, r3
 800bada:	f7f8 fea6 	bl	800482a <HAL_PCD_EP_GetRxCount>
 800bade:	4603      	mov	r3, r0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800baf4:	78fb      	ldrb	r3, [r7, #3]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <HAL_PCDEx_LPM_Callback+0x18>
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d013      	beq.n	800bb26 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800bafe:	e023      	b.n	800bb48 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d007      	beq.n	800bb18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bb08:	f000 f83c 	bl	800bb84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb0c:	4b10      	ldr	r3, [pc, #64]	; (800bb50 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	4a0f      	ldr	r2, [pc, #60]	; (800bb50 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb12:	f023 0306 	bic.w	r3, r3, #6
 800bb16:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fe fd48 	bl	800a5b4 <USBD_LL_Resume>
    break;
 800bb24:	e010      	b.n	800bb48 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe fd2c 	bl	800a58a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	699b      	ldr	r3, [r3, #24]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d005      	beq.n	800bb46 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb3a:	4b05      	ldr	r3, [pc, #20]	; (800bb50 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	4a04      	ldr	r2, [pc, #16]	; (800bb50 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb40:	f043 0306 	orr.w	r3, r3, #6
 800bb44:	6113      	str	r3, [r2, #16]
    break;   
 800bb46:	bf00      	nop
}
 800bb48:	bf00      	nop
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	e000ed00 	.word	0xe000ed00

0800bb54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb5c:	4b03      	ldr	r3, [pc, #12]	; (800bb6c <USBD_static_malloc+0x18>)
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	200001a8 	.word	0x200001a8

0800bb70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]

}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bb88:	f7f4 fdcc 	bl	8000724 <SystemClock_Config>
}
 800bb8c:	bf00      	nop
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	4603      	mov	r3, r0
 800bb98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb9e:	79fb      	ldrb	r3, [r7, #7]
 800bba0:	2b03      	cmp	r3, #3
 800bba2:	d817      	bhi.n	800bbd4 <USBD_Get_USB_Status+0x44>
 800bba4:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <USBD_Get_USB_Status+0x1c>)
 800bba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbaa:	bf00      	nop
 800bbac:	0800bbbd 	.word	0x0800bbbd
 800bbb0:	0800bbc3 	.word	0x0800bbc3
 800bbb4:	0800bbc9 	.word	0x0800bbc9
 800bbb8:	0800bbcf 	.word	0x0800bbcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc0:	e00b      	b.n	800bbda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbc2:	2302      	movs	r3, #2
 800bbc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc6:	e008      	b.n	800bbda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	73fb      	strb	r3, [r7, #15]
    break;
 800bbcc:	e005      	b.n	800bbda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbce:	2302      	movs	r3, #2
 800bbd0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd2:	e002      	b.n	800bbda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbd8:	bf00      	nop
  }
  return usb_status;
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <__libc_init_array>:
 800bbe8:	b570      	push	{r4, r5, r6, lr}
 800bbea:	4e0d      	ldr	r6, [pc, #52]	; (800bc20 <__libc_init_array+0x38>)
 800bbec:	4c0d      	ldr	r4, [pc, #52]	; (800bc24 <__libc_init_array+0x3c>)
 800bbee:	1ba4      	subs	r4, r4, r6
 800bbf0:	10a4      	asrs	r4, r4, #2
 800bbf2:	2500      	movs	r5, #0
 800bbf4:	42a5      	cmp	r5, r4
 800bbf6:	d109      	bne.n	800bc0c <__libc_init_array+0x24>
 800bbf8:	4e0b      	ldr	r6, [pc, #44]	; (800bc28 <__libc_init_array+0x40>)
 800bbfa:	4c0c      	ldr	r4, [pc, #48]	; (800bc2c <__libc_init_array+0x44>)
 800bbfc:	f000 f820 	bl	800bc40 <_init>
 800bc00:	1ba4      	subs	r4, r4, r6
 800bc02:	10a4      	asrs	r4, r4, #2
 800bc04:	2500      	movs	r5, #0
 800bc06:	42a5      	cmp	r5, r4
 800bc08:	d105      	bne.n	800bc16 <__libc_init_array+0x2e>
 800bc0a:	bd70      	pop	{r4, r5, r6, pc}
 800bc0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc10:	4798      	blx	r3
 800bc12:	3501      	adds	r5, #1
 800bc14:	e7ee      	b.n	800bbf4 <__libc_init_array+0xc>
 800bc16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc1a:	4798      	blx	r3
 800bc1c:	3501      	adds	r5, #1
 800bc1e:	e7f2      	b.n	800bc06 <__libc_init_array+0x1e>
 800bc20:	0800bcd0 	.word	0x0800bcd0
 800bc24:	0800bcd0 	.word	0x0800bcd0
 800bc28:	0800bcd0 	.word	0x0800bcd0
 800bc2c:	0800bcd4 	.word	0x0800bcd4

0800bc30 <memset>:
 800bc30:	4402      	add	r2, r0
 800bc32:	4603      	mov	r3, r0
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d100      	bne.n	800bc3a <memset+0xa>
 800bc38:	4770      	bx	lr
 800bc3a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc3e:	e7f9      	b.n	800bc34 <memset+0x4>

0800bc40 <_init>:
 800bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc42:	bf00      	nop
 800bc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc46:	bc08      	pop	{r3}
 800bc48:	469e      	mov	lr, r3
 800bc4a:	4770      	bx	lr

0800bc4c <_fini>:
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4e:	bf00      	nop
 800bc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc52:	bc08      	pop	{r3}
 800bc54:	469e      	mov	lr, r3
 800bc56:	4770      	bx	lr
